var Us = Object.defineProperty;
var Ws = (i, t, e) => t in i ? Us(i, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : i[t] = e;
var at = (i, t, e) => (Ws(i, typeof t != "symbol" ? t + "" : t, e), e);
const Bt = Math.min, et = Math.max, Ae = Math.round, ut = (i) => ({
  x: i,
  y: i
}), Ys = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
}, Gs = {
  start: "end",
  end: "start"
};
function nn(i, t, e) {
  return et(i, Bt(t, e));
}
function ue(i, t) {
  return typeof i == "function" ? i(t) : i;
}
function it(i) {
  return i.split("-")[0];
}
function He(i) {
  return i.split("-")[1];
}
function Nn(i) {
  return i === "x" ? "y" : "x";
}
function qn(i) {
  return i === "y" ? "height" : "width";
}
const Qs = /* @__PURE__ */ new Set(["top", "bottom"]);
function tt(i) {
  return Qs.has(it(i)) ? "y" : "x";
}
function Vn(i) {
  return Nn(tt(i));
}
function Ks(i, t, e) {
  e === void 0 && (e = !1);
  const n = He(i), s = Vn(i), r = qn(s);
  let o = s === "x" ? n === (e ? "end" : "start") ? "right" : "left" : n === "start" ? "bottom" : "top";
  return t.reference[r] > t.floating[r] && (o = Se(o)), [o, Se(o)];
}
function Xs(i) {
  const t = Se(i);
  return [ri(i), t, ri(t)];
}
function ri(i) {
  return i.replace(/start|end/g, (t) => Gs[t]);
}
const sn = ["left", "right"], rn = ["right", "left"], Js = ["top", "bottom"], Zs = ["bottom", "top"];
function tr(i, t, e) {
  switch (i) {
    case "top":
    case "bottom":
      return e ? t ? rn : sn : t ? sn : rn;
    case "left":
    case "right":
      return t ? Js : Zs;
    default:
      return [];
  }
}
function er(i, t, e, n) {
  const s = He(i);
  let r = tr(it(i), e === "start", n);
  return s && (r = r.map((o) => o + "-" + s), t && (r = r.concat(r.map(ri)))), r;
}
function Se(i) {
  return i.replace(/left|right|bottom|top/g, (t) => Ys[t]);
}
function ir(i) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...i
  };
}
function Un(i) {
  return typeof i != "number" ? ir(i) : {
    top: i,
    right: i,
    bottom: i,
    left: i
  };
}
function Mt(i) {
  const {
    x: t,
    y: e,
    width: n,
    height: s
  } = i;
  return {
    width: n,
    height: s,
    top: e,
    left: t,
    right: t + n,
    bottom: e + s,
    x: t,
    y: e
  };
}
function on(i, t, e) {
  let {
    reference: n,
    floating: s
  } = i;
  const r = tt(t), o = Vn(t), l = qn(o), a = it(t), c = r === "y", u = n.x + n.width / 2 - s.width / 2, h = n.y + n.height / 2 - s.height / 2, p = n[l] / 2 - s[l] / 2;
  let f;
  switch (a) {
    case "top":
      f = {
        x: u,
        y: n.y - s.height
      };
      break;
    case "bottom":
      f = {
        x: u,
        y: n.y + n.height
      };
      break;
    case "right":
      f = {
        x: n.x + n.width,
        y: h
      };
      break;
    case "left":
      f = {
        x: n.x - s.width,
        y: h
      };
      break;
    default:
      f = {
        x: n.x,
        y: n.y
      };
  }
  switch (He(t)) {
    case "start":
      f[o] -= p * (e && c ? -1 : 1);
      break;
    case "end":
      f[o] += p * (e && c ? -1 : 1);
      break;
  }
  return f;
}
const nr = async (i, t, e) => {
  const {
    placement: n = "bottom",
    strategy: s = "absolute",
    middleware: r = [],
    platform: o
  } = e, l = r.filter(Boolean), a = await (o.isRTL == null ? void 0 : o.isRTL(t));
  let c = await o.getElementRects({
    reference: i,
    floating: t,
    strategy: s
  }), {
    x: u,
    y: h
  } = on(c, n, a), p = n, f = {}, g = 0;
  for (let v = 0; v < l.length; v++) {
    const {
      name: b,
      fn: $
    } = l[v], {
      x: y,
      y: w,
      data: A,
      reset: k
    } = await $({
      x: u,
      y: h,
      initialPlacement: n,
      placement: p,
      strategy: s,
      middlewareData: f,
      rects: c,
      platform: o,
      elements: {
        reference: i,
        floating: t
      }
    });
    u = y ?? u, h = w ?? h, f = {
      ...f,
      [b]: {
        ...f[b],
        ...A
      }
    }, k && g <= 50 && (g++, typeof k == "object" && (k.placement && (p = k.placement), k.rects && (c = k.rects === !0 ? await o.getElementRects({
      reference: i,
      floating: t,
      strategy: s
    }) : k.rects), {
      x: u,
      y: h
    } = on(c, p, a)), v = -1);
  }
  return {
    x: u,
    y: h,
    placement: p,
    strategy: s,
    middlewareData: f
  };
};
async function Wn(i, t) {
  var e;
  t === void 0 && (t = {});
  const {
    x: n,
    y: s,
    platform: r,
    rects: o,
    elements: l,
    strategy: a
  } = i, {
    boundary: c = "clippingAncestors",
    rootBoundary: u = "viewport",
    elementContext: h = "floating",
    altBoundary: p = !1,
    padding: f = 0
  } = ue(t, i), g = Un(f), b = l[p ? h === "floating" ? "reference" : "floating" : h], $ = Mt(await r.getClippingRect({
    element: (e = await (r.isElement == null ? void 0 : r.isElement(b))) == null || e ? b : b.contextElement || await (r.getDocumentElement == null ? void 0 : r.getDocumentElement(l.floating)),
    boundary: c,
    rootBoundary: u,
    strategy: a
  })), y = h === "floating" ? {
    x: n,
    y: s,
    width: o.floating.width,
    height: o.floating.height
  } : o.reference, w = await (r.getOffsetParent == null ? void 0 : r.getOffsetParent(l.floating)), A = await (r.isElement == null ? void 0 : r.isElement(w)) ? await (r.getScale == null ? void 0 : r.getScale(w)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  }, k = Mt(r.convertOffsetParentRelativeRectToViewportRelativeRect ? await r.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements: l,
    rect: y,
    offsetParent: w,
    strategy: a
  }) : y);
  return {
    top: ($.top - k.top + g.top) / A.y,
    bottom: (k.bottom - $.bottom + g.bottom) / A.y,
    left: ($.left - k.left + g.left) / A.x,
    right: (k.right - $.right + g.right) / A.x
  };
}
const sr = function(i) {
  return i === void 0 && (i = {}), {
    name: "flip",
    options: i,
    async fn(t) {
      var e, n;
      const {
        placement: s,
        middlewareData: r,
        rects: o,
        initialPlacement: l,
        platform: a,
        elements: c
      } = t, {
        mainAxis: u = !0,
        crossAxis: h = !0,
        fallbackPlacements: p,
        fallbackStrategy: f = "bestFit",
        fallbackAxisSideDirection: g = "none",
        flipAlignment: v = !0,
        ...b
      } = ue(i, t);
      if ((e = r.arrow) != null && e.alignmentOffset)
        return {};
      const $ = it(s), y = tt(l), w = it(l) === l, A = await (a.isRTL == null ? void 0 : a.isRTL(c.floating)), k = p || (w || !v ? [Se(l)] : Xs(l)), x = g !== "none";
      !p && x && k.push(...er(l, v, g, A));
      const I = [l, ...k], V = await Wn(t, b), U = [];
      let E = ((n = r.flip) == null ? void 0 : n.overflows) || [];
      if (u && U.push(V[$]), h) {
        const Q = Ks(s, o, A);
        U.push(V[Q[0]], V[Q[1]]);
      }
      if (E = [...E, {
        placement: s,
        overflows: U
      }], !U.every((Q) => Q <= 0)) {
        var It, Yt;
        const Q = (((It = r.flip) == null ? void 0 : It.index) || 0) + 1, xt = I[Q];
        if (xt && (!(h === "alignment" ? y !== tt(xt) : !1) || // We leave the current main axis only if every placement on that axis
        // overflows the main axis.
        E.every((M) => M.overflows[0] > 0 && tt(M.placement) === y)))
          return {
            data: {
              index: Q,
              overflows: E
            },
            reset: {
              placement: xt
            }
          };
        let rt = (Yt = E.filter((Z) => Z.overflows[0] <= 0).sort((Z, M) => Z.overflows[1] - M.overflows[1])[0]) == null ? void 0 : Yt.placement;
        if (!rt)
          switch (f) {
            case "bestFit": {
              var Lt;
              const Z = (Lt = E.filter((M) => {
                if (x) {
                  const ot = tt(M.placement);
                  return ot === y || // Create a bias to the `y` side axis due to horizontal
                  // reading directions favoring greater width.
                  ot === "y";
                }
                return !0;
              }).map((M) => [M.placement, M.overflows.filter((ot) => ot > 0).reduce((ot, Vs) => ot + Vs, 0)]).sort((M, ot) => M[1] - ot[1])[0]) == null ? void 0 : Lt[0];
              Z && (rt = Z);
              break;
            }
            case "initialPlacement":
              rt = l;
              break;
          }
        if (s !== rt)
          return {
            reset: {
              placement: rt
            }
          };
      }
      return {};
    }
  };
};
function Yn(i) {
  const t = Bt(...i.map((r) => r.left)), e = Bt(...i.map((r) => r.top)), n = et(...i.map((r) => r.right)), s = et(...i.map((r) => r.bottom));
  return {
    x: t,
    y: e,
    width: n - t,
    height: s - e
  };
}
function rr(i) {
  const t = i.slice().sort((s, r) => s.y - r.y), e = [];
  let n = null;
  for (let s = 0; s < t.length; s++) {
    const r = t[s];
    !n || r.y - n.y > n.height / 2 ? e.push([r]) : e[e.length - 1].push(r), n = r;
  }
  return e.map((s) => Mt(Yn(s)));
}
const or = function(i) {
  return i === void 0 && (i = {}), {
    name: "inline",
    options: i,
    async fn(t) {
      const {
        placement: e,
        elements: n,
        rects: s,
        platform: r,
        strategy: o
      } = t, {
        padding: l = 2,
        x: a,
        y: c
      } = ue(i, t), u = Array.from(await (r.getClientRects == null ? void 0 : r.getClientRects(n.reference)) || []), h = rr(u), p = Mt(Yn(u)), f = Un(l);
      function g() {
        if (h.length === 2 && h[0].left > h[1].right && a != null && c != null)
          return h.find((b) => a > b.left - f.left && a < b.right + f.right && c > b.top - f.top && c < b.bottom + f.bottom) || p;
        if (h.length >= 2) {
          if (tt(e) === "y") {
            const E = h[0], It = h[h.length - 1], Yt = it(e) === "top", Lt = E.top, Q = It.bottom, xt = Yt ? E.left : It.left, rt = Yt ? E.right : It.right, Z = rt - xt, M = Q - Lt;
            return {
              top: Lt,
              bottom: Q,
              left: xt,
              right: rt,
              width: Z,
              height: M,
              x: xt,
              y: Lt
            };
          }
          const b = it(e) === "left", $ = et(...h.map((E) => E.right)), y = Bt(...h.map((E) => E.left)), w = h.filter((E) => b ? E.left === y : E.right === $), A = w[0].top, k = w[w.length - 1].bottom, x = y, I = $, V = I - x, U = k - A;
          return {
            top: A,
            bottom: k,
            left: x,
            right: I,
            width: V,
            height: U,
            x,
            y: A
          };
        }
        return p;
      }
      const v = await r.getElementRects({
        reference: {
          getBoundingClientRect: g
        },
        floating: n.floating,
        strategy: o
      });
      return s.reference.x !== v.reference.x || s.reference.y !== v.reference.y || s.reference.width !== v.reference.width || s.reference.height !== v.reference.height ? {
        reset: {
          rects: v
        }
      } : {};
    }
  };
}, ar = /* @__PURE__ */ new Set(["left", "top"]);
async function lr(i, t) {
  const {
    placement: e,
    platform: n,
    elements: s
  } = i, r = await (n.isRTL == null ? void 0 : n.isRTL(s.floating)), o = it(e), l = He(e), a = tt(e) === "y", c = ar.has(o) ? -1 : 1, u = r && a ? -1 : 1, h = ue(t, i);
  let {
    mainAxis: p,
    crossAxis: f,
    alignmentAxis: g
  } = typeof h == "number" ? {
    mainAxis: h,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: h.mainAxis || 0,
    crossAxis: h.crossAxis || 0,
    alignmentAxis: h.alignmentAxis
  };
  return l && typeof g == "number" && (f = l === "end" ? g * -1 : g), a ? {
    x: f * u,
    y: p * c
  } : {
    x: p * c,
    y: f * u
  };
}
const Gn = function(i) {
  return {
    name: "offset",
    options: i,
    async fn(t) {
      var e, n;
      const {
        x: s,
        y: r,
        placement: o,
        middlewareData: l
      } = t, a = await lr(t, i);
      return o === ((e = l.offset) == null ? void 0 : e.placement) && (n = l.arrow) != null && n.alignmentOffset ? {} : {
        x: s + a.x,
        y: r + a.y,
        data: {
          ...a,
          placement: o
        }
      };
    }
  };
}, cr = function(i) {
  return i === void 0 && (i = {}), {
    name: "shift",
    options: i,
    async fn(t) {
      const {
        x: e,
        y: n,
        placement: s
      } = t, {
        mainAxis: r = !0,
        crossAxis: o = !1,
        limiter: l = {
          fn: (b) => {
            let {
              x: $,
              y
            } = b;
            return {
              x: $,
              y
            };
          }
        },
        ...a
      } = ue(i, t), c = {
        x: e,
        y: n
      }, u = await Wn(t, a), h = tt(it(s)), p = Nn(h);
      let f = c[p], g = c[h];
      if (r) {
        const b = p === "y" ? "top" : "left", $ = p === "y" ? "bottom" : "right", y = f + u[b], w = f - u[$];
        f = nn(y, f, w);
      }
      if (o) {
        const b = h === "y" ? "top" : "left", $ = h === "y" ? "bottom" : "right", y = g + u[b], w = g - u[$];
        g = nn(y, g, w);
      }
      const v = l.fn({
        ...t,
        [p]: f,
        [h]: g
      });
      return {
        ...v,
        data: {
          x: v.x - e,
          y: v.y - n,
          enabled: {
            [p]: r,
            [h]: o
          }
        }
      };
    }
  };
};
function De() {
  return typeof window < "u";
}
function ht(i) {
  return Qn(i) ? (i.nodeName || "").toLowerCase() : "#document";
}
function j(i) {
  var t;
  return (i == null || (t = i.ownerDocument) == null ? void 0 : t.defaultView) || window;
}
function yt(i) {
  var t;
  return (t = (Qn(i) ? i.ownerDocument : i.document) || window.document) == null ? void 0 : t.documentElement;
}
function Qn(i) {
  return De() ? i instanceof Node || i instanceof j(i).Node : !1;
}
function K(i) {
  return De() ? i instanceof Element || i instanceof j(i).Element : !1;
}
function X(i) {
  return De() ? i instanceof HTMLElement || i instanceof j(i).HTMLElement : !1;
}
function an(i) {
  return !De() || typeof ShadowRoot > "u" ? !1 : i instanceof ShadowRoot || i instanceof j(i).ShadowRoot;
}
const ur = /* @__PURE__ */ new Set(["inline", "contents"]);
function he(i) {
  const {
    overflow: t,
    overflowX: e,
    overflowY: n,
    display: s
  } = H(i);
  return /auto|scroll|overlay|hidden|clip/.test(t + n + e) && !ur.has(s);
}
const hr = /* @__PURE__ */ new Set(["table", "td", "th"]);
function dr(i) {
  return hr.has(ht(i));
}
const pr = [":popover-open", ":modal"];
function fr(i) {
  return pr.some((t) => {
    try {
      return i.matches(t);
    } catch {
      return !1;
    }
  });
}
const mr = ["transform", "translate", "scale", "rotate", "perspective"], br = ["transform", "translate", "scale", "rotate", "perspective", "filter"], gr = ["paint", "layout", "strict", "content"];
function yi(i) {
  const t = _i(), e = K(i) ? H(i) : i;
  return mr.some((n) => e[n] ? e[n] !== "none" : !1) || (e.containerType ? e.containerType !== "normal" : !1) || !t && (e.backdropFilter ? e.backdropFilter !== "none" : !1) || !t && (e.filter ? e.filter !== "none" : !1) || br.some((n) => (e.willChange || "").includes(n)) || gr.some((n) => (e.contain || "").includes(n));
}
function vr(i) {
  let t = jt(i);
  for (; X(t) && !Fe(t); ) {
    if (yi(t))
      return t;
    if (fr(t))
      return null;
    t = jt(t);
  }
  return null;
}
function _i() {
  return typeof CSS > "u" || !CSS.supports ? !1 : CSS.supports("-webkit-backdrop-filter", "none");
}
const yr = /* @__PURE__ */ new Set(["html", "body", "#document"]);
function Fe(i) {
  return yr.has(ht(i));
}
function H(i) {
  return j(i).getComputedStyle(i);
}
function Ne(i) {
  return K(i) ? {
    scrollLeft: i.scrollLeft,
    scrollTop: i.scrollTop
  } : {
    scrollLeft: i.scrollX,
    scrollTop: i.scrollY
  };
}
function jt(i) {
  if (ht(i) === "html")
    return i;
  const t = (
    // Step into the shadow DOM of the parent of a slotted node.
    i.assignedSlot || // DOM Element detected.
    i.parentNode || // ShadowRoot detected.
    an(i) && i.host || // Fallback.
    yt(i)
  );
  return an(t) ? t.host : t;
}
function Kn(i) {
  const t = jt(i);
  return Fe(t) ? i.ownerDocument ? i.ownerDocument.body : i.body : X(t) && he(t) ? t : Kn(t);
}
function Xn(i, t, e) {
  var n;
  t === void 0 && (t = []);
  const s = Kn(i), r = s === ((n = i.ownerDocument) == null ? void 0 : n.body), o = j(s);
  return r ? (_r(o), t.concat(o, o.visualViewport || [], he(s) ? s : [], [])) : t.concat(s, Xn(s, []));
}
function _r(i) {
  return i.parent && Object.getPrototypeOf(i.parent) ? i.frameElement : null;
}
function Jn(i) {
  const t = H(i);
  let e = parseFloat(t.width) || 0, n = parseFloat(t.height) || 0;
  const s = X(i), r = s ? i.offsetWidth : e, o = s ? i.offsetHeight : n, l = Ae(e) !== r || Ae(n) !== o;
  return l && (e = r, n = o), {
    width: e,
    height: n,
    $: l
  };
}
function Zn(i) {
  return K(i) ? i : i.contextElement;
}
function zt(i) {
  const t = Zn(i);
  if (!X(t))
    return ut(1);
  const e = t.getBoundingClientRect(), {
    width: n,
    height: s,
    $: r
  } = Jn(t);
  let o = (r ? Ae(e.width) : e.width) / n, l = (r ? Ae(e.height) : e.height) / s;
  return (!o || !Number.isFinite(o)) && (o = 1), (!l || !Number.isFinite(l)) && (l = 1), {
    x: o,
    y: l
  };
}
const wr = /* @__PURE__ */ ut(0);
function ts(i) {
  const t = j(i);
  return !_i() || !t.visualViewport ? wr : {
    x: t.visualViewport.offsetLeft,
    y: t.visualViewport.offsetTop
  };
}
function xr(i, t, e) {
  return t === void 0 && (t = !1), !e || t && e !== j(i) ? !1 : t;
}
function ee(i, t, e, n) {
  t === void 0 && (t = !1), e === void 0 && (e = !1);
  const s = i.getBoundingClientRect(), r = Zn(i);
  let o = ut(1);
  t && (n ? K(n) && (o = zt(n)) : o = zt(i));
  const l = xr(r, e, n) ? ts(r) : ut(0);
  let a = (s.left + l.x) / o.x, c = (s.top + l.y) / o.y, u = s.width / o.x, h = s.height / o.y;
  if (r) {
    const p = j(r), f = n && K(n) ? j(n) : n;
    let g = p, v = g.frameElement;
    for (; v && n && f !== g; ) {
      const b = zt(v), $ = v.getBoundingClientRect(), y = H(v), w = $.left + (v.clientLeft + parseFloat(y.paddingLeft)) * b.x, A = $.top + (v.clientTop + parseFloat(y.paddingTop)) * b.y;
      a *= b.x, c *= b.y, u *= b.x, h *= b.y, a += w, c += A, g = j(v), v = g.frameElement;
    }
  }
  return Mt({
    width: u,
    height: h,
    x: a,
    y: c
  });
}
const $r = [":popover-open", ":modal"];
function es(i) {
  return $r.some((t) => {
    try {
      return i.matches(t);
    } catch {
      return !1;
    }
  });
}
function Cr(i) {
  let {
    elements: t,
    rect: e,
    offsetParent: n,
    strategy: s
  } = i;
  const r = s === "fixed", o = yt(n), l = t ? es(t.floating) : !1;
  if (n === o || l && r)
    return e;
  let a = {
    scrollLeft: 0,
    scrollTop: 0
  }, c = ut(1);
  const u = ut(0), h = X(n);
  if ((h || !h && !r) && ((ht(n) !== "body" || he(o)) && (a = Ne(n)), X(n))) {
    const p = ee(n);
    c = zt(n), u.x = p.x + n.clientLeft, u.y = p.y + n.clientTop;
  }
  return {
    width: e.width * c.x,
    height: e.height * c.y,
    x: e.x * c.x - a.scrollLeft * c.x + u.x,
    y: e.y * c.y - a.scrollTop * c.y + u.y
  };
}
function Ar(i) {
  return Array.from(i.getClientRects());
}
function is(i) {
  return ee(yt(i)).left + Ne(i).scrollLeft;
}
function Sr(i) {
  const t = yt(i), e = Ne(i), n = i.ownerDocument.body, s = et(t.scrollWidth, t.clientWidth, n.scrollWidth, n.clientWidth), r = et(t.scrollHeight, t.clientHeight, n.scrollHeight, n.clientHeight);
  let o = -e.scrollLeft + is(i);
  const l = -e.scrollTop;
  return H(n).direction === "rtl" && (o += et(t.clientWidth, n.clientWidth) - s), {
    width: s,
    height: r,
    x: o,
    y: l
  };
}
function Er(i, t) {
  const e = j(i), n = yt(i), s = e.visualViewport;
  let r = n.clientWidth, o = n.clientHeight, l = 0, a = 0;
  if (s) {
    r = s.width, o = s.height;
    const c = _i();
    (!c || c && t === "fixed") && (l = s.offsetLeft, a = s.offsetTop);
  }
  return {
    width: r,
    height: o,
    x: l,
    y: a
  };
}
function kr(i, t) {
  const e = ee(i, !0, t === "fixed"), n = e.top + i.clientTop, s = e.left + i.clientLeft, r = X(i) ? zt(i) : ut(1), o = i.clientWidth * r.x, l = i.clientHeight * r.y, a = s * r.x, c = n * r.y;
  return {
    width: o,
    height: l,
    x: a,
    y: c
  };
}
function ln(i, t, e) {
  let n;
  if (t === "viewport")
    n = Er(i, e);
  else if (t === "document")
    n = Sr(yt(i));
  else if (K(t))
    n = kr(t, e);
  else {
    const s = ts(i);
    n = {
      ...t,
      x: t.x - s.x,
      y: t.y - s.y
    };
  }
  return Mt(n);
}
function ns(i, t) {
  const e = jt(i);
  return e === t || !K(e) || Fe(e) ? !1 : H(e).position === "fixed" || ns(e, t);
}
function Pr(i, t) {
  const e = t.get(i);
  if (e)
    return e;
  let n = Xn(i, []).filter((l) => K(l) && ht(l) !== "body"), s = null;
  const r = H(i).position === "fixed";
  let o = r ? jt(i) : i;
  for (; K(o) && !Fe(o); ) {
    const l = H(o), a = yi(o);
    !a && l.position === "fixed" && (s = null), (r ? !a && !s : !a && l.position === "static" && !!s && ["absolute", "fixed"].includes(s.position) || he(o) && !a && ns(i, o)) ? n = n.filter((u) => u !== o) : s = l, o = jt(o);
  }
  return t.set(i, n), n;
}
function Or(i) {
  let {
    element: t,
    boundary: e,
    rootBoundary: n,
    strategy: s
  } = i;
  const o = [...e === "clippingAncestors" ? Pr(t, this._c) : [].concat(e), n], l = o[0], a = o.reduce((c, u) => {
    const h = ln(t, u, s);
    return c.top = et(h.top, c.top), c.right = Bt(h.right, c.right), c.bottom = Bt(h.bottom, c.bottom), c.left = et(h.left, c.left), c;
  }, ln(t, l, s));
  return {
    width: a.right - a.left,
    height: a.bottom - a.top,
    x: a.left,
    y: a.top
  };
}
function Tr(i) {
  const {
    width: t,
    height: e
  } = Jn(i);
  return {
    width: t,
    height: e
  };
}
function Ir(i, t, e) {
  const n = X(t), s = yt(t), r = e === "fixed", o = ee(i, !0, r, t);
  let l = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const a = ut(0);
  if (n || !n && !r)
    if ((ht(t) !== "body" || he(s)) && (l = Ne(t)), n) {
      const h = ee(t, !0, r, t);
      a.x = h.x + t.clientLeft, a.y = h.y + t.clientTop;
    } else
      s && (a.x = is(s));
  const c = o.left + l.scrollLeft - a.x, u = o.top + l.scrollTop - a.y;
  return {
    x: c,
    y: u,
    width: o.width,
    height: o.height
  };
}
function cn(i, t) {
  return !X(i) || H(i).position === "fixed" ? null : t ? t(i) : i.offsetParent;
}
function ss(i, t) {
  const e = j(i);
  if (!X(i) || es(i))
    return e;
  let n = cn(i, t);
  for (; n && dr(n) && H(n).position === "static"; )
    n = cn(n, t);
  return n && (ht(n) === "html" || ht(n) === "body" && H(n).position === "static" && !yi(n)) ? e : n || vr(i) || e;
}
const Lr = async function(i) {
  const t = this.getOffsetParent || ss, e = this.getDimensions;
  return {
    reference: Ir(i.reference, await t(i.floating), i.strategy),
    floating: {
      x: 0,
      y: 0,
      ...await e(i.floating)
    }
  };
};
function Rr(i) {
  return H(i).direction === "rtl";
}
const zr = {
  convertOffsetParentRelativeRectToViewportRelativeRect: Cr,
  getDocumentElement: yt,
  getClippingRect: Or,
  getOffsetParent: ss,
  getElementRects: Lr,
  getClientRects: Ar,
  getDimensions: Tr,
  getScale: zt,
  isElement: K,
  isRTL: Rr
}, rs = cr, os = sr, as = or, ls = (i, t, e) => {
  const n = /* @__PURE__ */ new Map(), s = {
    platform: zr,
    ...e
  }, r = {
    ...s.platform,
    _c: n
  };
  return nr(i, t, {
    ...s,
    platform: r
  });
};
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const xe = globalThis, wi = xe.ShadowRoot && (xe.ShadyCSS === void 0 || xe.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype, xi = Symbol(), un = /* @__PURE__ */ new WeakMap();
let cs = class {
  constructor(t, e, n) {
    if (this._$cssResult$ = !0, n !== xi)
      throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = t, this.t = e;
  }
  get styleSheet() {
    let t = this.o;
    const e = this.t;
    if (wi && t === void 0) {
      const n = e !== void 0 && e.length === 1;
      n && (t = un.get(e)), t === void 0 && ((this.o = t = new CSSStyleSheet()).replaceSync(this.cssText), n && un.set(e, t));
    }
    return t;
  }
  toString() {
    return this.cssText;
  }
};
const Br = (i) => new cs(typeof i == "string" ? i : i + "", void 0, xi), S = (i, ...t) => {
  const e = i.length === 1 ? i[0] : t.reduce((n, s, r) => n + ((o) => {
    if (o._$cssResult$ === !0)
      return o.cssText;
    if (typeof o == "number")
      return o;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + o + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(s) + i[r + 1], i[0]);
  return new cs(e, i, xi);
}, Mr = (i, t) => {
  if (wi)
    i.adoptedStyleSheets = t.map((e) => e instanceof CSSStyleSheet ? e : e.styleSheet);
  else
    for (const e of t) {
      const n = document.createElement("style"), s = xe.litNonce;
      s !== void 0 && n.setAttribute("nonce", s), n.textContent = e.cssText, i.appendChild(n);
    }
}, hn = wi ? (i) => i : (i) => i instanceof CSSStyleSheet ? ((t) => {
  let e = "";
  for (const n of t.cssRules)
    e += n.cssText;
  return Br(e);
})(i) : i;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const { is: jr, defineProperty: Hr, getOwnPropertyDescriptor: Dr, getOwnPropertyNames: Fr, getOwnPropertySymbols: Nr, getPrototypeOf: qr } = Object, ct = globalThis, dn = ct.trustedTypes, Vr = dn ? dn.emptyScript : "", Ke = ct.reactiveElementPolyfillSupport, Kt = (i, t) => i, Ee = { toAttribute(i, t) {
  switch (t) {
    case Boolean:
      i = i ? Vr : null;
      break;
    case Object:
    case Array:
      i = i == null ? i : JSON.stringify(i);
  }
  return i;
}, fromAttribute(i, t) {
  let e = i;
  switch (t) {
    case Boolean:
      e = i !== null;
      break;
    case Number:
      e = i === null ? null : Number(i);
      break;
    case Object:
    case Array:
      try {
        e = JSON.parse(i);
      } catch {
        e = null;
      }
  }
  return e;
} }, $i = (i, t) => !jr(i, t), pn = { attribute: !0, type: String, converter: Ee, reflect: !1, useDefault: !1, hasChanged: $i };
Symbol.metadata ?? (Symbol.metadata = Symbol("metadata")), ct.litPropertyMetadata ?? (ct.litPropertyMetadata = /* @__PURE__ */ new WeakMap());
let Rt = class extends HTMLElement {
  static addInitializer(t) {
    this._$Ei(), (this.l ?? (this.l = [])).push(t);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(t, e = pn) {
    if (e.state && (e.attribute = !1), this._$Ei(), this.prototype.hasOwnProperty(t) && ((e = Object.create(e)).wrapped = !0), this.elementProperties.set(t, e), !e.noAccessor) {
      const n = Symbol(), s = this.getPropertyDescriptor(t, n, e);
      s !== void 0 && Hr(this.prototype, t, s);
    }
  }
  static getPropertyDescriptor(t, e, n) {
    const { get: s, set: r } = Dr(this.prototype, t) ?? { get() {
      return this[e];
    }, set(o) {
      this[e] = o;
    } };
    return { get: s, set(o) {
      const l = s == null ? void 0 : s.call(this);
      r == null || r.call(this, o), this.requestUpdate(t, l, n);
    }, configurable: !0, enumerable: !0 };
  }
  static getPropertyOptions(t) {
    return this.elementProperties.get(t) ?? pn;
  }
  static _$Ei() {
    if (this.hasOwnProperty(Kt("elementProperties")))
      return;
    const t = qr(this);
    t.finalize(), t.l !== void 0 && (this.l = [...t.l]), this.elementProperties = new Map(t.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(Kt("finalized")))
      return;
    if (this.finalized = !0, this._$Ei(), this.hasOwnProperty(Kt("properties"))) {
      const e = this.properties, n = [...Fr(e), ...Nr(e)];
      for (const s of n)
        this.createProperty(s, e[s]);
    }
    const t = this[Symbol.metadata];
    if (t !== null) {
      const e = litPropertyMetadata.get(t);
      if (e !== void 0)
        for (const [n, s] of e)
          this.elementProperties.set(n, s);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [e, n] of this.elementProperties) {
      const s = this._$Eu(e, n);
      s !== void 0 && this._$Eh.set(s, e);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(t) {
    const e = [];
    if (Array.isArray(t)) {
      const n = new Set(t.flat(1 / 0).reverse());
      for (const s of n)
        e.unshift(hn(s));
    } else
      t !== void 0 && e.push(hn(t));
    return e;
  }
  static _$Eu(t, e) {
    const n = e.attribute;
    return n === !1 ? void 0 : typeof n == "string" ? n : typeof t == "string" ? t.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = !1, this.hasUpdated = !1, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    var t;
    this._$ES = new Promise((e) => this.enableUpdating = e), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), (t = this.constructor.l) == null || t.forEach((e) => e(this));
  }
  addController(t) {
    var e;
    (this._$EO ?? (this._$EO = /* @__PURE__ */ new Set())).add(t), this.renderRoot !== void 0 && this.isConnected && ((e = t.hostConnected) == null || e.call(t));
  }
  removeController(t) {
    var e;
    (e = this._$EO) == null || e.delete(t);
  }
  _$E_() {
    const t = /* @__PURE__ */ new Map(), e = this.constructor.elementProperties;
    for (const n of e.keys())
      this.hasOwnProperty(n) && (t.set(n, this[n]), delete this[n]);
    t.size > 0 && (this._$Ep = t);
  }
  createRenderRoot() {
    const t = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return Mr(t, this.constructor.elementStyles), t;
  }
  connectedCallback() {
    var t;
    this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this.enableUpdating(!0), (t = this._$EO) == null || t.forEach((e) => {
      var n;
      return (n = e.hostConnected) == null ? void 0 : n.call(e);
    });
  }
  enableUpdating(t) {
  }
  disconnectedCallback() {
    var t;
    (t = this._$EO) == null || t.forEach((e) => {
      var n;
      return (n = e.hostDisconnected) == null ? void 0 : n.call(e);
    });
  }
  attributeChangedCallback(t, e, n) {
    this._$AK(t, n);
  }
  _$ET(t, e) {
    var r;
    const n = this.constructor.elementProperties.get(t), s = this.constructor._$Eu(t, n);
    if (s !== void 0 && n.reflect === !0) {
      const o = (((r = n.converter) == null ? void 0 : r.toAttribute) !== void 0 ? n.converter : Ee).toAttribute(e, n.type);
      this._$Em = t, o == null ? this.removeAttribute(s) : this.setAttribute(s, o), this._$Em = null;
    }
  }
  _$AK(t, e) {
    var r, o;
    const n = this.constructor, s = n._$Eh.get(t);
    if (s !== void 0 && this._$Em !== s) {
      const l = n.getPropertyOptions(s), a = typeof l.converter == "function" ? { fromAttribute: l.converter } : ((r = l.converter) == null ? void 0 : r.fromAttribute) !== void 0 ? l.converter : Ee;
      this._$Em = s, this[s] = a.fromAttribute(e, l.type) ?? ((o = this._$Ej) == null ? void 0 : o.get(s)) ?? null, this._$Em = null;
    }
  }
  requestUpdate(t, e, n) {
    var s;
    if (t !== void 0) {
      const r = this.constructor, o = this[t];
      if (n ?? (n = r.getPropertyOptions(t)), !((n.hasChanged ?? $i)(o, e) || n.useDefault && n.reflect && o === ((s = this._$Ej) == null ? void 0 : s.get(t)) && !this.hasAttribute(r._$Eu(t, n))))
        return;
      this.C(t, e, n);
    }
    this.isUpdatePending === !1 && (this._$ES = this._$EP());
  }
  C(t, e, { useDefault: n, reflect: s, wrapped: r }, o) {
    n && !(this._$Ej ?? (this._$Ej = /* @__PURE__ */ new Map())).has(t) && (this._$Ej.set(t, o ?? e ?? this[t]), r !== !0 || o !== void 0) || (this._$AL.has(t) || (this.hasUpdated || n || (e = void 0), this._$AL.set(t, e)), s === !0 && this._$Em !== t && (this._$Eq ?? (this._$Eq = /* @__PURE__ */ new Set())).add(t));
  }
  async _$EP() {
    this.isUpdatePending = !0;
    try {
      await this._$ES;
    } catch (e) {
      Promise.reject(e);
    }
    const t = this.scheduleUpdate();
    return t != null && await t, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    var n;
    if (!this.isUpdatePending)
      return;
    if (!this.hasUpdated) {
      if (this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this._$Ep) {
        for (const [r, o] of this._$Ep)
          this[r] = o;
        this._$Ep = void 0;
      }
      const s = this.constructor.elementProperties;
      if (s.size > 0)
        for (const [r, o] of s) {
          const { wrapped: l } = o, a = this[r];
          l !== !0 || this._$AL.has(r) || a === void 0 || this.C(r, void 0, o, a);
        }
    }
    let t = !1;
    const e = this._$AL;
    try {
      t = this.shouldUpdate(e), t ? (this.willUpdate(e), (n = this._$EO) == null || n.forEach((s) => {
        var r;
        return (r = s.hostUpdate) == null ? void 0 : r.call(s);
      }), this.update(e)) : this._$EM();
    } catch (s) {
      throw t = !1, this._$EM(), s;
    }
    t && this._$AE(e);
  }
  willUpdate(t) {
  }
  _$AE(t) {
    var e;
    (e = this._$EO) == null || e.forEach((n) => {
      var s;
      return (s = n.hostUpdated) == null ? void 0 : s.call(n);
    }), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(t)), this.updated(t);
  }
  _$EM() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = !1;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$ES;
  }
  shouldUpdate(t) {
    return !0;
  }
  update(t) {
    this._$Eq && (this._$Eq = this._$Eq.forEach((e) => this._$ET(e, this[e]))), this._$EM();
  }
  updated(t) {
  }
  firstUpdated(t) {
  }
};
Rt.elementStyles = [], Rt.shadowRootOptions = { mode: "open" }, Rt[Kt("elementProperties")] = /* @__PURE__ */ new Map(), Rt[Kt("finalized")] = /* @__PURE__ */ new Map(), Ke == null || Ke({ ReactiveElement: Rt }), (ct.reactiveElementVersions ?? (ct.reactiveElementVersions = [])).push("2.1.0");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Xt = globalThis, ke = Xt.trustedTypes, fn = ke ? ke.createPolicy("lit-html", { createHTML: (i) => i }) : void 0, us = "$lit$", lt = `lit$${Math.random().toFixed(9).slice(2)}$`, hs = "?" + lt, Ur = `<${hs}>`, kt = document, ie = () => kt.createComment(""), ne = (i) => i === null || typeof i != "object" && typeof i != "function", Ci = Array.isArray, Wr = (i) => Ci(i) || typeof (i == null ? void 0 : i[Symbol.iterator]) == "function", Xe = `[ 	
\f\r]`, Gt = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g, mn = /-->/g, bn = />/g, $t = RegExp(`>|${Xe}(?:([^\\s"'>=/]+)(${Xe}*=${Xe}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g"), gn = /'/g, vn = /"/g, ds = /^(?:script|style|textarea|title)$/i, Yr = (i) => (t, ...e) => ({ _$litType$: i, strings: t, values: e }), m = Yr(1), Pt = Symbol.for("lit-noChange"), P = Symbol.for("lit-nothing"), yn = /* @__PURE__ */ new WeakMap(), Ct = kt.createTreeWalker(kt, 129);
function ps(i, t) {
  if (!Ci(i) || !i.hasOwnProperty("raw"))
    throw Error("invalid template strings array");
  return fn !== void 0 ? fn.createHTML(t) : t;
}
const Gr = (i, t) => {
  const e = i.length - 1, n = [];
  let s, r = t === 2 ? "<svg>" : t === 3 ? "<math>" : "", o = Gt;
  for (let l = 0; l < e; l++) {
    const a = i[l];
    let c, u, h = -1, p = 0;
    for (; p < a.length && (o.lastIndex = p, u = o.exec(a), u !== null); )
      p = o.lastIndex, o === Gt ? u[1] === "!--" ? o = mn : u[1] !== void 0 ? o = bn : u[2] !== void 0 ? (ds.test(u[2]) && (s = RegExp("</" + u[2], "g")), o = $t) : u[3] !== void 0 && (o = $t) : o === $t ? u[0] === ">" ? (o = s ?? Gt, h = -1) : u[1] === void 0 ? h = -2 : (h = o.lastIndex - u[2].length, c = u[1], o = u[3] === void 0 ? $t : u[3] === '"' ? vn : gn) : o === vn || o === gn ? o = $t : o === mn || o === bn ? o = Gt : (o = $t, s = void 0);
    const f = o === $t && i[l + 1].startsWith("/>") ? " " : "";
    r += o === Gt ? a + Ur : h >= 0 ? (n.push(c), a.slice(0, h) + us + a.slice(h) + lt + f) : a + lt + (h === -2 ? l : f);
  }
  return [ps(i, r + (i[e] || "<?>") + (t === 2 ? "</svg>" : t === 3 ? "</math>" : "")), n];
};
class se {
  constructor({ strings: t, _$litType$: e }, n) {
    let s;
    this.parts = [];
    let r = 0, o = 0;
    const l = t.length - 1, a = this.parts, [c, u] = Gr(t, e);
    if (this.el = se.createElement(c, n), Ct.currentNode = this.el.content, e === 2 || e === 3) {
      const h = this.el.content.firstChild;
      h.replaceWith(...h.childNodes);
    }
    for (; (s = Ct.nextNode()) !== null && a.length < l; ) {
      if (s.nodeType === 1) {
        if (s.hasAttributes())
          for (const h of s.getAttributeNames())
            if (h.endsWith(us)) {
              const p = u[o++], f = s.getAttribute(h).split(lt), g = /([.?@])?(.*)/.exec(p);
              a.push({ type: 1, index: r, name: g[2], strings: f, ctor: g[1] === "." ? Kr : g[1] === "?" ? Xr : g[1] === "@" ? Jr : qe }), s.removeAttribute(h);
            } else
              h.startsWith(lt) && (a.push({ type: 6, index: r }), s.removeAttribute(h));
        if (ds.test(s.tagName)) {
          const h = s.textContent.split(lt), p = h.length - 1;
          if (p > 0) {
            s.textContent = ke ? ke.emptyScript : "";
            for (let f = 0; f < p; f++)
              s.append(h[f], ie()), Ct.nextNode(), a.push({ type: 2, index: ++r });
            s.append(h[p], ie());
          }
        }
      } else if (s.nodeType === 8)
        if (s.data === hs)
          a.push({ type: 2, index: r });
        else {
          let h = -1;
          for (; (h = s.data.indexOf(lt, h + 1)) !== -1; )
            a.push({ type: 7, index: r }), h += lt.length - 1;
        }
      r++;
    }
  }
  static createElement(t, e) {
    const n = kt.createElement("template");
    return n.innerHTML = t, n;
  }
}
function Ht(i, t, e = i, n) {
  var o, l;
  if (t === Pt)
    return t;
  let s = n !== void 0 ? (o = e._$Co) == null ? void 0 : o[n] : e._$Cl;
  const r = ne(t) ? void 0 : t._$litDirective$;
  return (s == null ? void 0 : s.constructor) !== r && ((l = s == null ? void 0 : s._$AO) == null || l.call(s, !1), r === void 0 ? s = void 0 : (s = new r(i), s._$AT(i, e, n)), n !== void 0 ? (e._$Co ?? (e._$Co = []))[n] = s : e._$Cl = s), s !== void 0 && (t = Ht(i, s._$AS(i, t.values), s, n)), t;
}
class Qr {
  constructor(t, e) {
    this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = e;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(t) {
    const { el: { content: e }, parts: n } = this._$AD, s = ((t == null ? void 0 : t.creationScope) ?? kt).importNode(e, !0);
    Ct.currentNode = s;
    let r = Ct.nextNode(), o = 0, l = 0, a = n[0];
    for (; a !== void 0; ) {
      if (o === a.index) {
        let c;
        a.type === 2 ? c = new de(r, r.nextSibling, this, t) : a.type === 1 ? c = new a.ctor(r, a.name, a.strings, this, t) : a.type === 6 && (c = new Zr(r, this, t)), this._$AV.push(c), a = n[++l];
      }
      o !== (a == null ? void 0 : a.index) && (r = Ct.nextNode(), o++);
    }
    return Ct.currentNode = kt, s;
  }
  p(t) {
    let e = 0;
    for (const n of this._$AV)
      n !== void 0 && (n.strings !== void 0 ? (n._$AI(t, n, e), e += n.strings.length - 2) : n._$AI(t[e])), e++;
  }
}
class de {
  get _$AU() {
    var t;
    return ((t = this._$AM) == null ? void 0 : t._$AU) ?? this._$Cv;
  }
  constructor(t, e, n, s) {
    this.type = 2, this._$AH = P, this._$AN = void 0, this._$AA = t, this._$AB = e, this._$AM = n, this.options = s, this._$Cv = (s == null ? void 0 : s.isConnected) ?? !0;
  }
  get parentNode() {
    let t = this._$AA.parentNode;
    const e = this._$AM;
    return e !== void 0 && (t == null ? void 0 : t.nodeType) === 11 && (t = e.parentNode), t;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(t, e = this) {
    t = Ht(this, t, e), ne(t) ? t === P || t == null || t === "" ? (this._$AH !== P && this._$AR(), this._$AH = P) : t !== this._$AH && t !== Pt && this._(t) : t._$litType$ !== void 0 ? this.$(t) : t.nodeType !== void 0 ? this.T(t) : Wr(t) ? this.k(t) : this._(t);
  }
  O(t) {
    return this._$AA.parentNode.insertBefore(t, this._$AB);
  }
  T(t) {
    this._$AH !== t && (this._$AR(), this._$AH = this.O(t));
  }
  _(t) {
    this._$AH !== P && ne(this._$AH) ? this._$AA.nextSibling.data = t : this.T(kt.createTextNode(t)), this._$AH = t;
  }
  $(t) {
    var r;
    const { values: e, _$litType$: n } = t, s = typeof n == "number" ? this._$AC(t) : (n.el === void 0 && (n.el = se.createElement(ps(n.h, n.h[0]), this.options)), n);
    if (((r = this._$AH) == null ? void 0 : r._$AD) === s)
      this._$AH.p(e);
    else {
      const o = new Qr(s, this), l = o.u(this.options);
      o.p(e), this.T(l), this._$AH = o;
    }
  }
  _$AC(t) {
    let e = yn.get(t.strings);
    return e === void 0 && yn.set(t.strings, e = new se(t)), e;
  }
  k(t) {
    Ci(this._$AH) || (this._$AH = [], this._$AR());
    const e = this._$AH;
    let n, s = 0;
    for (const r of t)
      s === e.length ? e.push(n = new de(this.O(ie()), this.O(ie()), this, this.options)) : n = e[s], n._$AI(r), s++;
    s < e.length && (this._$AR(n && n._$AB.nextSibling, s), e.length = s);
  }
  _$AR(t = this._$AA.nextSibling, e) {
    var n;
    for ((n = this._$AP) == null ? void 0 : n.call(this, !1, !0, e); t && t !== this._$AB; ) {
      const s = t.nextSibling;
      t.remove(), t = s;
    }
  }
  setConnected(t) {
    var e;
    this._$AM === void 0 && (this._$Cv = t, (e = this._$AP) == null || e.call(this, t));
  }
}
class qe {
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  constructor(t, e, n, s, r) {
    this.type = 1, this._$AH = P, this._$AN = void 0, this.element = t, this.name = e, this._$AM = s, this.options = r, n.length > 2 || n[0] !== "" || n[1] !== "" ? (this._$AH = Array(n.length - 1).fill(new String()), this.strings = n) : this._$AH = P;
  }
  _$AI(t, e = this, n, s) {
    const r = this.strings;
    let o = !1;
    if (r === void 0)
      t = Ht(this, t, e, 0), o = !ne(t) || t !== this._$AH && t !== Pt, o && (this._$AH = t);
    else {
      const l = t;
      let a, c;
      for (t = r[0], a = 0; a < r.length - 1; a++)
        c = Ht(this, l[n + a], e, a), c === Pt && (c = this._$AH[a]), o || (o = !ne(c) || c !== this._$AH[a]), c === P ? t = P : t !== P && (t += (c ?? "") + r[a + 1]), this._$AH[a] = c;
    }
    o && !s && this.j(t);
  }
  j(t) {
    t === P ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t ?? "");
  }
}
class Kr extends qe {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(t) {
    this.element[this.name] = t === P ? void 0 : t;
  }
}
class Xr extends qe {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(t) {
    this.element.toggleAttribute(this.name, !!t && t !== P);
  }
}
class Jr extends qe {
  constructor(t, e, n, s, r) {
    super(t, e, n, s, r), this.type = 5;
  }
  _$AI(t, e = this) {
    if ((t = Ht(this, t, e, 0) ?? P) === Pt)
      return;
    const n = this._$AH, s = t === P && n !== P || t.capture !== n.capture || t.once !== n.once || t.passive !== n.passive, r = t !== P && (n === P || s);
    s && this.element.removeEventListener(this.name, this, n), r && this.element.addEventListener(this.name, this, t), this._$AH = t;
  }
  handleEvent(t) {
    var e;
    typeof this._$AH == "function" ? this._$AH.call(((e = this.options) == null ? void 0 : e.host) ?? this.element, t) : this._$AH.handleEvent(t);
  }
}
class Zr {
  constructor(t, e, n) {
    this.element = t, this.type = 6, this._$AN = void 0, this._$AM = e, this.options = n;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t) {
    Ht(this, t);
  }
}
const Je = Xt.litHtmlPolyfillSupport;
Je == null || Je(se, de), (Xt.litHtmlVersions ?? (Xt.litHtmlVersions = [])).push("3.3.0");
const Dt = (i, t, e) => {
  const n = (e == null ? void 0 : e.renderBefore) ?? t;
  let s = n._$litPart$;
  if (s === void 0) {
    const r = (e == null ? void 0 : e.renderBefore) ?? null;
    n._$litPart$ = s = new de(t.insertBefore(ie(), r), r, void 0, e ?? {});
  }
  return s._$AI(i), s;
};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const At = globalThis;
let C = class extends Rt {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
  }
  createRenderRoot() {
    var e;
    const t = super.createRenderRoot();
    return (e = this.renderOptions).renderBefore ?? (e.renderBefore = t.firstChild), t;
  }
  update(t) {
    const e = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this._$Do = Dt(e, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    var t;
    super.connectedCallback(), (t = this._$Do) == null || t.setConnected(!0);
  }
  disconnectedCallback() {
    var t;
    super.disconnectedCallback(), (t = this._$Do) == null || t.setConnected(!1);
  }
  render() {
    return Pt;
  }
};
var Fn;
C._$litElement$ = !0, C.finalized = !0, (Fn = At.litElementHydrateSupport) == null || Fn.call(At, { LitElement: C });
const Ze = At.litElementPolyfillSupport;
Ze == null || Ze({ LitElement: C });
(At.litElementVersions ?? (At.litElementVersions = [])).push("4.2.0");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const to = { attribute: !0, type: String, converter: Ee, reflect: !1, hasChanged: $i }, eo = (i = to, t, e) => {
  const { kind: n, metadata: s } = e;
  let r = globalThis.litPropertyMetadata.get(s);
  if (r === void 0 && globalThis.litPropertyMetadata.set(s, r = /* @__PURE__ */ new Map()), n === "setter" && ((i = Object.create(i)).wrapped = !0), r.set(e.name, i), n === "accessor") {
    const { name: o } = e;
    return { set(l) {
      const a = t.get.call(this);
      t.set.call(this, l), this.requestUpdate(o, a, i);
    }, init(l) {
      return l !== void 0 && this.C(o, void 0, i, l), l;
    } };
  }
  if (n === "setter") {
    const { name: o } = e;
    return function(l) {
      const a = this[o];
      t.call(this, l), this.requestUpdate(o, a, i);
    };
  }
  throw Error("Unsupported decorator location: " + n);
};
function d(i) {
  return (t, e) => typeof e == "object" ? eo(i, t, e) : ((n, s, r) => {
    const o = s.hasOwnProperty(r);
    return s.constructor.createProperty(r, n), o ? Object.getOwnPropertyDescriptor(s, r) : void 0;
  })(i, t, e);
}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function Ut(i) {
  return d({ ...i, state: !0, attribute: !1 });
}
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const io = (i) => i.strings === void 0;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const fs = { ATTRIBUTE: 1, CHILD: 2 }, ms = (i) => (...t) => ({ _$litDirective$: i, values: t });
let bs = class {
  constructor(t) {
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AT(t, e, n) {
    this._$Ct = t, this._$AM = e, this._$Ci = n;
  }
  _$AS(t, e) {
    return this.update(t, e);
  }
  update(t, e) {
    return this.render(...e);
  }
};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Jt = (i, t) => {
  var n;
  const e = i._$AN;
  if (e === void 0)
    return !1;
  for (const s of e)
    (n = s._$AO) == null || n.call(s, t, !1), Jt(s, t);
  return !0;
}, Pe = (i) => {
  let t, e;
  do {
    if ((t = i._$AM) === void 0)
      break;
    e = t._$AN, e.delete(i), i = t;
  } while ((e == null ? void 0 : e.size) === 0);
}, gs = (i) => {
  for (let t; t = i._$AM; i = t) {
    let e = t._$AN;
    if (e === void 0)
      t._$AN = e = /* @__PURE__ */ new Set();
    else if (e.has(i))
      break;
    e.add(i), ro(t);
  }
};
function no(i) {
  this._$AN !== void 0 ? (Pe(this), this._$AM = i, gs(this)) : this._$AM = i;
}
function so(i, t = !1, e = 0) {
  const n = this._$AH, s = this._$AN;
  if (s !== void 0 && s.size !== 0)
    if (t)
      if (Array.isArray(n))
        for (let r = e; r < n.length; r++)
          Jt(n[r], !1), Pe(n[r]);
      else
        n != null && (Jt(n, !1), Pe(n));
    else
      Jt(this, i);
}
const ro = (i) => {
  i.type == fs.CHILD && (i._$AP ?? (i._$AP = so), i._$AQ ?? (i._$AQ = no));
};
class oo extends bs {
  constructor() {
    super(...arguments), this._$AN = void 0;
  }
  _$AT(t, e, n) {
    super._$AT(t, e, n), gs(this), this.isConnected = t._$AU;
  }
  _$AO(t, e = !0) {
    var n, s;
    t !== this.isConnected && (this.isConnected = t, t ? (n = this.reconnected) == null || n.call(this) : (s = this.disconnected) == null || s.call(this)), e && (Jt(this, t), Pe(this));
  }
  setValue(t) {
    if (io(this._$Ct))
      this._$Ct._$AI(t, this);
    else {
      const e = [...this._$Ct._$AH];
      e[this._$Ci] = t, this._$Ct._$AI(e, this, 0);
    }
  }
  disconnected() {
  }
  reconnected() {
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Ft = () => new ao();
class ao {
}
const ti = /* @__PURE__ */ new WeakMap(), Nt = ms(class extends oo {
  render(i) {
    return P;
  }
  update(i, [t]) {
    var n;
    const e = t !== this.G;
    return e && this.G !== void 0 && this.rt(void 0), (e || this.lt !== this.ct) && (this.G = t, this.ht = (n = i.options) == null ? void 0 : n.host, this.rt(this.ct = i.element)), P;
  }
  rt(i) {
    if (this.isConnected || (i = void 0), typeof this.G == "function") {
      const t = this.ht ?? globalThis;
      let e = ti.get(t);
      e === void 0 && (e = /* @__PURE__ */ new WeakMap(), ti.set(t, e)), e.get(this.G) !== void 0 && this.G.call(this.ht, void 0), e.set(this.G, i), i !== void 0 && this.G.call(this.ht, i);
    } else
      this.G.value = i;
  }
  get lt() {
    var i, t;
    return typeof this.G == "function" ? (i = ti.get(this.ht ?? globalThis)) == null ? void 0 : i.get(this.G) : (t = this.G) == null ? void 0 : t.value;
  }
  disconnected() {
    this.lt === this.ct && this.rt(void 0);
  }
  reconnected() {
    this.rt(this.ct);
  }
});
/**
* (c) Iconify
*
* For the full copyright and license information, please view the license.txt
* files at https://github.com/iconify/iconify
*
* Licensed under MIT.
*
* @license MIT
* @version 2.0.0
*/
const vs = Object.freeze(
  {
    left: 0,
    top: 0,
    width: 16,
    height: 16
  }
), Oe = Object.freeze({
  rotate: 0,
  vFlip: !1,
  hFlip: !1
}), pe = Object.freeze({
  ...vs,
  ...Oe
}), oi = Object.freeze({
  ...pe,
  body: "",
  hidden: !1
}), lo = Object.freeze({
  width: null,
  height: null
}), ys = Object.freeze({
  // Dimensions
  ...lo,
  // Transformations
  ...Oe
});
function co(i, t = 0) {
  const e = i.replace(/^-?[0-9.]*/, "");
  function n(s) {
    for (; s < 0; )
      s += 4;
    return s % 4;
  }
  if (e === "") {
    const s = parseInt(i);
    return isNaN(s) ? 0 : n(s);
  } else if (e !== i) {
    let s = 0;
    switch (e) {
      case "%":
        s = 25;
        break;
      case "deg":
        s = 90;
    }
    if (s) {
      let r = parseFloat(i.slice(0, i.length - e.length));
      return isNaN(r) ? 0 : (r = r / s, r % 1 === 0 ? n(r) : 0);
    }
  }
  return t;
}
const uo = /[\s,]+/;
function ho(i, t) {
  t.split(uo).forEach((e) => {
    switch (e.trim()) {
      case "horizontal":
        i.hFlip = !0;
        break;
      case "vertical":
        i.vFlip = !0;
        break;
    }
  });
}
const _s = {
  ...ys,
  preserveAspectRatio: ""
};
function _n(i) {
  const t = {
    ..._s
  }, e = (n, s) => i.getAttribute(n) || s;
  return t.width = e("width", null), t.height = e("height", null), t.rotate = co(e("rotate", "")), ho(t, e("flip", "")), t.preserveAspectRatio = e("preserveAspectRatio", e("preserveaspectratio", "")), t;
}
function po(i, t) {
  for (const e in _s)
    if (i[e] !== t[e])
      return !0;
  return !1;
}
const Zt = /^[a-z0-9]+(-[a-z0-9]+)*$/, fe = (i, t, e, n = "") => {
  const s = i.split(":");
  if (i.slice(0, 1) === "@") {
    if (s.length < 2 || s.length > 3)
      return null;
    n = s.shift().slice(1);
  }
  if (s.length > 3 || !s.length)
    return null;
  if (s.length > 1) {
    const l = s.pop(), a = s.pop(), c = {
      // Allow provider without '@': "provider:prefix:name"
      provider: s.length > 0 ? s[0] : n,
      prefix: a,
      name: l
    };
    return t && !$e(c) ? null : c;
  }
  const r = s[0], o = r.split("-");
  if (o.length > 1) {
    const l = {
      provider: n,
      prefix: o.shift(),
      name: o.join("-")
    };
    return t && !$e(l) ? null : l;
  }
  if (e && n === "") {
    const l = {
      provider: n,
      prefix: "",
      name: r
    };
    return t && !$e(l, e) ? null : l;
  }
  return null;
}, $e = (i, t) => i ? !!((i.provider === "" || i.provider.match(Zt)) && (t && i.prefix === "" || i.prefix.match(Zt)) && i.name.match(Zt)) : !1;
function fo(i, t) {
  const e = {};
  !i.hFlip != !t.hFlip && (e.hFlip = !0), !i.vFlip != !t.vFlip && (e.vFlip = !0);
  const n = ((i.rotate || 0) + (t.rotate || 0)) % 4;
  return n && (e.rotate = n), e;
}
function wn(i, t) {
  const e = fo(i, t);
  for (const n in oi)
    n in Oe ? n in i && !(n in e) && (e[n] = Oe[n]) : n in t ? e[n] = t[n] : n in i && (e[n] = i[n]);
  return e;
}
function mo(i, t) {
  const e = i.icons, n = i.aliases || /* @__PURE__ */ Object.create(null), s = /* @__PURE__ */ Object.create(null);
  function r(o) {
    if (e[o])
      return s[o] = [];
    if (!(o in s)) {
      s[o] = null;
      const l = n[o] && n[o].parent, a = l && r(l);
      a && (s[o] = [l].concat(a));
    }
    return s[o];
  }
  return Object.keys(e).concat(Object.keys(n)).forEach(r), s;
}
function bo(i, t, e) {
  const n = i.icons, s = i.aliases || /* @__PURE__ */ Object.create(null);
  let r = {};
  function o(l) {
    r = wn(
      n[l] || s[l],
      r
    );
  }
  return o(t), e.forEach(o), wn(i, r);
}
function ws(i, t) {
  const e = [];
  if (typeof i != "object" || typeof i.icons != "object")
    return e;
  i.not_found instanceof Array && i.not_found.forEach((s) => {
    t(s, null), e.push(s);
  });
  const n = mo(i);
  for (const s in n) {
    const r = n[s];
    r && (t(s, bo(i, s, r)), e.push(s));
  }
  return e;
}
const go = {
  provider: "",
  aliases: {},
  not_found: {},
  ...vs
};
function ei(i, t) {
  for (const e in t)
    if (e in i && typeof i[e] != typeof t[e])
      return !1;
  return !0;
}
function xs(i) {
  if (typeof i != "object" || i === null)
    return null;
  const t = i;
  if (typeof t.prefix != "string" || !i.icons || typeof i.icons != "object" || !ei(i, go))
    return null;
  const e = t.icons;
  for (const s in e) {
    const r = e[s];
    if (!s.match(Zt) || typeof r.body != "string" || !ei(
      r,
      oi
    ))
      return null;
  }
  const n = t.aliases || /* @__PURE__ */ Object.create(null);
  for (const s in n) {
    const r = n[s], o = r.parent;
    if (!s.match(Zt) || typeof o != "string" || !e[o] && !n[o] || !ei(
      r,
      oi
    ))
      return null;
  }
  return t;
}
const Te = /* @__PURE__ */ Object.create(null);
function vo(i, t) {
  return {
    provider: i,
    prefix: t,
    icons: /* @__PURE__ */ Object.create(null),
    missing: /* @__PURE__ */ new Set()
  };
}
function dt(i, t) {
  const e = Te[i] || (Te[i] = /* @__PURE__ */ Object.create(null));
  return e[t] || (e[t] = vo(i, t));
}
function Ai(i, t) {
  return xs(t) ? ws(t, (e, n) => {
    n ? i.icons[e] = n : i.missing.add(e);
  }) : [];
}
function yo(i, t, e) {
  try {
    if (typeof e.body == "string")
      return i.icons[t] = { ...e }, !0;
  } catch {
  }
  return !1;
}
function _o(i, t) {
  let e = [];
  return (typeof i == "string" ? [i] : Object.keys(Te)).forEach((s) => {
    (typeof s == "string" && typeof t == "string" ? [t] : Object.keys(Te[s] || {})).forEach((o) => {
      const l = dt(s, o);
      e = e.concat(
        Object.keys(l.icons).map(
          (a) => (s !== "" ? "@" + s + ":" : "") + o + ":" + a
        )
      );
    });
  }), e;
}
let re = !1;
function $s(i) {
  return typeof i == "boolean" && (re = i), re;
}
function oe(i) {
  const t = typeof i == "string" ? fe(i, !0, re) : i;
  if (t) {
    const e = dt(t.provider, t.prefix), n = t.name;
    return e.icons[n] || (e.missing.has(n) ? null : void 0);
  }
}
function Cs(i, t) {
  const e = fe(i, !0, re);
  if (!e)
    return !1;
  const n = dt(e.provider, e.prefix);
  return yo(n, e.name, t);
}
function xn(i, t) {
  if (typeof i != "object")
    return !1;
  if (typeof t != "string" && (t = i.provider || ""), re && !t && !i.prefix) {
    let s = !1;
    return xs(i) && (i.prefix = "", ws(i, (r, o) => {
      o && Cs(r, o) && (s = !0);
    })), s;
  }
  const e = i.prefix;
  if (!$e({
    provider: t,
    prefix: e,
    name: "a"
  }))
    return !1;
  const n = dt(t, e);
  return !!Ai(n, i);
}
function $n(i) {
  return !!oe(i);
}
function wo(i) {
  const t = oe(i);
  return t ? {
    ...pe,
    ...t
  } : null;
}
function xo(i) {
  const t = {
    loaded: [],
    missing: [],
    pending: []
  }, e = /* @__PURE__ */ Object.create(null);
  i.sort((s, r) => s.provider !== r.provider ? s.provider.localeCompare(r.provider) : s.prefix !== r.prefix ? s.prefix.localeCompare(r.prefix) : s.name.localeCompare(r.name));
  let n = {
    provider: "",
    prefix: "",
    name: ""
  };
  return i.forEach((s) => {
    if (n.name === s.name && n.prefix === s.prefix && n.provider === s.provider)
      return;
    n = s;
    const r = s.provider, o = s.prefix, l = s.name, a = e[r] || (e[r] = /* @__PURE__ */ Object.create(null)), c = a[o] || (a[o] = dt(r, o));
    let u;
    l in c.icons ? u = t.loaded : o === "" || c.missing.has(l) ? u = t.missing : u = t.pending;
    const h = {
      provider: r,
      prefix: o,
      name: l
    };
    u.push(h);
  }), t;
}
function As(i, t) {
  i.forEach((e) => {
    const n = e.loaderCallbacks;
    n && (e.loaderCallbacks = n.filter((s) => s.id !== t));
  });
}
function $o(i) {
  i.pendingCallbacksFlag || (i.pendingCallbacksFlag = !0, setTimeout(() => {
    i.pendingCallbacksFlag = !1;
    const t = i.loaderCallbacks ? i.loaderCallbacks.slice(0) : [];
    if (!t.length)
      return;
    let e = !1;
    const n = i.provider, s = i.prefix;
    t.forEach((r) => {
      const o = r.icons, l = o.pending.length;
      o.pending = o.pending.filter((a) => {
        if (a.prefix !== s)
          return !0;
        const c = a.name;
        if (i.icons[c])
          o.loaded.push({
            provider: n,
            prefix: s,
            name: c
          });
        else if (i.missing.has(c))
          o.missing.push({
            provider: n,
            prefix: s,
            name: c
          });
        else
          return e = !0, !0;
        return !1;
      }), o.pending.length !== l && (e || As([i], r.id), r.callback(
        o.loaded.slice(0),
        o.missing.slice(0),
        o.pending.slice(0),
        r.abort
      ));
    });
  }));
}
let Co = 0;
function Ao(i, t, e) {
  const n = Co++, s = As.bind(null, e, n);
  if (!t.pending.length)
    return s;
  const r = {
    id: n,
    icons: t,
    callback: i,
    abort: s
  };
  return e.forEach((o) => {
    (o.loaderCallbacks || (o.loaderCallbacks = [])).push(r);
  }), s;
}
const ai = /* @__PURE__ */ Object.create(null);
function Cn(i, t) {
  ai[i] = t;
}
function li(i) {
  return ai[i] || ai[""];
}
function So(i, t = !0, e = !1) {
  const n = [];
  return i.forEach((s) => {
    const r = typeof s == "string" ? fe(s, t, e) : s;
    r && n.push(r);
  }), n;
}
var Eo = {
  resources: [],
  index: 0,
  timeout: 2e3,
  rotate: 750,
  random: !1,
  dataAfterTimeout: !1
};
function ko(i, t, e, n) {
  const s = i.resources.length, r = i.random ? Math.floor(Math.random() * s) : i.index;
  let o;
  if (i.random) {
    let x = i.resources.slice(0);
    for (o = []; x.length > 1; ) {
      const I = Math.floor(Math.random() * x.length);
      o.push(x[I]), x = x.slice(0, I).concat(x.slice(I + 1));
    }
    o = o.concat(x);
  } else
    o = i.resources.slice(r).concat(i.resources.slice(0, r));
  const l = Date.now();
  let a = "pending", c = 0, u, h = null, p = [], f = [];
  typeof n == "function" && f.push(n);
  function g() {
    h && (clearTimeout(h), h = null);
  }
  function v() {
    a === "pending" && (a = "aborted"), g(), p.forEach((x) => {
      x.status === "pending" && (x.status = "aborted");
    }), p = [];
  }
  function b(x, I) {
    I && (f = []), typeof x == "function" && f.push(x);
  }
  function $() {
    return {
      startTime: l,
      payload: t,
      status: a,
      queriesSent: c,
      queriesPending: p.length,
      subscribe: b,
      abort: v
    };
  }
  function y() {
    a = "failed", f.forEach((x) => {
      x(void 0, u);
    });
  }
  function w() {
    p.forEach((x) => {
      x.status === "pending" && (x.status = "aborted");
    }), p = [];
  }
  function A(x, I, V) {
    const U = I !== "success";
    switch (p = p.filter((E) => E !== x), a) {
      case "pending":
        break;
      case "failed":
        if (U || !i.dataAfterTimeout)
          return;
        break;
      default:
        return;
    }
    if (I === "abort") {
      u = V, y();
      return;
    }
    if (U) {
      u = V, p.length || (o.length ? k() : y());
      return;
    }
    if (g(), w(), !i.random) {
      const E = i.resources.indexOf(x.resource);
      E !== -1 && E !== i.index && (i.index = E);
    }
    a = "completed", f.forEach((E) => {
      E(V);
    });
  }
  function k() {
    if (a !== "pending")
      return;
    g();
    const x = o.shift();
    if (x === void 0) {
      if (p.length) {
        h = setTimeout(() => {
          g(), a === "pending" && (w(), y());
        }, i.timeout);
        return;
      }
      y();
      return;
    }
    const I = {
      status: "pending",
      resource: x,
      callback: (V, U) => {
        A(I, V, U);
      }
    };
    p.push(I), c++, h = setTimeout(k, i.rotate), e(x, t, I.callback);
  }
  return setTimeout(k), $;
}
function Ss(i) {
  const t = {
    ...Eo,
    ...i
  };
  let e = [];
  function n() {
    e = e.filter((l) => l().status === "pending");
  }
  function s(l, a, c) {
    const u = ko(
      t,
      l,
      a,
      (h, p) => {
        n(), c && c(h, p);
      }
    );
    return e.push(u), u;
  }
  function r(l) {
    return e.find((a) => l(a)) || null;
  }
  return {
    query: s,
    find: r,
    setIndex: (l) => {
      t.index = l;
    },
    getIndex: () => t.index,
    cleanup: n
  };
}
function Si(i) {
  let t;
  if (typeof i.resources == "string")
    t = [i.resources];
  else if (t = i.resources, !(t instanceof Array) || !t.length)
    return null;
  return {
    // API hosts
    resources: t,
    // Root path
    path: i.path || "/",
    // URL length limit
    maxURL: i.maxURL || 500,
    // Timeout before next host is used.
    rotate: i.rotate || 750,
    // Timeout before failing query.
    timeout: i.timeout || 5e3,
    // Randomise default API end point.
    random: i.random === !0,
    // Start index
    index: i.index || 0,
    // Receive data after time out (used if time out kicks in first, then API module sends data anyway).
    dataAfterTimeout: i.dataAfterTimeout !== !1
  };
}
const Ve = /* @__PURE__ */ Object.create(null), Qt = [
  "https://api.simplesvg.com",
  "https://api.unisvg.com"
], Ce = [];
for (; Qt.length > 0; )
  Qt.length === 1 || Math.random() > 0.5 ? Ce.push(Qt.shift()) : Ce.push(Qt.pop());
Ve[""] = Si({
  resources: ["https://api.iconify.design"].concat(Ce)
});
function An(i, t) {
  const e = Si(t);
  return e === null ? !1 : (Ve[i] = e, !0);
}
function Ue(i) {
  return Ve[i];
}
function Po() {
  return Object.keys(Ve);
}
function Sn() {
}
const ii = /* @__PURE__ */ Object.create(null);
function Oo(i) {
  if (!ii[i]) {
    const t = Ue(i);
    if (!t)
      return;
    const e = Ss(t), n = {
      config: t,
      redundancy: e
    };
    ii[i] = n;
  }
  return ii[i];
}
function Es(i, t, e) {
  let n, s;
  if (typeof i == "string") {
    const r = li(i);
    if (!r)
      return e(void 0, 424), Sn;
    s = r.send;
    const o = Oo(i);
    o && (n = o.redundancy);
  } else {
    const r = Si(i);
    if (r) {
      n = Ss(r);
      const o = i.resources ? i.resources[0] : "", l = li(o);
      l && (s = l.send);
    }
  }
  return !n || !s ? (e(void 0, 424), Sn) : n.query(t, s, e)().abort;
}
const En = "iconify2", ae = "iconify", ks = ae + "-count", kn = ae + "-version", Ps = 36e5, To = 168, Io = 50;
function ci(i, t) {
  try {
    return i.getItem(t);
  } catch {
  }
}
function Ei(i, t, e) {
  try {
    return i.setItem(t, e), !0;
  } catch {
  }
}
function Pn(i, t) {
  try {
    i.removeItem(t);
  } catch {
  }
}
function ui(i, t) {
  return Ei(i, ks, t.toString());
}
function hi(i) {
  return parseInt(ci(i, ks)) || 0;
}
const St = {
  local: !0,
  session: !0
}, Os = {
  local: /* @__PURE__ */ new Set(),
  session: /* @__PURE__ */ new Set()
};
let ki = !1;
function Lo(i) {
  ki = i;
}
let we = typeof window > "u" ? {} : window;
function Ts(i) {
  const t = i + "Storage";
  try {
    if (we && we[t] && typeof we[t].length == "number")
      return we[t];
  } catch {
  }
  St[i] = !1;
}
function Is(i, t) {
  const e = Ts(i);
  if (!e)
    return;
  const n = ci(e, kn);
  if (n !== En) {
    if (n) {
      const l = hi(e);
      for (let a = 0; a < l; a++)
        Pn(e, ae + a.toString());
    }
    Ei(e, kn, En), ui(e, 0);
    return;
  }
  const s = Math.floor(Date.now() / Ps) - To, r = (l) => {
    const a = ae + l.toString(), c = ci(e, a);
    if (typeof c == "string") {
      try {
        const u = JSON.parse(c);
        if (typeof u == "object" && typeof u.cached == "number" && u.cached > s && typeof u.provider == "string" && typeof u.data == "object" && typeof u.data.prefix == "string" && // Valid item: run callback
        t(u, l))
          return !0;
      } catch {
      }
      Pn(e, a);
    }
  };
  let o = hi(e);
  for (let l = o - 1; l >= 0; l--)
    r(l) || (l === o - 1 ? (o--, ui(e, o)) : Os[i].add(l));
}
function Ls() {
  if (!ki) {
    Lo(!0);
    for (const i in St)
      Is(i, (t) => {
        const e = t.data, n = t.provider, s = e.prefix, r = dt(
          n,
          s
        );
        if (!Ai(r, e).length)
          return !1;
        const o = e.lastModified || -1;
        return r.lastModifiedCached = r.lastModifiedCached ? Math.min(r.lastModifiedCached, o) : o, !0;
      });
  }
}
function Ro(i, t) {
  const e = i.lastModifiedCached;
  if (
    // Matches or newer
    e && e >= t
  )
    return e === t;
  if (i.lastModifiedCached = t, e)
    for (const n in St)
      Is(n, (s) => {
        const r = s.data;
        return s.provider !== i.provider || r.prefix !== i.prefix || r.lastModified === t;
      });
  return !0;
}
function zo(i, t) {
  ki || Ls();
  function e(n) {
    let s;
    if (!St[n] || !(s = Ts(n)))
      return;
    const r = Os[n];
    let o;
    if (r.size)
      r.delete(o = Array.from(r).shift());
    else if (o = hi(s), o >= Io || !ui(s, o + 1))
      return;
    const l = {
      cached: Math.floor(Date.now() / Ps),
      provider: i.provider,
      data: t
    };
    return Ei(
      s,
      ae + o.toString(),
      JSON.stringify(l)
    );
  }
  t.lastModified && !Ro(i, t.lastModified) || Object.keys(t.icons).length && (t.not_found && (t = Object.assign({}, t), delete t.not_found), e("local") || e("session"));
}
function On() {
}
function Bo(i) {
  i.iconsLoaderFlag || (i.iconsLoaderFlag = !0, setTimeout(() => {
    i.iconsLoaderFlag = !1, $o(i);
  }));
}
function Mo(i, t) {
  i.iconsToLoad ? i.iconsToLoad = i.iconsToLoad.concat(t).sort() : i.iconsToLoad = t, i.iconsQueueFlag || (i.iconsQueueFlag = !0, setTimeout(() => {
    i.iconsQueueFlag = !1;
    const { provider: e, prefix: n } = i, s = i.iconsToLoad;
    delete i.iconsToLoad;
    let r;
    if (!s || !(r = li(e)))
      return;
    r.prepare(e, n, s).forEach((l) => {
      Es(e, l, (a) => {
        if (typeof a != "object")
          l.icons.forEach((c) => {
            i.missing.add(c);
          });
        else
          try {
            const c = Ai(
              i,
              a
            );
            if (!c.length)
              return;
            const u = i.pendingIcons;
            u && c.forEach((h) => {
              u.delete(h);
            }), zo(i, a);
          } catch (c) {
            console.error(c);
          }
        Bo(i);
      });
    });
  }));
}
const Pi = (i, t) => {
  const e = So(i, !0, $s()), n = xo(e);
  if (!n.pending.length) {
    let a = !0;
    return t && setTimeout(() => {
      a && t(
        n.loaded,
        n.missing,
        n.pending,
        On
      );
    }), () => {
      a = !1;
    };
  }
  const s = /* @__PURE__ */ Object.create(null), r = [];
  let o, l;
  return n.pending.forEach((a) => {
    const { provider: c, prefix: u } = a;
    if (u === l && c === o)
      return;
    o = c, l = u, r.push(dt(c, u));
    const h = s[c] || (s[c] = /* @__PURE__ */ Object.create(null));
    h[u] || (h[u] = []);
  }), n.pending.forEach((a) => {
    const { provider: c, prefix: u, name: h } = a, p = dt(c, u), f = p.pendingIcons || (p.pendingIcons = /* @__PURE__ */ new Set());
    f.has(h) || (f.add(h), s[c][u].push(h));
  }), r.forEach((a) => {
    const { provider: c, prefix: u } = a;
    s[c][u].length && Mo(a, s[c][u]);
  }), t ? Ao(t, n, r) : On;
}, jo = (i) => new Promise((t, e) => {
  const n = typeof i == "string" ? fe(i, !0) : i;
  if (!n) {
    e(i);
    return;
  }
  Pi([n || i], (s) => {
    if (s.length && n) {
      const r = oe(n);
      if (r) {
        t({
          ...pe,
          ...r
        });
        return;
      }
    }
    e(i);
  });
});
function Ho(i) {
  try {
    const t = typeof i == "string" ? JSON.parse(i) : i;
    if (typeof t.body == "string")
      return {
        ...t
      };
  } catch {
  }
}
function Do(i, t) {
  const e = typeof i == "string" ? fe(i, !0, !0) : null;
  if (!e) {
    const r = Ho(i);
    return {
      value: i,
      data: r
    };
  }
  const n = oe(e);
  if (n !== void 0 || !e.prefix)
    return {
      value: i,
      name: e,
      data: n
      // could be 'null' -> icon is missing
    };
  const s = Pi([e], () => t(i, e, oe(e)));
  return {
    value: i,
    name: e,
    loading: s
  };
}
function ni(i) {
  return i.hasAttribute("inline");
}
let Rs = !1;
try {
  Rs = navigator.vendor.indexOf("Apple") === 0;
} catch {
}
function Fo(i, t) {
  switch (t) {
    case "svg":
    case "bg":
    case "mask":
      return t;
  }
  return t !== "style" && (Rs || i.indexOf("<a") === -1) ? "svg" : i.indexOf("currentColor") === -1 ? "bg" : "mask";
}
const No = /(-?[0-9.]*[0-9]+[0-9.]*)/g, qo = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function di(i, t, e) {
  if (t === 1)
    return i;
  if (e = e || 100, typeof i == "number")
    return Math.ceil(i * t * e) / e;
  if (typeof i != "string")
    return i;
  const n = i.split(No);
  if (n === null || !n.length)
    return i;
  const s = [];
  let r = n.shift(), o = qo.test(r);
  for (; ; ) {
    if (o) {
      const l = parseFloat(r);
      isNaN(l) ? s.push(r) : s.push(Math.ceil(l * t * e) / e);
    } else
      s.push(r);
    if (r = n.shift(), r === void 0)
      return s.join("");
    o = !o;
  }
}
function Vo(i, t = "defs") {
  let e = "";
  const n = i.indexOf("<" + t);
  for (; n >= 0; ) {
    const s = i.indexOf(">", n), r = i.indexOf("</" + t);
    if (s === -1 || r === -1)
      break;
    const o = i.indexOf(">", r);
    if (o === -1)
      break;
    e += i.slice(s + 1, r).trim(), i = i.slice(0, n).trim() + i.slice(o + 1);
  }
  return {
    defs: e,
    content: i
  };
}
function Uo(i, t) {
  return i ? "<defs>" + i + "</defs>" + t : t;
}
function Wo(i, t, e) {
  const n = Vo(i);
  return Uo(n.defs, t + n.content + e);
}
const Yo = (i) => i === "unset" || i === "undefined" || i === "none";
function zs(i, t) {
  const e = {
    ...pe,
    ...i
  }, n = {
    ...ys,
    ...t
  }, s = {
    left: e.left,
    top: e.top,
    width: e.width,
    height: e.height
  };
  let r = e.body;
  [e, n].forEach((v) => {
    const b = [], $ = v.hFlip, y = v.vFlip;
    let w = v.rotate;
    $ ? y ? w += 2 : (b.push(
      "translate(" + (s.width + s.left).toString() + " " + (0 - s.top).toString() + ")"
    ), b.push("scale(-1 1)"), s.top = s.left = 0) : y && (b.push(
      "translate(" + (0 - s.left).toString() + " " + (s.height + s.top).toString() + ")"
    ), b.push("scale(1 -1)"), s.top = s.left = 0);
    let A;
    switch (w < 0 && (w -= Math.floor(w / 4) * 4), w = w % 4, w) {
      case 1:
        A = s.height / 2 + s.top, b.unshift(
          "rotate(90 " + A.toString() + " " + A.toString() + ")"
        );
        break;
      case 2:
        b.unshift(
          "rotate(180 " + (s.width / 2 + s.left).toString() + " " + (s.height / 2 + s.top).toString() + ")"
        );
        break;
      case 3:
        A = s.width / 2 + s.left, b.unshift(
          "rotate(-90 " + A.toString() + " " + A.toString() + ")"
        );
        break;
    }
    w % 2 === 1 && (s.left !== s.top && (A = s.left, s.left = s.top, s.top = A), s.width !== s.height && (A = s.width, s.width = s.height, s.height = A)), b.length && (r = Wo(
      r,
      '<g transform="' + b.join(" ") + '">',
      "</g>"
    ));
  });
  const o = n.width, l = n.height, a = s.width, c = s.height;
  let u, h;
  o === null ? (h = l === null ? "1em" : l === "auto" ? c : l, u = di(h, a / c)) : (u = o === "auto" ? a : o, h = l === null ? di(u, c / a) : l === "auto" ? c : l);
  const p = {}, f = (v, b) => {
    Yo(b) || (p[v] = b.toString());
  };
  f("width", u), f("height", h);
  const g = [s.left, s.top, a, c];
  return p.viewBox = g.join(" "), {
    attributes: p,
    viewBox: g,
    body: r
  };
}
function Oi(i, t) {
  let e = i.indexOf("xlink:") === -1 ? "" : ' xmlns:xlink="http://www.w3.org/1999/xlink"';
  for (const n in t)
    e += " " + n + '="' + t[n] + '"';
  return '<svg xmlns="http://www.w3.org/2000/svg"' + e + ">" + i + "</svg>";
}
function Go(i) {
  return i.replace(/"/g, "'").replace(/%/g, "%25").replace(/#/g, "%23").replace(/</g, "%3C").replace(/>/g, "%3E").replace(/\s+/g, " ");
}
function Qo(i) {
  return "data:image/svg+xml," + Go(i);
}
function Bs(i) {
  return 'url("' + Qo(i) + '")';
}
const Ko = () => {
  let i;
  try {
    if (i = fetch, typeof i == "function")
      return i;
  } catch {
  }
};
let Ie = Ko();
function Xo(i) {
  Ie = i;
}
function Jo() {
  return Ie;
}
function Zo(i, t) {
  const e = Ue(i);
  if (!e)
    return 0;
  let n;
  if (!e.maxURL)
    n = 0;
  else {
    let s = 0;
    e.resources.forEach((o) => {
      s = Math.max(s, o.length);
    });
    const r = t + ".json?icons=";
    n = e.maxURL - s - e.path.length - r.length;
  }
  return n;
}
function ta(i) {
  return i === 404;
}
const ea = (i, t, e) => {
  const n = [], s = Zo(i, t), r = "icons";
  let o = {
    type: r,
    provider: i,
    prefix: t,
    icons: []
  }, l = 0;
  return e.forEach((a, c) => {
    l += a.length + 1, l >= s && c > 0 && (n.push(o), o = {
      type: r,
      provider: i,
      prefix: t,
      icons: []
    }, l = a.length), o.icons.push(a);
  }), n.push(o), n;
};
function ia(i) {
  if (typeof i == "string") {
    const t = Ue(i);
    if (t)
      return t.path;
  }
  return "/";
}
const na = (i, t, e) => {
  if (!Ie) {
    e("abort", 424);
    return;
  }
  let n = ia(t.provider);
  switch (t.type) {
    case "icons": {
      const r = t.prefix, l = t.icons.join(","), a = new URLSearchParams({
        icons: l
      });
      n += r + ".json?" + a.toString();
      break;
    }
    case "custom": {
      const r = t.uri;
      n += r.slice(0, 1) === "/" ? r.slice(1) : r;
      break;
    }
    default:
      e("abort", 400);
      return;
  }
  let s = 503;
  Ie(i + n).then((r) => {
    const o = r.status;
    if (o !== 200) {
      setTimeout(() => {
        e(ta(o) ? "abort" : "next", o);
      });
      return;
    }
    return s = 501, r.json();
  }).then((r) => {
    if (typeof r != "object" || r === null) {
      setTimeout(() => {
        r === 404 ? e("abort", r) : e("next", s);
      });
      return;
    }
    setTimeout(() => {
      e("success", r);
    });
  }).catch(() => {
    e("next", s);
  });
}, sa = {
  prepare: ea,
  send: na
};
function Tn(i, t) {
  switch (i) {
    case "local":
    case "session":
      St[i] = t;
      break;
    case "all":
      for (const e in St)
        St[e] = t;
      break;
  }
}
const si = "data-style";
let Ms = "";
function ra(i) {
  Ms = i;
}
function In(i, t) {
  let e = Array.from(i.childNodes).find((n) => n.hasAttribute && n.hasAttribute(si));
  e || (e = document.createElement("style"), e.setAttribute(si, si), i.appendChild(e)), e.textContent = ":host{display:inline-block;vertical-align:" + (t ? "-0.125em" : "0") + "}span,svg{display:block}" + Ms;
}
function js() {
  Cn("", sa), $s(!0);
  let i;
  try {
    i = window;
  } catch {
  }
  if (i) {
    if (Ls(), i.IconifyPreload !== void 0) {
      const e = i.IconifyPreload, n = "Invalid IconifyPreload syntax.";
      typeof e == "object" && e !== null && (e instanceof Array ? e : [e]).forEach((s) => {
        try {
          // Check if item is an object and not null/array
          (typeof s != "object" || s === null || s instanceof Array || // Check for 'icons' and 'prefix'
          typeof s.icons != "object" || typeof s.prefix != "string" || // Add icon set
          !xn(s)) && console.error(n);
        } catch {
          console.error(n);
        }
      });
    }
    if (i.IconifyProviders !== void 0) {
      const e = i.IconifyProviders;
      if (typeof e == "object" && e !== null)
        for (const n in e) {
          const s = "IconifyProviders[" + n + "] is invalid.";
          try {
            const r = e[n];
            if (typeof r != "object" || !r || r.resources === void 0)
              continue;
            An(n, r) || console.error(s);
          } catch {
            console.error(s);
          }
        }
    }
  }
  return {
    enableCache: (e) => Tn(e, !0),
    disableCache: (e) => Tn(e, !1),
    iconLoaded: $n,
    iconExists: $n,
    getIcon: wo,
    listIcons: _o,
    addIcon: Cs,
    addCollection: xn,
    calculateSize: di,
    buildIcon: zs,
    iconToHTML: Oi,
    svgToURL: Bs,
    loadIcons: Pi,
    loadIcon: jo,
    addAPIProvider: An,
    appendCustomStyle: ra,
    _api: {
      getAPIConfig: Ue,
      setAPIModule: Cn,
      sendAPIQuery: Es,
      setFetch: Xo,
      getFetch: Jo,
      listAPIProviders: Po
    }
  };
}
const pi = {
  "background-color": "currentColor"
}, Hs = {
  "background-color": "transparent"
}, Ln = {
  image: "var(--svg)",
  repeat: "no-repeat",
  size: "100% 100%"
}, Rn = {
  "-webkit-mask": pi,
  mask: pi,
  background: Hs
};
for (const i in Rn) {
  const t = Rn[i];
  for (const e in Ln)
    t[i + "-" + e] = Ln[e];
}
function zn(i) {
  return i ? i + (i.match(/^[-0-9.]+$/) ? "px" : "") : "inherit";
}
function oa(i, t, e) {
  const n = document.createElement("span");
  let s = i.body;
  s.indexOf("<a") !== -1 && (s += "<!-- " + Date.now() + " -->");
  const r = i.attributes, o = Oi(s, {
    ...r,
    width: t.width + "",
    height: t.height + ""
  }), l = Bs(o), a = n.style, c = {
    "--svg": l,
    width: zn(r.width),
    height: zn(r.height),
    ...e ? pi : Hs
  };
  for (const u in c)
    a.setProperty(u, c[u]);
  return n;
}
let te;
function aa() {
  try {
    te = window.trustedTypes.createPolicy("iconify", {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      createHTML: (i) => i
    });
  } catch {
    te = null;
  }
}
function la(i) {
  return te === void 0 && aa(), te ? te.createHTML(i) : i;
}
function ca(i) {
  const t = document.createElement("span"), e = i.attributes;
  let n = "";
  e.width || (n = "width: inherit;"), e.height || (n += "height: inherit;"), n && (e.style = n);
  const s = Oi(i.body, e);
  return t.innerHTML = la(s), t.firstChild;
}
function fi(i) {
  return Array.from(i.childNodes).find((t) => {
    const e = t.tagName && t.tagName.toUpperCase();
    return e === "SPAN" || e === "SVG";
  });
}
function Bn(i, t) {
  const e = t.icon.data, n = t.customisations, s = zs(e, n);
  n.preserveAspectRatio && (s.attributes.preserveAspectRatio = n.preserveAspectRatio);
  const r = t.renderedMode;
  let o;
  switch (r) {
    case "svg":
      o = ca(s);
      break;
    default:
      o = oa(s, {
        ...pe,
        ...e
      }, r === "mask");
  }
  const l = fi(i);
  l ? o.tagName === "SPAN" && l.tagName === o.tagName ? l.setAttribute("style", o.getAttribute("style")) : i.replaceChild(o, l) : i.appendChild(o);
}
function Mn(i, t, e) {
  const n = e && (e.rendered ? e : e.lastRender);
  return {
    rendered: !1,
    inline: t,
    icon: i,
    lastRender: n
  };
}
function ua(i = "iconify-icon") {
  let t, e;
  try {
    t = window.customElements, e = window.HTMLElement;
  } catch {
    return;
  }
  if (!t || !e)
    return;
  const n = t.get(i);
  if (n)
    return n;
  const s = [
    // Icon
    "icon",
    // Mode
    "mode",
    "inline",
    "observe",
    // Customisations
    "width",
    "height",
    "rotate",
    "flip"
  ], r = class extends e {
    /**
     * Constructor
     */
    constructor() {
      super();
      // Root
      at(this, "_shadowRoot");
      // Initialised
      at(this, "_initialised", !1);
      // Icon state
      at(this, "_state");
      // Attributes check queued
      at(this, "_checkQueued", !1);
      // Connected
      at(this, "_connected", !1);
      // Observer
      at(this, "_observer", null);
      at(this, "_visible", !0);
      const a = this._shadowRoot = this.attachShadow({
        mode: "open"
      }), c = ni(this);
      In(a, c), this._state = Mn({
        value: ""
      }, c), this._queueCheck();
    }
    /**
     * Connected to DOM
     */
    connectedCallback() {
      this._connected = !0, this.startObserver();
    }
    /**
     * Disconnected from DOM
     */
    disconnectedCallback() {
      this._connected = !1, this.stopObserver();
    }
    /**
     * Observed attributes
     */
    static get observedAttributes() {
      return s.slice(0);
    }
    /**
     * Observed properties that are different from attributes
     *
     * Experimental! Need to test with various frameworks that support it
     */
    /*
    static get properties() {
        return {
            inline: {
                type: Boolean,
                reflect: true,
            },
            // Not listing other attributes because they are strings or combination
            // of string and another type. Cannot have multiple types
        };
    }
    */
    /**
     * Attribute has changed
     */
    attributeChangedCallback(a) {
      switch (a) {
        case "inline": {
          const c = ni(this), u = this._state;
          c !== u.inline && (u.inline = c, In(this._shadowRoot, c));
          break;
        }
        case "observer": {
          this.observer ? this.startObserver() : this.stopObserver();
          break;
        }
        default:
          this._queueCheck();
      }
    }
    /**
     * Get/set icon
     */
    get icon() {
      const a = this.getAttribute("icon");
      if (a && a.slice(0, 1) === "{")
        try {
          return JSON.parse(a);
        } catch {
        }
      return a;
    }
    set icon(a) {
      typeof a == "object" && (a = JSON.stringify(a)), this.setAttribute("icon", a);
    }
    /**
     * Get/set inline
     */
    get inline() {
      return ni(this);
    }
    set inline(a) {
      a ? this.setAttribute("inline", "true") : this.removeAttribute("inline");
    }
    /**
     * Get/set observer
     */
    get observer() {
      return this.hasAttribute("observer");
    }
    set observer(a) {
      a ? this.setAttribute("observer", "true") : this.removeAttribute("observer");
    }
    /**
     * Restart animation
     */
    restartAnimation() {
      const a = this._state;
      if (a.rendered) {
        const c = this._shadowRoot;
        if (a.renderedMode === "svg")
          try {
            c.lastChild.setCurrentTime(0);
            return;
          } catch {
          }
        Bn(c, a);
      }
    }
    /**
     * Get status
     */
    get status() {
      const a = this._state;
      return a.rendered ? "rendered" : a.icon.data === null ? "failed" : "loading";
    }
    /**
     * Queue attributes re-check
     */
    _queueCheck() {
      this._checkQueued || (this._checkQueued = !0, setTimeout(() => {
        this._check();
      }));
    }
    /**
     * Check for changes
     */
    _check() {
      if (!this._checkQueued)
        return;
      this._checkQueued = !1;
      const a = this._state, c = this.getAttribute("icon");
      if (c !== a.icon.value) {
        this._iconChanged(c);
        return;
      }
      if (!a.rendered || !this._visible)
        return;
      const u = this.getAttribute("mode"), h = _n(this);
      (a.attrMode !== u || po(a.customisations, h) || !fi(this._shadowRoot)) && this._renderIcon(a.icon, h, u);
    }
    /**
     * Icon value has changed
     */
    _iconChanged(a) {
      const c = Do(a, (u, h, p) => {
        const f = this._state;
        if (f.rendered || this.getAttribute("icon") !== u)
          return;
        const g = {
          value: u,
          name: h,
          data: p
        };
        g.data ? this._gotIconData(g) : f.icon = g;
      });
      c.data ? this._gotIconData(c) : this._state = Mn(c, this._state.inline, this._state);
    }
    /**
     * Force render icon on state change
     */
    _forceRender() {
      if (!this._visible) {
        const a = fi(this._shadowRoot);
        a && this._shadowRoot.removeChild(a);
        return;
      }
      this._queueCheck();
    }
    /**
     * Got new icon data, icon is ready to (re)render
     */
    _gotIconData(a) {
      this._checkQueued = !1, this._renderIcon(a, _n(this), this.getAttribute("mode"));
    }
    /**
     * Re-render based on icon data
     */
    _renderIcon(a, c, u) {
      const h = Fo(a.data.body, u), p = this._state.inline;
      Bn(this._shadowRoot, this._state = {
        rendered: !0,
        icon: a,
        inline: p,
        customisations: c,
        attrMode: u,
        renderedMode: h
      });
    }
    /**
     * Start observer
     */
    startObserver() {
      if (!this._observer)
        try {
          this._observer = new IntersectionObserver((a) => {
            const c = a.some((u) => u.isIntersecting);
            c !== this._visible && (this._visible = c, this._forceRender());
          }), this._observer.observe(this);
        } catch {
          if (this._observer) {
            try {
              this._observer.disconnect();
            } catch {
            }
            this._observer = null;
          }
        }
    }
    /**
     * Stop observer
     */
    stopObserver() {
      this._observer && (this._observer.disconnect(), this._observer = null, this._visible = !0, this._connected && this._forceRender());
    }
  };
  s.forEach((l) => {
    l in r.prototype || Object.defineProperty(r.prototype, l, {
      get: function() {
        return this.getAttribute(l);
      },
      set: function(a) {
        a !== null ? this.setAttribute(l, a) : this.removeAttribute(l);
      }
    });
  });
  const o = js();
  for (const l in o)
    r[l] = r.prototype[l] = o[l];
  return t.define(i, r), r;
}
const ha = ua() || js(), {
  enableCache: ul,
  disableCache: hl,
  iconLoaded: dl,
  iconExists: pl,
  // deprecated, kept to avoid breaking changes
  getIcon: fl,
  listIcons: ml,
  addIcon: bl,
  addCollection: gl,
  calculateSize: vl,
  buildIcon: yl,
  iconToHTML: _l,
  svgToURL: wl,
  loadIcons: xl,
  loadIcon: $l,
  addAPIProvider: Cl,
  _api: Al
} = ha, da = S`
  ::-webkit-scrollbar {
    width: 0.4rem;
    height: 0.4rem;
    overflow: hidden;
  }

  ::-webkit-scrollbar-thumb {
    border-radius: 0.25rem;
    background-color: var(
      --bim-scrollbar--c,
      color-mix(in lab, var(--bim-ui_main-base), white 15%)
    );
  }

  ::-webkit-scrollbar-track {
    background-color: var(--bim-scrollbar--bgc, var(--bim-ui_bg-base));
  }
`, pa = S`
  :root {
    /* Grayscale Colors */
    --bim-ui_gray-0: hsl(210 10% 5%);
    --bim-ui_gray-1: hsl(210 10% 10%);
    --bim-ui_gray-2: hsl(210 10% 20%);
    --bim-ui_gray-3: hsl(210 10% 30%);
    --bim-ui_gray-4: hsl(210 10% 40%);
    --bim-ui_gray-6: hsl(210 10% 60%);
    --bim-ui_gray-7: hsl(210 10% 70%);
    --bim-ui_gray-8: hsl(210 10% 80%);
    --bim-ui_gray-9: hsl(210 10% 90%);
    --bim-ui_gray-10: hsl(210 10% 95%);

    /* Brand Colors */
    --bim-ui_main-base: #6528d7;
    --bim-ui_accent-base: #bcf124;

    /* Brand Colors Contrasts */
    --bim-ui_main-contrast: var(--bim-ui_gray-10);
    --bim-ui_accent-contrast: var(--bim-ui_gray-0);

    /* Sizes */
    --bim-ui_size-4xs: 0.375rem;
    --bim-ui_size-3xs: 0.5rem;
    --bim-ui_size-2xs: 0.625rem;
    --bim-ui_size-xs: 0.75rem;
    --bim-ui_size-sm: 0.875rem;
    --bim-ui_size-base: 1rem;
    --bim-ui_size-lg: 1.125rem;
    --bim-ui_size-xl: 1.25rem;
    --bim-ui_size-2xl: 1.375rem;
    --bim-ui_size-3xl: 1.5rem;
    --bim-ui_size-4xl: 1.625rem;
    --bim-ui_size-5xl: 1.75rem;
    --bim-ui_size-6xl: 1.875rem;
    --bim-ui_size-7xl: 2rem;
    --bim-ui_size-8xl: 2.125rem;
    --bim-ui_size-9xl: 2.25rem;
  }

  /* Background Colors */
  @media (prefers-color-scheme: dark) {
    :root {
      --bim-ui_bg-base: var(--bim-ui_gray-0);
      --bim-ui_bg-contrast-10: var(--bim-ui_gray-1);
      --bim-ui_bg-contrast-20: var(--bim-ui_gray-2);
      --bim-ui_bg-contrast-30: var(--bim-ui_gray-3);
      --bim-ui_bg-contrast-40: var(--bim-ui_gray-4);
      --bim-ui_bg-contrast-60: var(--bim-ui_gray-6);
      --bim-ui_bg-contrast-80: var(--bim-ui_gray-8);
      --bim-ui_bg-contrast-100: var(--bim-ui_gray-10);
    }
  }

  @media (prefers-color-scheme: light) {
    :root {
      --bim-ui_bg-base: var(--bim-ui_gray-10);
      --bim-ui_bg-contrast-10: var(--bim-ui_gray-9);
      --bim-ui_bg-contrast-20: var(--bim-ui_gray-8);
      --bim-ui_bg-contrast-30: var(--bim-ui_gray-7);
      --bim-ui_bg-contrast-40: var(--bim-ui_gray-6);
      --bim-ui_bg-contrast-60: var(--bim-ui_gray-4);
      --bim-ui_bg-contrast-80: var(--bim-ui_gray-2);
      --bim-ui_bg-contrast-100: var(--bim-ui_gray-0);
      --bim-ui_accent-base: #6528d7;
    }
  }

  .theme-transition-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    filter: drop-shadow(0 0 10px var(--bim-ui_bg-base));
    z-index: 9999;
  }

  .theme-transition-overlay > div {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--bim-ui_bg-base);
  }

  html.bim-ui-dark {
    --bim-ui_bg-base: var(--bim-ui_gray-0);
    --bim-ui_bg-contrast-10: var(--bim-ui_gray-1);
    --bim-ui_bg-contrast-20: var(--bim-ui_gray-2);
    --bim-ui_bg-contrast-30: var(--bim-ui_gray-3);
    --bim-ui_bg-contrast-40: var(--bim-ui_gray-4);
    --bim-ui_bg-contrast-60: var(--bim-ui_gray-6);
    --bim-ui_bg-contrast-80: var(--bim-ui_gray-8);
    --bim-ui_bg-contrast-100: var(--bim-ui_gray-10);
  }

  html.bim-ui-light {
    --bim-ui_bg-base: var(--bim-ui_gray-10);
    --bim-ui_bg-contrast-10: var(--bim-ui_gray-9);
    --bim-ui_bg-contrast-20: var(--bim-ui_gray-8);
    --bim-ui_bg-contrast-30: var(--bim-ui_gray-7);
    --bim-ui_bg-contrast-40: var(--bim-ui_gray-6);
    --bim-ui_bg-contrast-60: var(--bim-ui_gray-4);
    --bim-ui_bg-contrast-80: var(--bim-ui_gray-2);
    --bim-ui_bg-contrast-100: var(--bim-ui_gray-0);
    --bim-ui_accent-base: #6528d7;
  }

  @keyframes toggleOverlay {
    0%,
    99% {
      display: block;
    }

    100% {
      display: none;
    }
  }

  @keyframes toggleThemeAnimation {
    0% {
      clip-path: circle(0% at center top);
    }
    45%,
    55% {
      clip-path: circle(150% at center center);
    }
    100% {
      clip-path: circle(0% at center bottom);
    }
  }

  [data-context-dialog]::backdrop {
    background-color: transparent;
  }
`, _t = {
  scrollbar: da,
  globalStyles: pa
}, _ = class _ {
  static set config(t) {
    this._config = { ..._._config, ...t };
  }
  static get config() {
    return _._config;
  }
  static addGlobalStyles() {
    let t = document.querySelector("style[id='bim-ui']");
    if (t)
      return;
    t = document.createElement("style"), t.id = "bim-ui", t.textContent = _t.globalStyles.cssText;
    const e = document.head.firstChild;
    e ? document.head.insertBefore(t, e) : document.head.append(t);
  }
  static defineCustomElement(t, e) {
    customElements.get(t) || customElements.define(t, e);
  }
  /**
   * @deprecated Use `Manager.init()` instead.
   */
  static registerComponents() {
    _.init();
  }
  /**
   * Initializes the BIM UI library by defining custom elements.
   * It ensures that all necessary styles and custom elements are registered for use in BIM UI components.
   *
   * @example
   * ```typescript
   * import { Manager } from "@thatopen/ui";
   * Manager.init();
   * ```
   */
  static init(t = "", e = !0) {
    _.addGlobalStyles(), _.defineCustomElement("bim-button", ya), _.defineCustomElement("bim-checkbox", pt), _.defineCustomElement("bim-color-input", J), _.defineCustomElement("bim-context-menu", bi), _.defineCustomElement("bim-dropdown", D), _.defineCustomElement("bim-grid", ce), _.defineCustomElement("bim-icon", gi), _.defineCustomElement("bim-input", Ot), _.defineCustomElement("bim-label", ft), _.defineCustomElement("bim-number-input", R), _.defineCustomElement("bim-option", T), _.defineCustomElement("bim-panel", nt), _.defineCustomElement("bim-panel-section", mt), _.defineCustomElement("bim-selector", bt), _.defineCustomElement("bim-table", z), _.defineCustomElement("bim-tabs", W), _.defineCustomElement("bim-tab", L), _.defineCustomElement("bim-table-cell", ze), _.defineCustomElement("bim-table-children", vi), _.defineCustomElement("bim-table-group", Be), _.defineCustomElement("bim-table-row", gt), _.defineCustomElement("bim-text-input", B), _.defineCustomElement("bim-toolbar", Vt), _.defineCustomElement("bim-toolbar-group", qt), _.defineCustomElement(
      "bim-toolbar-section",
      vt
    ), _.defineCustomElement("bim-viewport", Me), e && this.animateOnLoad(t);
  }
  static newRandomId() {
    const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let e = "";
    for (let n = 0; n < 10; n++) {
      const s = Math.floor(Math.random() * t.length);
      e += t.charAt(s);
    }
    return e;
  }
  static animateOnLoad(t = "") {
    const e = `
      bim-input,
      bim-button,
      bim-checkbox,
      bim-selector,
      bim-label,
      bim-table-row,
      bim-panel-section,
      bim-table-children .branch-vertical,
      .switchers
    `, n = [];
    function s(r, o = document, l = /* @__PURE__ */ new Set()) {
      const a = [];
      return Array.from(o.querySelectorAll(r)).forEach((h) => {
        l.has(h) || (l.add(h), a.push(h));
      }), Array.from(
        o.querySelectorAll("*")
      ).filter((h) => h.shadowRoot).forEach((h) => {
        l.has(h) || (l.add(h), a.push(
          ...s(r, h.shadowRoot, l)
        ));
      }), a;
    }
    requestAnimationFrame(() => {
      s(
        t || e
      ).forEach((l) => {
        const a = l;
        let c = "auto";
        c = window.getComputedStyle(a).getPropertyValue("transition"), a.style.setProperty("opacity", "0"), a.style.setProperty("transition", "none"), requestAnimationFrame(() => {
          a.style.setProperty("transition", c);
        }), n.push(a);
      });
      const o = () => {
        n.forEach((l) => {
          const a = l, c = (a.getBoundingClientRect().x + a.getBoundingClientRect().y) / (window.innerWidth + window.innerHeight), u = window.getComputedStyle(a).getPropertyValue("transform"), h = 400, p = 200 + c * 1e3;
          a.animate(
            [
              {
                transform: "translateY(-20px)",
                opacity: "0"
              },
              {
                transform: "translateY(0)",
                opacity: "1"
              }
            ],
            {
              duration: h,
              easing: "ease-in-out",
              delay: p
            }
          ), setTimeout(() => {
            a.style.removeProperty("opacity"), u !== "none" ? a.style.setProperty("transform", u) : a.style.removeProperty("transform");
          }, p + h);
        });
      };
      document.readyState === "complete" ? o() : window.addEventListener("load", o);
    });
  }
  static toggleTheme(t = !0) {
    const e = document.querySelector("html");
    if (!e)
      return;
    const n = () => {
      e.classList.contains("bim-ui-dark") ? e.classList.replace("bim-ui-dark", "bim-ui-light") : e.classList.contains("bim-ui-light") ? e.classList.replace("bim-ui-light", "bim-ui-dark") : e.classList.add("bim-ui-light");
    };
    if (t) {
      const r = document.createElement("div");
      r.classList.add("theme-transition-overlay");
      const o = document.createElement("div");
      r.appendChild(o), o.style.setProperty(
        "transition",
        `background-color ${1e3 / 3200}s`
      ), document.body.appendChild(r), r.style.setProperty(
        "animation",
        `toggleOverlay ${1e3 / 1e3}s ease-in forwards`
      ), o.style.setProperty(
        "animation",
        `toggleThemeAnimation ${1e3 / 1e3}s ease forwards`
      ), setTimeout(() => {
        n();
      }, 1e3 / 4), setTimeout(() => {
        document.body.querySelectorAll(
          ".theme-transition-overlay"
        ).forEach((a) => {
          document.body.removeChild(a);
        });
      }, 1e3);
    } else
      n();
  }
};
_._config = {
  sectionLabelOnVerticalToolbar: !1
  // draggableToolbars: true,
  // draggablePanels: true,
};
let le = _;
class Le extends C {
  constructor() {
    super(...arguments), this._lazyLoadObserver = null, this._visibleElements = [], this.ELEMENTS_BEFORE_OBSERVER = 20, this.useObserver = !1, this.elements = /* @__PURE__ */ new Set(), this.observe = (t) => {
      if (!this.useObserver)
        return;
      for (const n of t)
        this.elements.add(n);
      const e = t.slice(this.ELEMENTS_BEFORE_OBSERVER);
      for (const n of e)
        n.remove();
      this.observeLastElement();
    };
  }
  set visibleElements(t) {
    this._visibleElements = this.useObserver ? t : [], this.requestUpdate();
  }
  get visibleElements() {
    return this._visibleElements;
  }
  getLazyObserver() {
    if (!this.useObserver)
      return null;
    if (this._lazyLoadObserver)
      return this._lazyLoadObserver;
    const t = new IntersectionObserver(
      (e) => {
        const n = e[0];
        if (!n.isIntersecting)
          return;
        const s = n.target;
        t.unobserve(s);
        const r = this.ELEMENTS_BEFORE_OBSERVER + this.visibleElements.length, o = [...this.elements][r];
        o && (this.visibleElements = [...this.visibleElements, o], t.observe(o));
      },
      { threshold: 0.5 }
    );
    return t;
  }
  observeLastElement() {
    const t = this.getLazyObserver();
    if (!t)
      return;
    const e = this.ELEMENTS_BEFORE_OBSERVER + this.visibleElements.length - 1, n = [...this.elements][e];
    n && t.observe(n);
  }
  resetVisibleElements() {
    const t = this.getLazyObserver();
    if (t) {
      for (const e of this.elements)
        t.unobserve(e);
      this.visibleElements = [], this.observeLastElement();
    }
  }
  /**
   * Creates a new UI component instance based on the provided template and initial state.
   *
   * @template T - The type of the UI component element.
   * @template S - The type of the component state.
   *
   * @param template - The component template function (stateless or stateful).
   * @param initialState - The initial state of the component (optional for stateless components).
   * @returns The created UI component element or an array containing the element and a function to update its state.
   */
  static create(t, e) {
    const n = document.createDocumentFragment();
    if (t.length === 0)
      return Dt(t(), n), n.firstElementChild;
    if (!e)
      throw new Error(
        "UIComponent: Initial state is required for statefull components."
      );
    let s = e;
    const r = t, o = (c) => (s = { ...s, ...c }, Dt(r(s, o), n), s);
    o(e);
    const l = () => s;
    return [n.firstElementChild, o, l];
  }
}
const Re = (i, t = {}, e = !0) => {
  let n = {};
  for (const s of i.children) {
    const r = s, o = r.getAttribute("name") || r.getAttribute("label"), l = o ? t[o] : void 0;
    if (o) {
      if ("value" in r && typeof r.value < "u" && r.value !== null) {
        const a = r.value;
        if (typeof a == "object" && !Array.isArray(a) && Object.keys(a).length === 0)
          continue;
        n[o] = l ? l(r.value) : r.value;
      } else if (e) {
        const a = Re(r, t);
        if (Object.keys(a).length === 0)
          continue;
        n[o] = l ? l(a) : a;
      }
    } else
      e && (n = { ...n, ...Re(r, t) });
  }
  return n;
}, We = (i) => i === "true" || i === "false" ? i === "true" : i && !isNaN(Number(i)) && i.trim() !== "" ? Number(i) : i, fa = [">=", "<=", "=", ">", "<", "?", "/", "#"];
function jn(i) {
  const t = fa.find(
    (l) => i.split(l).length === 2
  ), e = i.split(t).map((l) => l.trim()), [n, s] = e, r = s.startsWith("'") && s.endsWith("'") ? s.replace(/'/g, "") : We(s);
  return { key: n, condition: t, value: r };
}
const mi = (i) => {
  try {
    const t = [], e = i.split(/&(?![^()]*\))/).map((n) => n.trim());
    for (const n of e) {
      const s = !n.startsWith("(") && !n.endsWith(")"), r = n.startsWith("(") && n.endsWith(")");
      if (s) {
        const o = jn(n);
        t.push(o);
      }
      if (r) {
        const c = {
          operator: "&",
          queries: n.replace(/^(\()|(\))$/g, "").split("&").map((u) => u.trim()).map((u, h) => {
            const p = jn(u);
            return h > 0 && (p.operator = "&"), p;
          })
        };
        t.push(c);
      }
    }
    return t;
  } catch {
    return null;
  }
}, Hn = (i, t, e) => {
  let n = !1;
  switch (t) {
    case "=":
      n = i === e;
      break;
    case "?":
      n = String(i).includes(String(e));
      break;
    case "<":
      (typeof i == "number" || typeof e == "number") && (n = i < e);
      break;
    case "<=":
      (typeof i == "number" || typeof e == "number") && (n = i <= e);
      break;
    case ">":
      (typeof i == "number" || typeof e == "number") && (n = i > e);
      break;
    case ">=":
      (typeof i == "number" || typeof e == "number") && (n = i >= e);
      break;
    case "/":
      n = String(i).startsWith(String(e));
      break;
  }
  return n;
};
var ma = Object.defineProperty, ba = Object.getOwnPropertyDescriptor, Ds = (i, t, e, n) => {
  for (var s = ba(t, e), r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = o(t, e, s) || s);
  return s && ma(t, e, s), s;
}, O;
const Ti = (O = class extends C {
  constructor() {
    super(...arguments), this._previousContainer = null, this._visible = !1;
  }
  get placement() {
    return this._placement;
  }
  set placement(t) {
    this._placement = t, this.updatePosition();
  }
  static removeMenus() {
    for (const t of O.menus)
      t instanceof O && (t.visible = !1);
    setTimeout(() => {
      O.dialog.close(), O.dialog.remove();
    }, 310);
  }
  get visible() {
    return this._visible;
  }
  set visible(t) {
    this._visible = t, t ? (O.dialog.parentElement || document.body.append(O.dialog), this._previousContainer = this.parentElement, O.dialog.style.top = `${window.scrollY || document.documentElement.scrollTop}px`, this.style.setProperty("display", "flex"), O.dialog.append(this), O.dialog.showModal(), this.updatePosition(), this.dispatchEvent(new Event("visible"))) : setTimeout(() => {
      var e;
      (e = this._previousContainer) == null || e.append(this), this._previousContainer = null, this.style.setProperty("display", "none"), this.dispatchEvent(new Event("hidden"));
    }, 310);
  }
  /**
   * Asynchronously updates the position of the context menu relative to a target element.
   * If no target element is provided, it attempts to use the parent node as the target.
   * The position is calculated using the `computePosition` function from `@floating-ui/dom`,
   * which considers various adjustments like offset, inline positioning, flipping, and shifting
   * to ensure the context menu is properly placed relative to the target element.
   *
   * @param [target] - The target element relative to which the context menu should be positioned.
   *                                 If not provided, the parent node is used as the target.
   * @returns A promise that resolves once the position has been updated. This method
   *                          does not explicitly return a value but updates the context menu's style
   *                          properties to position it on the screen.
   */
  async updatePosition() {
    if (!(this.visible && this._previousContainer))
      return;
    const t = this.placement ?? "right", e = await ls(this._previousContainer, this, {
      placement: t,
      middleware: [Gn(10), as(), os(), rs({ padding: 5 })]
    }), { x: n, y: s } = e;
    this.style.left = `${n}px`, this.style.top = `${s}px`;
  }
  connectedCallback() {
    super.connectedCallback(), O.menus.push(this), this.visible ? (this.style.setProperty("width", "auto"), this.style.setProperty("height", "auto")) : (this.style.setProperty("display", "none"), this.style.setProperty("width", "0"), this.style.setProperty("height", "0"));
  }
  render() {
    return m` <slot></slot> `;
  }
}, O.styles = [
  _t.scrollbar,
  S`
      :host {
        pointer-events: auto;
        position: absolute;
        top: 0;
        left: 0;
        z-index: 999;
        overflow: auto;
        max-height: 20rem;
        min-width: 3rem;
        flex-direction: column;
        box-shadow: 1px 2px 8px 2px rgba(0, 0, 0, 0.15);
        padding: 0.5rem;
        border-radius: var(--bim-ui_size-4xs);
        display: flex;
        transform-origin: top left;
        transform: scale(1);
        clip-path: circle(150% at top left);
        background-color: var(--bim-ui_bg-contrast-20);
        transition:
          clip-path 0.2s cubic-bezier(0.72, 0.1, 0.43, 0.93),
          transform 0.3s cubic-bezier(0.72, 0.1, 0.45, 2.35);
      }

      :host(:not([visible])) {
        transform: scale(0.8);
        clip-path: circle(0 at top left);
      }
    `
], O.dialog = Le.create(() => m` <dialog
      @click=${(e) => {
  e.target === O.dialog && O.removeMenus();
}}
      @cancel=${() => O.removeMenus()}
      data-context-dialog
      style="
      width: 0;
      height: 0;
      position: relative;
      padding: 0;
      border: none;
      outline: none;
      margin: none;
      overflow: visible;
      background-color: transparent;
    "
    ></dialog>`), O.menus = [], O);
Ds([
  d({ type: String, reflect: !0 })
], Ti.prototype, "placement");
Ds([
  d({ type: Boolean, reflect: !0 })
], Ti.prototype, "visible");
let bi = Ti;
var ga = Object.defineProperty, va = Object.getOwnPropertyDescriptor, Y = (i, t, e, n) => {
  for (var s = n > 1 ? void 0 : n ? va(t, e) : t, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = (n ? o(t, e, s) : o(s)) || s);
  return n && s && ga(t, e, s), s;
}, Et;
const F = (Et = class extends C {
  constructor() {
    super(), this.labelHidden = !1, this.active = !1, this.disabled = !1, this.vertical = !1, this.tooltipVisible = !1, this._stateBeforeLoading = {
      disabled: !1,
      icon: ""
    }, this._loading = !1, this._parent = Ft(), this._tooltip = Ft(), this._mouseLeave = !1, this.onClick = (t) => {
      t.stopPropagation(), this.disabled || this.dispatchEvent(new Event("click"));
    }, this.showContextMenu = () => {
      const t = this._contextMenu;
      if (t) {
        const e = this.getAttribute("data-context-group");
        e && t.setAttribute("data-context-group", e), this.closeNestedContexts();
        const n = le.newRandomId();
        for (const s of t.children)
          s instanceof Et && s.setAttribute("data-context-group", n);
        t.visible = !0;
      }
    }, this.mouseLeave = !0;
  }
  set loading(t) {
    if (this._loading = t, t)
      this._stateBeforeLoading = {
        disabled: this.disabled,
        icon: this.icon
      }, this.disabled = t, this.icon = "eos-icons:loading";
    else {
      const { disabled: e, icon: n } = this._stateBeforeLoading;
      this.disabled = e, this.icon = n;
    }
  }
  get loading() {
    return this._loading;
  }
  set mouseLeave(t) {
    this._mouseLeave = t, t && (this.tooltipVisible = !1, clearTimeout(this.timeoutID));
  }
  get mouseLeave() {
    return this._mouseLeave;
  }
  computeTooltipPosition() {
    const { value: t } = this._parent, { value: e } = this._tooltip;
    t && e && ls(t, e, {
      placement: "bottom",
      middleware: [Gn(10), as(), os(), rs({ padding: 5 })]
    }).then((n) => {
      const { x: s, y: r } = n;
      Object.assign(e.style, {
        left: `${s}px`,
        top: `${r}px`
      });
    });
  }
  onMouseEnter() {
    if (!(this.tooltipTitle || this.tooltipText))
      return;
    this.mouseLeave = !1;
    const t = this.tooltipTime ?? 700;
    this.timeoutID = setTimeout(() => {
      this.mouseLeave || (this.computeTooltipPosition(), this.tooltipVisible = !0);
    }, t);
  }
  closeNestedContexts() {
    const t = this.getAttribute("data-context-group");
    if (t)
      for (const e of bi.dialog.children) {
        const n = e.getAttribute("data-context-group");
        if (e instanceof bi && n === t) {
          e.visible = !1, e.removeAttribute("data-context-group");
          for (const s of e.children)
            s instanceof Et && (s.closeNestedContexts(), s.removeAttribute("data-context-group"));
        }
      }
  }
  click() {
    this.disabled || super.click();
  }
  get _contextMenu() {
    return this.querySelector("bim-context-menu");
  }
  connectedCallback() {
    super.connectedCallback(), this.addEventListener("click", this.showContextMenu);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removeEventListener("click", this.showContextMenu);
  }
  render() {
    const t = m`
      <div ${Nt(this._tooltip)} class="tooltip">
        ${this.tooltipTitle ? m`<p style="text-wrap: nowrap;">
              <strong>${this.tooltipTitle}</strong>
            </p>` : null}
        ${this.tooltipText ? m`<p style="width: 9rem;">${this.tooltipText}</p>` : null}
      </div>
    `, e = m`<svg
      xmlns="http://www.w3.org/2000/svg"
      height="1.125rem"
      viewBox="0 0 24 24"
      width="1.125rem"
      style="fill: var(--bim-label--c)"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z" />
    </svg>`;
    return m`
      <div ${Nt(this._parent)} class="parent" @click=${this.onClick}>
        ${this.label || this.icon ? m`
              <div
                class="button"
                @mouseenter=${this.onMouseEnter}
                @mouseleave=${() => this.mouseLeave = !0}
              >
                <bim-label
                  .icon=${this.icon}
                  .vertical=${this.vertical}
                  .labelHidden=${this.labelHidden}
                  >${this.label}${this.label && this._contextMenu ? e : null}</bim-label
                >
              </div>
            ` : null}
        ${this.tooltipTitle || this.tooltipText ? t : null}
      </div>
      <slot></slot>
    `;
  }
}, Et.styles = S`
    :host {
      --bim-label--c: var(--bim-ui_bg-contrast-100, white);
      position: relative;
      display: block;
      flex: 1;
      pointer-events: none;
      background-color: var(--bim-button--bgc, var(--bim-ui_bg-contrast-20));
      border-radius: var(--bim-ui_size-4xs);
      transition: all 0.15s;
    }

    :host(:not([disabled]))::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: inherit;
      background-color: var(--bim-ui_main-base);
      clip-path: circle(0 at center center);
      box-sizing: border-box;
      transition:
        clip-path 0.3s cubic-bezier(0.65, 0.05, 0.36, 1),
        transform 0.15s;
    }

    :host(:not([disabled]):hover) {
      cursor: pointer;
    }

    bim-label {
      pointer-events: none;
    }

    .parent {
      --bim-icon--c: var(--bim-label--c);
      position: relative;
      display: flex;
      height: 100%;
      user-select: none;
      row-gap: 0.125rem;
      min-height: var(--bim-ui_size-5xl);
      min-width: var(--bim-ui_size-5xl);
    }

    .button,
    .children {
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      pointer-events: auto;
    }

    .children {
      padding: 0 0.375rem;
      position: absolute;
      height: 100%;
      right: 0;
    }

    :host(:not([label-hidden])[icon][vertical]) .parent {
      min-height: 2.5rem;
    }

    .button {
      flex-grow: 1;
      transition: transform 0.15s;
    }

    :host(:not([label-hidden])[label]) .button {
      justify-content: var(--bim-button--jc, center);
    }

    :host(:hover)::before {
      clip-path: circle(120% at center center);
    }

    :host(:hover) {
      --bim-label--c: var(--bim-ui_main-contrast);
      z-index: 2;
    }

    :host([active]) {
      background-color: var(--bim-ui_main-base);
    }

    :host(:not([disabled]):active) {
      background: transparent;
    }

    :host(:not([disabled]):active) .button,
    :host(:not([disabled]):active)::before {
      transform: scale(0.98);
    }

    :host(:not([label]):not([icon])) .children {
      flex: 1;
    }

    :host([vertical]) .parent {
      justify-content: center;
    }

    :host(:not([label-hidden])[label]) .button {
      padding: 0 0.5rem;
    }

    :host([disabled]) {
      --bim-label--c: var(--bim-ui_bg-contrast-80) !important;
      background-color: gray !important;
    }

    ::slotted(bim-button) {
      --bim-icon--fz: var(--bim-ui_size-base);
      --bim-button--bdrs: var(--bim-ui_size-4xs);
      --bim-button--olw: 0;
      --bim-button--olc: transparent;
    }

    .tooltip {
      position: absolute;
      padding: 0.75rem;
      z-index: 99;
      display: flex;
      flex-flow: column;
      row-gap: 0.375rem;
      box-shadow: 0 0 10px 3px rgba(0 0 0 / 20%);
      outline: 1px solid var(--bim-ui_bg-contrast-40);
      font-size: var(--bim-ui_size-xs);
      border-radius: var(--bim-ui_size-4xs);
      background-color: var(--bim-ui_bg-contrast-20);
      color: var(--bim-ui_bg-contrast-100);
      animation: openTooltips 0.15s ease-out forwards;
      transition: visibility 0.2s;
    }

    .tooltip p {
      margin: 0;
      padding: 0;
    }

    :host(:not([tooltip-visible])) .tooltip {
      animation: closeTooltips 0.15s ease-in forwards;
      visibility: hidden;
      display: none;
    }

    @keyframes closeTooltips {
      0% {
        display: flex;
        padding: 0.75rem;
        transform: translateY(0);
        opacity: 1;
      }
      90% {
        padding: 0.75rem;
      }
      100% {
        display: none;
        padding: 0;
        transform: translateY(-10px);
        opacity: 0;
      }
    }

    @keyframes openTooltips {
      0% {
        display: flex;
        transform: translateY(-10px);
        opacity: 0;
      }
      100% {
        transform: translateY(0);
        opacity: 1;
      }
    }
  `, Et);
Y([
  d({ type: String, reflect: !0 })
], F.prototype, "label", 2);
Y([
  d({ type: Boolean, attribute: "label-hidden", reflect: !0 })
], F.prototype, "labelHidden", 2);
Y([
  d({ type: Boolean, reflect: !0 })
], F.prototype, "active", 2);
Y([
  d({ type: Boolean, reflect: !0, attribute: "disabled" })
], F.prototype, "disabled", 2);
Y([
  d({ type: String, reflect: !0 })
], F.prototype, "icon", 2);
Y([
  d({ type: Boolean, reflect: !0 })
], F.prototype, "vertical", 2);
Y([
  d({ type: Number, attribute: "tooltip-time", reflect: !0 })
], F.prototype, "tooltipTime", 2);
Y([
  d({ type: Boolean, attribute: "tooltip-visible", reflect: !0 })
], F.prototype, "tooltipVisible", 2);
Y([
  d({ type: String, attribute: "tooltip-title", reflect: !0 })
], F.prototype, "tooltipTitle", 2);
Y([
  d({ type: String, attribute: "tooltip-text", reflect: !0 })
], F.prototype, "tooltipText", 2);
Y([
  d({ type: Boolean, reflect: !0 })
], F.prototype, "loading", 1);
let ya = F;
var _a = Object.defineProperty, me = (i, t, e, n) => {
  for (var s = void 0, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = o(t, e, s) || s);
  return s && _a(t, e, s), s;
};
const Li = class Li extends C {
  constructor() {
    super(...arguments), this.checked = !1, this.inverted = !1, this.onValueChange = new Event("change");
  }
  /**
   * A getter that returns the current checked state of the checkbox. This is useful for retrieving the checkbox's value in form submissions or JavaScript interactions as it provides a consistent `value` property as many other components.
   * @type {boolean}
   * @default false
   * @example <script>console.log(document.querySelector('bim-checkbox').value);<\/script>
   * @example
   * const checkbox = document.createElement('bim-checkbox');
   * document.body.appendChild(checkbox);
   * console.log(checkbox.value); // false initially
   */
  get value() {
    return this.checked;
  }
  onChange(t) {
    t.stopPropagation(), this.checked = t.target.checked, this.dispatchEvent(this.onValueChange);
  }
  render() {
    const t = m`
      <svg viewBox="0 0 21 21">
        <polyline points="5 10.75 8.5 14.25 16 6"></polyline>
      </svg>
    `;
    return m`
      <div class="parent">
        <label class="parent-label">
          ${this.label ? m`<bim-label .icon="${this.icon}">${this.label}</bim-label> ` : null}
          <div class="input-container">
            <input
              type="checkbox"
              aria-label=${this.label || this.name || "Checkbox Input"}
              @change="${this.onChange}"
              .checked="${this.checked}"
            />
            ${t}
          </div>
        </label>
      </div>
    `;
  }
};
Li.styles = S`
    :host {
      display: block;
    }

    .parent-label {
      --background: #fff;
      --border: #dfdfe6;
      --stroke: #fff;
      --border-hover: var(--bim-ui_main-base);
      --border-active: var(--bim-ui_main-base);
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
      width: 100%;
      height: 1.75rem;
      column-gap: 0.25rem;
      position: relative;
      cursor: pointer;
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
    }

    :host([inverted]) .parent-label {
      flex-direction: row-reverse;
      justify-content: start;
    }

    input,
    svg {
      width: 1rem;
      height: 1rem;
      display: block;
    }

    input {
      -webkit-appearance: none;
      -moz-appearance: none;
      position: relative;
      outline: none;
      background: var(--background);
      border: none;
      margin: 0;
      padding: 0;
      cursor: pointer;
      border-radius: 4px;
      transition: box-shadow 0.3s;
      box-shadow: inset 0 0 0 var(--s, 1px) var(--b, var(--border));
    }

    svg {
      pointer-events: none;
      fill: none;
      stroke-width: 2.2px;
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke: var(--stroke, var(--border-active));
      transform: translateY(-100%) scale(0);
      position: absolute;
      width: 1rem;
      height: 1rem;
    }

    input:hover {
      --s: 2px;
      --b: var(--border-hover);
    }

    input:checked {
      --b: var(--border-active);
      --s: 11px;
    }

    input:checked + svg {
      -webkit-animation: bounce 0.4s linear forwards 0.2s;
      animation: bounce 0.4s linear forwards 0.2s;
    }

    @keyframes bounce {
      0% {
        transform: translateY(-100%) scale(0);
      }
      50% {
        transform: translateY(-100%) scale(1.2);
      }
      75% {
        transform: translateY(-100%) scale(0.9);
      }
      100% {
        transform: translateY(-100%) scale(1);
      }
    }
  `;
let pt = Li;
me([
  d({ type: String, reflect: !0 })
], pt.prototype, "icon");
me([
  d({ type: String, reflect: !0 })
], pt.prototype, "name");
me([
  d({ type: String, reflect: !0 })
], pt.prototype, "label");
me([
  d({ type: Boolean, reflect: !0 })
], pt.prototype, "checked");
me([
  d({ type: Boolean, reflect: !0 })
], pt.prototype, "inverted");
var wa = Object.defineProperty, Tt = (i, t, e, n) => {
  for (var s = void 0, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = o(t, e, s) || s);
  return s && wa(t, e, s), s;
};
const Ri = class Ri extends C {
  constructor() {
    super(...arguments), this.vertical = !1, this.color = "#bcf124", this.disabled = !1, this._colorInput = Ft(), this._textInput = Ft(), this.onValueChange = new Event("input"), this.onOpacityInput = (t) => {
      const e = t.target;
      this.opacity = e.value, this.dispatchEvent(this.onValueChange);
    };
  }
  /**
   * Represents both the color and opacity values combined into a single object. This is an instance property, not an HTMLElement attribute.
   * @type {Object}
   * @example
   * const colorInput = document.createElement('bim-color-input');
   * colorInput.value = { color: '#ff0000', opacity: 0.5 };
   */
  set value(t) {
    const { color: e, opacity: n } = t;
    this.color = e, n && (this.opacity = n);
  }
  get value() {
    const t = {
      color: this.color
    };
    return this.opacity && (t.opacity = this.opacity), t;
  }
  onColorInput(t) {
    t.stopPropagation();
    const { value: e } = this._colorInput;
    e && (this.color = e.value, this.dispatchEvent(this.onValueChange));
  }
  onTextInput(t) {
    t.stopPropagation();
    const { value: e } = this._textInput;
    if (!e)
      return;
    const { value: n } = e;
    let s = n.replace(/[^a-fA-F0-9]/g, "");
    s.startsWith("#") || (s = `#${s}`), e.value = s.slice(0, 7), e.value.length === 7 && (this.color = e.value, this.dispatchEvent(this.onValueChange));
  }
  /**
   * Focuses on the color input by programmatically triggering a click event on the underlying color input element.
   * If the color input element is not available, the function does nothing.
   */
  focus() {
    const { value: t } = this._colorInput;
    t && t.click();
  }
  render() {
    return m`
      <div class="parent">
        <bim-input
          .label=${this.label}
          .icon=${this.icon}
          .vertical="${this.vertical}"
        >
          <div class="color-container">
            <div
              style="display: flex; align-items: center; gap: .375rem; height: 100%; flex: 1; padding: 0 0.5rem;"
            >
              <input
                ${Nt(this._colorInput)}
                @input="${this.onColorInput}"
                type="color"
                aria-label=${this.label || this.name || "Color Input"}
                value="${this.color}"
                ?disabled=${this.disabled}
              />
              <div
                @click=${this.focus}
                class="sample"
                style="background-color: ${this.color}"
              ></div>
              <input
                ${Nt(this._textInput)}
                @input="${this.onTextInput}"
                value="${this.color}"
                type="text"
                aria-label=${this.label || this.name || "Text Color Input"}
                ?disabled=${this.disabled}
              />
            </div>
            ${this.opacity !== void 0 ? m`<bim-number-input
                  @change=${this.onOpacityInput}
                  slider
                  suffix="%"
                  min="0"
                  value=${this.opacity}
                  max="100"
                ></bim-number-input>` : null}
          </div>
        </bim-input>
      </div>
    `;
  }
};
Ri.styles = S`
    :host {
      --bim-input--bgc: var(--bim-ui_bg-contrast-20);
      flex: 1;
      display: block;
    }

    :host(:focus) {
      --bim-input--olw: var(--bim-number-input--olw, 2px);
      --bim-input--olc: var(--bim-ui_accent-base);
    }

    .parent {
      display: flex;
      gap: 0.375rem;
    }

    .color-container {
      position: relative;
      outline: none;
      display: flex;
      height: 100%;
      gap: 0.5rem;
      justify-content: flex-start;
      align-items: center;
      flex: 1;
      border-radius: var(--bim-color-input--bdrs, var(--bim-ui_size-4xs));
    }

    .color-container input[type="color"] {
      position: absolute;
      bottom: -0.25rem;
      visibility: hidden;
      width: 0;
      height: 0;
    }

    .color-container .sample {
      width: 1rem;
      height: 1rem;
      border-radius: 0.125rem;
      background-color: #fff;
    }

    .color-container input[type="text"] {
      height: 100%;
      flex: 1;
      width: 3.25rem;
      text-transform: uppercase;
      font-size: 0.75rem;
      background-color: transparent;
      padding: 0%;
      outline: none;
      border: none;
      color: var(--bim-color-input--c, var(--bim-ui_bg-contrast-100));
    }

    :host([disabled]) .color-container input[type="text"] {
      color: var(--bim-ui_bg-contrast-60);
    }

    bim-number-input {
      flex-grow: 0;
    }
  `;
let J = Ri;
Tt([
  d({ type: String, reflect: !0 })
], J.prototype, "name");
Tt([
  d({ type: String, reflect: !0 })
], J.prototype, "label");
Tt([
  d({ type: String, reflect: !0 })
], J.prototype, "icon");
Tt([
  d({ type: Boolean, reflect: !0 })
], J.prototype, "vertical");
Tt([
  d({ type: Number, reflect: !0 })
], J.prototype, "opacity");
Tt([
  d({ type: String, reflect: !0 })
], J.prototype, "color");
Tt([
  d({ type: Boolean, reflect: !0 })
], J.prototype, "disabled");
var xa = Object.defineProperty, $a = Object.getOwnPropertyDescriptor, wt = (i, t, e, n) => {
  for (var s = n > 1 ? void 0 : n ? $a(t, e) : t, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = (n ? o(t, e, s) : o(s)) || s);
  return n && s && xa(t, e, s), s;
};
const zi = class zi extends C {
  constructor() {
    super(...arguments), this.checked = !1, this.checkbox = !1, this.noMark = !1, this.vertical = !1;
  }
  get value() {
    return this._value !== void 0 ? this._value : this.label ? We(this.label) : this.label;
  }
  set value(t) {
    this._value = t;
  }
  render() {
    return m`
      <div class="parent" .title=${this.label ?? ""}>
        ${this.img || this.icon || this.label ? m` <div style="display: flex; column-gap: 0.375rem">
              ${this.checkbox && !this.noMark ? m`<bim-checkbox
                    style="pointer-events: none"
                    .checked=${this.checked}
                  ></bim-checkbox>` : null}
              <bim-label
                .vertical=${this.vertical}
                .icon=${this.icon}
                .img=${this.img}
                >${this.label}</bim-label
              >
            </div>` : null}
        ${!this.checkbox && !this.noMark && this.checked ? m`<svg
              xmlns="http://www.w3.org/2000/svg"
              height="1.125rem"
              viewBox="0 0 24 24"
              width="1.125rem"
              fill="#FFFFFF"
            >
              <path d="M0 0h24v24H0z" fill="none" />
              <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z" />
            </svg>` : null}
        <slot></slot>
      </div>
    `;
  }
};
zi.styles = S`
    :host {
      --bim-label--c: var(--bim-ui_bg-contrast-100);
      display: block;
      box-sizing: border-box;
      flex: 1;
      padding: 0rem 0.5rem;
      border-radius: var(--bim-ui_size-4xs);
      transition: all 0.15s;
    }

    :host(:hover) {
      cursor: pointer;
    }

    :host([checked]) {
      --bim-label--c: color-mix(in lab, var(--bim-ui_main-base), white 30%);
    }

    :host([checked]) svg {
      fill: color-mix(in lab, var(--bim-ui_main-base), white 30%);
    }

    .parent {
      box-sizing: border-box;
      display: flex;
      justify-content: var(--bim-option--jc, space-between);
      column-gap: 0.5rem;
      align-items: center;
      min-height: 1.75rem;
      height: 100%;
    }

    input {
      height: 1rem;
      width: 1rem;
      cursor: pointer;
      border: none;
      outline: none;
      accent-color: var(--bim-checkbox--c, var(--bim-ui_main-base));
    }

    input:focus {
      outline: var(--bim-checkbox--olw, 2px) solid
        var(--bim-checkbox--olc, var(--bim-ui_accent-base));
    }

    bim-label {
      pointer-events: none;
      z-index: 1;
    }
  `;
let T = zi;
wt([
  d({ type: String, reflect: !0 })
], T.prototype, "img", 2);
wt([
  d({ type: String, reflect: !0 })
], T.prototype, "label", 2);
wt([
  d({ type: String, reflect: !0 })
], T.prototype, "icon", 2);
wt([
  d({ type: Boolean, reflect: !0 })
], T.prototype, "checked", 2);
wt([
  d({ type: Boolean, reflect: !0 })
], T.prototype, "checkbox", 2);
wt([
  d({ type: Boolean, attribute: "no-mark", reflect: !0 })
], T.prototype, "noMark", 2);
wt([
  d({
    converter: {
      fromAttribute(i) {
        return i && We(i);
      }
    }
  })
], T.prototype, "value", 1);
wt([
  d({ type: Boolean, reflect: !0 })
], T.prototype, "vertical", 2);
var Ca = Object.defineProperty, Aa = Object.getOwnPropertyDescriptor, st = (i, t, e, n) => {
  for (var s = n > 1 ? void 0 : n ? Aa(t, e) : t, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = (n ? o(t, e, s) : o(s)) || s);
  return n && s && Ca(t, e, s), s;
};
const Bi = class Bi extends Le {
  constructor() {
    super(), this.multiple = !1, this.required = !1, this.vertical = !1, this._visible = !1, this._value = /* @__PURE__ */ new Set(), this.onValueChange = new Event("change"), this._contextMenu = Ft(), this.onOptionClick = (t) => {
      const e = t.target, n = this._value.has(e);
      if (!this.multiple && !this.required && !n)
        this._value = /* @__PURE__ */ new Set([e]);
      else if (!this.multiple && !this.required && n)
        this._value = /* @__PURE__ */ new Set([]);
      else if (!this.multiple && this.required && !n)
        this._value = /* @__PURE__ */ new Set([e]);
      else if (this.multiple && !this.required && !n)
        this._value = /* @__PURE__ */ new Set([...this._value, e]);
      else if (this.multiple && !this.required && n) {
        const s = [...this._value].filter((r) => r !== e);
        this._value = new Set(s);
      } else if (this.multiple && this.required && !n)
        this._value = /* @__PURE__ */ new Set([...this._value, e]);
      else if (this.multiple && this.required && n) {
        const s = [...this._value].filter((o) => o !== e), r = new Set(s);
        r.size !== 0 && (this._value = r);
      }
      this.updateOptionsState(), this.dispatchEvent(this.onValueChange);
    }, this.useObserver = !0;
  }
  set visible(t) {
    if (t) {
      const { value: e } = this._contextMenu;
      if (!e)
        return;
      for (const n of this.elements)
        e.append(n);
      this._visible = !0;
    } else {
      for (const e of this.elements)
        this.append(e);
      this._visible = !1, this.resetVisibleElements();
    }
  }
  get visible() {
    return this._visible;
  }
  /**
   * The selected values in the dropdown.
   * @type {any[]}
   * @example
   * const dropdown = document.createElement('bim-dropdown');
   * dropdown.value = ['option1', 'option2'];
   */
  set value(t) {
    if (this.required && Object.keys(t).length === 0)
      return;
    const e = /* @__PURE__ */ new Set();
    for (const n of t) {
      const s = this.findOption(n);
      if (s && (e.add(s), !this.multiple && Object.keys(t).length === 1))
        break;
    }
    this._value = e, this.updateOptionsState(), this.dispatchEvent(this.onValueChange);
  }
  get value() {
    return [...this._value].filter(
      (e) => e instanceof T && e.checked
    ).map((e) => e.value);
  }
  get _options() {
    const t = /* @__PURE__ */ new Set([...this.elements]);
    for (const e of this.children)
      e instanceof T && t.add(e);
    return [...t];
  }
  onSlotChange(t) {
    const e = t.target.assignedElements();
    this.observe(e);
    const n = /* @__PURE__ */ new Set();
    for (const s of this.elements) {
      if (!(s instanceof T)) {
        s.remove();
        continue;
      }
      s.checked && n.add(s), s.removeEventListener("click", this.onOptionClick), s.addEventListener("click", this.onOptionClick);
    }
    this._value = n;
  }
  updateOptionsState() {
    for (const t of this._options)
      t instanceof T && (t.checked = this._value.has(t));
  }
  findOption(t) {
    return this._options.find((n) => n instanceof T ? n.label === t || n.value === t : !1);
  }
  render() {
    let t, e, n;
    if (this._value.size === 0)
      t = this.placeholder ?? "Select an option...";
    else if (this._value.size === 1) {
      const s = [...this._value][0];
      t = (s == null ? void 0 : s.label) || (s == null ? void 0 : s.value), e = s == null ? void 0 : s.img, n = s == null ? void 0 : s.icon;
    } else
      t = `Multiple (${this._value.size})`;
    return m`
      <bim-input
        title=${this.label ?? ""}
        .label=${this.label}
        .icon=${this.icon}
        .vertical=${this.vertical}
      >
        <div class="input" @click=${() => this.visible = !this.visible}>
          <bim-label
            .img=${e}
            .icon=${n}
            style="overflow: hidden;"
            >${t}</bim-label
          >
          <svg
            style="flex-shrink: 0; fill: var(--bim-dropdown--c, var(--bim-ui_bg-contrast-100))"
            xmlns="http://www.w3.org/2000/svg"
            height="1.125rem"
            viewBox="0 0 24 24"
            width="1.125rem"
            fill="#9ca3af"
          >
            <path d="M0 0h24v24H0V0z" fill="none" />
            <path d="M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z" />
          </svg>
          <bim-context-menu
            ${Nt(this._contextMenu)}
            .visible=${this.visible}
            @hidden=${() => {
      this.visible && (this.visible = !1);
    }}
          >
            <slot @slotchange=${this.onSlotChange}></slot>
          </bim-context-menu>
        </div>
      </bim-input>
    `;
  }
};
Bi.styles = [
  _t.scrollbar,
  S`
      :host {
        --bim-input--bgc: var(
          --bim-dropdown--bgc,
          var(--bim-ui_bg-contrast-20)
        );
        --bim-input--olw: 2px;
        --bim-input--olc: transparent;
        --bim-input--bdrs: var(--bim-ui_size-4xs);
        flex: 1;
        display: block;
      }

      :host([visible]) {
        --bim-input--olc: var(--bim-ui_accent-base);
      }

      .input {
        --bim-label--fz: var(--bim-drodown--fz, var(--bim-ui_size-xs));
        --bim-label--c: var(--bim-dropdown--c, var(--bim-ui_bg-contrast-100));
        height: 100%;
        display: flex;
        flex: 1;
        overflow: hidden;
        column-gap: 0.25rem;
        outline: none;
        cursor: pointer;
        align-items: center;
        justify-content: space-between;
        padding: 0 0.5rem;
      }

      bim-label {
        pointer-events: none;
      }
    `
];
let D = Bi;
st([
  d({ type: String, reflect: !0 })
], D.prototype, "name", 2);
st([
  d({ type: String, reflect: !0 })
], D.prototype, "icon", 2);
st([
  d({ type: String, reflect: !0 })
], D.prototype, "label", 2);
st([
  d({ type: Boolean, reflect: !0 })
], D.prototype, "multiple", 2);
st([
  d({ type: Boolean, reflect: !0 })
], D.prototype, "required", 2);
st([
  d({ type: Boolean, reflect: !0 })
], D.prototype, "vertical", 2);
st([
  d({ type: String, reflect: !0 })
], D.prototype, "placeholder", 2);
st([
  d({ type: Boolean, reflect: !0 })
], D.prototype, "visible", 1);
st([
  Ut()
], D.prototype, "_value", 2);
var Sa = Object.defineProperty, Fs = (i, t, e, n) => {
  for (var s = void 0, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = o(t, e, s) || s);
  return s && Sa(t, e, s), s;
};
const Mi = class Mi extends C {
  constructor() {
    super(...arguments), this.floating = !1, this._layouts = {}, this._elements = {}, this._templateIds = /* @__PURE__ */ new Map(), this._updateFunctions = {}, this.updateComponent = {};
  }
  /**
   * Represents a collection of predefined grid layouts for the Grid component.
   * Each layout is defined by a unique name, a grid template string, and a map of area names to HTMLElement instances or
   * Statefull/Stateless component definitions.
   * The grid template string defines the structure of the grid, and the area names correspond to the grid-area property of the HTMLElement instances.
   * The HTMLElement instances are used to populate the grid with content.
   * @remarks Once defined, the layout is meant to be immutable.
   */
  set layouts(t) {
    this._layouts = t, this._templateIds.clear();
  }
  get layouts() {
    return this._layouts;
  }
  set elements(t) {
    this._elements = t;
    const e = {};
    for (const [n, s] of Object.entries(this.elements))
      "template" in s && (e[n] = (r) => {
        const o = this._updateFunctions[n];
        o && o(r);
      });
    this.updateComponent = e;
  }
  get elements() {
    return this._elements;
  }
  // private isVerticalArea(area: string) {
  //   const { rows } = this;
  //   const row = rows.find((row) => row.includes(area));
  //   if (!row)
  //     throw new Error(
  //       `${area} wasn't defined in the grid-template of this bim-grid`,
  //     );
  //   const index = rows.indexOf(row);
  //   const abovePanel = index > 0 && rows[index - 1].includes(area);
  //   const belowPanel =
  //     index < rows.length - 1 && rows[index + 1].includes(area);
  //   return abovePanel || belowPanel;
  // }
  getLayoutAreas(t) {
    const { template: e } = t, r = e.split(`
`).map((l) => l.trim()).map((l) => l.split('"')[1]).filter((l) => l !== void 0).flatMap((l) => l.split(/\s+/));
    return [...new Set(r)].filter((l) => l !== "");
  }
  firstUpdated() {
    this._onLayoutChange = new Event("layoutchange");
  }
  getTemplateId(t) {
    let e = this._templateIds.get(t);
    return e || (e = le.newRandomId(), this._templateIds.set(t, e)), e;
  }
  cleanUpdateFunctions() {
    if (!this.layout) {
      this._updateFunctions = {};
      return;
    }
    const t = this.layouts[this.layout], e = this.getLayoutAreas(t);
    for (const n in this.elements)
      e.includes(n) || delete this._updateFunctions[n];
  }
  render() {
    if (this.layout) {
      if (this.layouts[this.layout]) {
        const t = this.layouts[this.layout], n = this.getLayoutAreas(t).map((s) => {
          var c;
          const r = ((c = t.elements) == null ? void 0 : c[s]) || this.elements[s];
          if (!r)
            return null;
          if (r instanceof HTMLElement)
            return r.style.gridArea = s, r;
          if ("template" in r) {
            const { template: u, initialState: h } = r, p = this.getTemplateId(u), f = this.querySelector(
              `[data-grid-template-id="${p}"]`
            );
            if (f)
              return f;
            const [g, v] = Le.create(u, h);
            return g.setAttribute("data-grid-template-id", p), g.style.gridArea = s, this._updateFunctions[s] = v, g;
          }
          const o = this.getTemplateId(r), l = this.querySelector(
            `[data-grid-template-id="${o}"]`
          );
          if (l)
            return l;
          const a = Le.create(r);
          return a.setAttribute(
            "data-grid-template-id",
            this.getTemplateId(r)
          ), a.style.gridArea = s, a;
        }).filter((s) => s !== null);
        this.innerHTML = "", this.style.gridTemplate = t.template, this.append(...n), this._onLayoutChange && this.dispatchEvent(this._onLayoutChange);
      }
    } else
      this.innerHTML = "", this.style.gridTemplate = "", this._onLayoutChange && this.dispatchEvent(this._onLayoutChange);
    return this.cleanUpdateFunctions(), m`<slot></slot>`;
  }
};
Mi.styles = S`
    :host {
      display: grid;
      height: 100%;
      width: 100%;
      overflow: hidden;
      box-sizing: border-box;
    }

    /* :host(:not([layout])) {
      display: none;
    } */

    :host([floating]) {
      --bim-panel--bdrs: var(--bim-ui_size-4xs);
      background-color: transparent;
      padding: 1rem;
      gap: 1rem;
      position: absolute;
      pointer-events: none;
      top: 0px;
      left: 0px;
    }

    :host(:not([floating])) {
      --bim-panel--bdrs: 0;
      background-color: var(--bim-ui_bg-contrast-20);
      gap: 1px;
    }
  `;
let ce = Mi;
Fs([
  d({ type: Boolean, reflect: !0 })
], ce.prototype, "floating");
Fs([
  d({ type: String, reflect: !0 })
], ce.prototype, "layout");
const je = class je extends C {
  render() {
    return m`
      <iconify-icon .icon=${this.icon} height="none"></iconify-icon>
    `;
  }
};
je.styles = S`
    :host {
      height: var(--bim-icon--fz, var(--bim-ui_size-sm));
      width: var(--bim-icon--fz, var(--bim-ui_size-sm));
    }

    iconify-icon {
      height: var(--bim-icon--fz, var(--bim-ui_size-sm));
      width: var(--bim-icon--fz, var(--bim-ui_size-sm));
      color: var(--bim-icon--c);
      transition: all 0.15s;
      display: flex;
    }
  `, je.properties = {
  icon: { type: String }
};
let gi = je;
var Ea = Object.defineProperty, Ye = (i, t, e, n) => {
  for (var s = void 0, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = o(t, e, s) || s);
  return s && Ea(t, e, s), s;
};
const ji = class ji extends C {
  constructor() {
    super(...arguments), this.vertical = !1, this.onValueChange = new Event("change");
  }
  get value() {
    const t = {};
    for (const e of this.children) {
      const n = e;
      "value" in n ? t[n.name || n.label] = n.value : "checked" in n && (t[n.name || n.label] = n.checked);
    }
    return t;
  }
  set value(t) {
    const e = [...this.children];
    for (const n in t) {
      const s = e.find((l) => {
        const a = l;
        return a.name === n || a.label === n;
      });
      if (!s)
        continue;
      const r = s, o = t[n];
      typeof o == "boolean" ? r.checked = o : r.value = o;
    }
  }
  render() {
    return m`
      <div class="parent">
        ${this.label || this.icon ? m`<bim-label .icon=${this.icon}>${this.label}</bim-label>` : null}
        <div class="input">
          <slot></slot>
        </div>
      </div>
    `;
  }
};
ji.styles = S`
    :host {
      flex: 1;
      display: block;
    }

    .parent {
      display: flex;
      flex-wrap: wrap;
      column-gap: 1rem;
      row-gap: 0.375rem;
      user-select: none;
      flex: 1;
    }

    :host(:not([vertical])) .parent {
      justify-content: space-between;
    }

    :host([vertical]) .parent {
      flex-direction: column;
    }

    .input {
      position: relative;
      overflow: hidden;
      box-sizing: border-box;
      display: flex;
      align-items: center;
      flex-wrap: wrap;
      min-height: 1.75rem;
      min-width: 3rem;
      gap: var(--bim-input--g, var(--bim-ui_size-4xs));
      padding: var(--bim-input--p, 0);
      background-color: var(--bim-input--bgc, transparent);
      border: var(--bim-input--olw, 2px) solid
        var(--bim-input--olc, transparent);
      border-radius: var(--bim-input--bdrs, var(--bim-ui_size-4xs));
      transition: all 0.15s;
    }

    :host(:not([vertical])) .input {
      flex: 1;
      justify-content: flex-end;
    }

    :host(:not([vertical])[label]) .input {
      max-width: fit-content;
    }
  `;
let Ot = ji;
Ye([
  d({ type: String, reflect: !0 })
], Ot.prototype, "name");
Ye([
  d({ type: String, reflect: !0 })
], Ot.prototype, "label");
Ye([
  d({ type: String, reflect: !0 })
], Ot.prototype, "icon");
Ye([
  d({ type: Boolean, reflect: !0 })
], Ot.prototype, "vertical");
var ka = Object.defineProperty, be = (i, t, e, n) => {
  for (var s = void 0, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = o(t, e, s) || s);
  return s && ka(t, e, s), s;
};
const Hi = class Hi extends C {
  constructor() {
    super(...arguments), this.labelHidden = !1, this.iconHidden = !1, this.vertical = !1;
  }
  get value() {
    return this.textContent ? We(this.textContent) : this.textContent;
  }
  render() {
    return m`
      <div class="parent" .title=${this.textContent ?? ""}>
        ${this.img ? m`<img .src=${this.img} .alt=${this.textContent || ""} />` : null}
        ${!this.iconHidden && this.icon ? m`<bim-icon .icon=${this.icon}></bim-icon>` : null}
        <p><slot></slot></p>
      </div>
    `;
  }
};
Hi.styles = S`
    :host {
      --bim-icon--c: var(--bim-label--ic);
      overflow: auto;
      color: var(--bim-label--c, var(--bim-ui_bg-contrast-60));
      font-size: var(--bim-label--fz, var(--bim-ui_size-xs));
      display: block;
      white-space: nowrap;
      transition: all 0.15s;
    }

    :host([icon]) {
      line-height: 1.1rem;
    }

    .parent {
      display: flex;
      align-items: center;
      column-gap: 0.25rem;
      row-gap: 0.125rem;
      user-select: none;
      height: 100%;
    }

    :host([vertical]) .parent {
      flex-direction: column;
    }

    .parent p {
      display: flex;
      margin: 0;
      text-overflow: ellipsis;
      overflow: hidden;
      align-items: center;
      gap: 0.125rem;
    }

    :host([label-hidden]) .parent p,
    :host(:empty) .parent p {
      display: none;
    }

    img {
      height: 100%;
      aspect-ratio: 1;
      border-radius: 100%;
      margin-right: 0.125rem;
    }

    :host(:not([vertical])) img {
      max-height: var(
        --bim-label_icon--sz,
        calc(var(--bim-label--fz, var(--bim-ui_size-xs)) * 1.8)
      );
    }

    :host([vertical]) img {
      max-height: var(
        --bim-label_icon--sz,
        calc(var(--bim-label--fz, var(--bim-ui_size-xs)) * 4)
      );
    }
  `;
let ft = Hi;
be([
  d({ type: String, reflect: !0 })
], ft.prototype, "img");
be([
  d({ type: Boolean, attribute: "label-hidden", reflect: !0 })
], ft.prototype, "labelHidden");
be([
  d({ type: String, reflect: !0 })
], ft.prototype, "icon");
be([
  d({ type: Boolean, attribute: "icon-hidden", reflect: !0 })
], ft.prototype, "iconHidden");
be([
  d({ type: Boolean, reflect: !0 })
], ft.prototype, "vertical");
var Pa = Object.defineProperty, Oa = Object.getOwnPropertyDescriptor, N = (i, t, e, n) => {
  for (var s = n > 1 ? void 0 : n ? Oa(t, e) : t, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = (n ? o(t, e, s) : o(s)) || s);
  return n && s && Pa(t, e, s), s;
};
const Di = class Di extends C {
  constructor() {
    super(...arguments), this._value = 0, this.vertical = !1, this.slider = !1, this._input = Ft(), this.onValueChange = new Event("change");
  }
  set value(t) {
    this.setValue(t.toString());
  }
  get value() {
    return this._value;
  }
  onChange(t) {
    t.stopPropagation();
    const { value: e } = this._input;
    e && this.setValue(e.value);
  }
  setValue(t) {
    const { value: e } = this._input;
    let n = t;
    if (n = n.replace(/[^0-9.-]/g, ""), n = n.replace(/(\..*)\./g, "$1"), n.endsWith(".") || (n.lastIndexOf("-") > 0 && (n = n[0] + n.substring(1).replace(/-/g, "")), n === "-" || n === "-0"))
      return;
    let s = Number(n);
    Number.isNaN(s) || (s = this.min !== void 0 ? Math.max(s, this.min) : s, s = this.max !== void 0 ? Math.min(s, this.max) : s, this.value !== s && (this._value = s, e && (e.value = this.value.toString()), this.requestUpdate(), this.dispatchEvent(this.onValueChange)));
  }
  onBlur() {
    const { value: t } = this._input;
    t && Number.isNaN(Number(t.value)) && (t.value = this.value.toString());
  }
  onSliderMouseDown(t) {
    document.body.style.cursor = "w-resize";
    const { clientX: e } = t, n = this.value;
    let s = !1;
    const r = (a) => {
      var v;
      s = !0;
      const { clientX: c } = a, u = this.step ?? 1, h = ((v = u.toString().split(".")[1]) == null ? void 0 : v.length) || 0, p = 1 / (this.sensitivity ?? 1), f = (c - e) / p;
      if (Math.floor(Math.abs(f)) !== Math.abs(f))
        return;
      const g = n + f * u;
      this.setValue(g.toFixed(h));
    }, o = () => {
      this.slider = !0, this.removeEventListener("blur", o);
    }, l = () => {
      document.removeEventListener("mousemove", r), document.body.style.cursor = "default", s ? s = !1 : (this.addEventListener("blur", o), this.slider = !1, requestAnimationFrame(() => this.focus())), document.removeEventListener("mouseup", l);
    };
    document.addEventListener("mousemove", r), document.addEventListener("mouseup", l);
  }
  onFocus(t) {
    t.stopPropagation();
    const e = (n) => {
      n.key === "Escape" && (this.blur(), window.removeEventListener("keydown", e));
    };
    window.addEventListener("keydown", e);
  }
  connectedCallback() {
    super.connectedCallback(), this.min && this.min > this.value && (this._value = this.min), this.max && this.max < this.value && (this._value = this.max);
  }
  /**
   * Sets focus to the input element of the number input component.
   * This method is useful for programmatically focusing the input element, for example,
   * in response to a user action or to emphasize the input in the UI.
   *
   * If the input element reference is not available (not yet rendered or disconnected),
   * this method will do nothing.
   */
  focus() {
    const { value: t } = this._input;
    t && t.focus();
  }
  render() {
    const t = m`
      ${this.pref || this.icon ? m`<bim-label
            style="pointer-events: auto"
            @mousedown=${this.onSliderMouseDown}
            .icon=${this.icon}
            >${this.pref}</bim-label
          >` : null}
      <input
        ${Nt(this._input)}
        type="text"
        aria-label=${this.label || this.name || "Number Input"}
        size="1"
        @input=${(l) => l.stopPropagation()}
        @change=${this.onChange}
        @blur=${this.onBlur}
        @focus=${this.onFocus}
        .value=${this.value.toString()}
      />
      ${this.suffix ? m`<bim-label
            style="pointer-events: auto"
            @mousedown=${this.onSliderMouseDown}
            >${this.suffix}</bim-label
          >` : null}
    `, e = this.min ?? -1 / 0, n = this.max ?? 1 / 0, s = 100 * (this.value - e) / (n - e), r = m`
      <style>
        .slider-indicator {
          width: ${`${s}%`};
        }
      </style>
      <div class="slider" @mousedown=${this.onSliderMouseDown}>
        <div class="slider-indicator"></div>
        ${this.pref || this.icon ? m`<bim-label
              style="z-index: 1; margin-right: 0.125rem"
              .icon=${this.icon}
              >${`${this.pref}: `}</bim-label
            >` : null}
        <bim-label style="z-index: 1;">${this.value}</bim-label>
        ${this.suffix ? m`<bim-label style="z-index: 1;">${this.suffix}</bim-label>` : null}
      </div>
    `, o = `${this.label || this.name || this.pref ? `${this.label || this.name || this.pref}: ` : ""}${this.value}${this.suffix ?? ""}`;
    return m`
      <bim-input
        title=${o}
        .label=${this.label}
        .icon=${this.icon}
        .vertical=${this.vertical}
      >
        ${this.slider ? r : t}
      </bim-input>
    `;
  }
};
Di.styles = S`
    :host {
      --bim-input--bgc: var(
        --bim-number-input--bgc,
        var(--bim-ui_bg-contrast-20)
      );
      --bim-input--olw: var(--bim-number-input--olw, 2px);
      --bim-input--olc: var(--bim-number-input--olc, transparent);
      --bim-input--bdrs: var(--bim-number-input--bdrs, var(--bim-ui_size-4xs));
      --bim-input--p: 0 0.375rem;
      flex: 1;
      display: block;
    }

    :host(:focus) {
      --bim-input--olw: var(--bim-number-input--olw, 2px);
      --bim-input--olc: var(
        --bim-number-input¡focus--c,
        var(--bim-ui_accent-base)
      );
    }

    :host(:not([slider])) bim-label {
      --bim-label--c: var(
        --bim-number-input_affixes--c,
        var(--bim-ui_bg-contrast-60)
      );
      --bim-label--fz: var(
        --bim-number-input_affixes--fz,
        var(--bim-ui_size-xs)
      );
    }

    p {
      margin: 0;
      padding: 0;
    }

    input {
      background-color: transparent;
      outline: none;
      border: none;
      padding: 0;
      flex-grow: 1;
      text-align: right;
      font-family: inherit;
      font-feature-settings: inherit;
      font-variation-settings: inherit;
      font-size: var(--bim-number-input--fz, var(--bim-ui_size-xs));
      color: var(--bim-number-input--c, var(--bim-ui_bg-contrast-100));
    }

    :host([suffix]:not([pref])) input {
      text-align: left;
    }

    :host([slider]) {
      --bim-input--p: 0;
    }

    :host([slider]) .slider {
      --bim-label--c: var(--bim-ui_bg-contrast-100);
    }

    .slider {
      position: relative;
      display: flex;
      justify-content: center;
      width: 100%;
      height: 100%;
      padding: 0 0.5rem;
    }

    .slider-indicator {
      height: 100%;
      background-color: var(--bim-ui_main-base);
      position: absolute;
      top: 0;
      left: 0;
      border-radius: var(--bim-input--bdrs, var(--bim-ui_size-4xs));
    }

    bim-input {
      display: flex;
    }

    bim-label {
      pointer-events: none;
    }
  `;
let R = Di;
N([
  d({ type: String, reflect: !0 })
], R.prototype, "name", 2);
N([
  d({ type: String, reflect: !0 })
], R.prototype, "icon", 2);
N([
  d({ type: String, reflect: !0 })
], R.prototype, "label", 2);
N([
  d({ type: String, reflect: !0 })
], R.prototype, "pref", 2);
N([
  d({ type: Number, reflect: !0 })
], R.prototype, "min", 2);
N([
  d({ type: Number, reflect: !0 })
], R.prototype, "value", 1);
N([
  d({ type: Number, reflect: !0 })
], R.prototype, "step", 2);
N([
  d({ type: Number, reflect: !0 })
], R.prototype, "sensitivity", 2);
N([
  d({ type: Number, reflect: !0 })
], R.prototype, "max", 2);
N([
  d({ type: String, reflect: !0 })
], R.prototype, "suffix", 2);
N([
  d({ type: Boolean, reflect: !0 })
], R.prototype, "vertical", 2);
N([
  d({ type: Boolean, reflect: !0 })
], R.prototype, "slider", 2);
var Ta = Object.defineProperty, Ia = Object.getOwnPropertyDescriptor, ge = (i, t, e, n) => {
  for (var s = n > 1 ? void 0 : n ? Ia(t, e) : t, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = (n ? o(t, e, s) : o(s)) || s);
  return n && s && Ta(t, e, s), s;
};
const Fi = class Fi extends C {
  constructor() {
    super(...arguments), this.onValueChange = new Event("change"), this._hidden = !1, this.headerHidden = !1, this.valueTransform = {}, this.activationButton = document.createElement("bim-button");
  }
  set hidden(t) {
    this._hidden = t, this.activationButton.active = !t, this.dispatchEvent(new Event("hiddenchange"));
  }
  get hidden() {
    return this._hidden;
  }
  /**
   * The `value` getter computes and returns the current state of the panel's form elements as an object. This property is dynamic and reflects the current input values within the panel. When accessed, it traverses the panel's child elements, collecting values from those that have a `name` or `label` attribute, and constructs an object where each key corresponds to the `name` or `label` of the element, and the value is the element's value. This property is particularly useful for forms or interactive panels where the user's input needs to be retrieved programmatically. The value returned is a snapshot of the panel's state at the time of access, and it does not maintain a live link to the input elements.
   *
   * @default {}
   * @example <bim-panel></bim-panel> <!-- Access via JavaScript to get value -->
   * @example
   * const panel = document.createElement('bim-panel');
   * document.body.appendChild(panel);
   * console.log(panel.value); // Logs the current value object of the panel
   */
  get value() {
    return Re(this, this.valueTransform);
  }
  /**
   * The `value` setter allows programmatically updating the values of the panel's form elements. When a data object is passed to this property, it attempts to match the object's keys with the `name` or `label` attributes of the panel's child elements. If a match is found, the corresponding element's value is updated to the value associated with the key in the data object. This property is useful for initializing the panel with specific data or updating its state based on external inputs. Note that this operation does not affect elements without a matching `name` or `label`, and it only updates the values of elements that are direct children of the panel.
   *
   * @type {Record<string, any>}
   * @example <bim-panel></bim-panel> <!-- Set value via JavaScript -->
   * @example
   * const panel = document.createElement('bim-panel');
   * document.body.appendChild(panel);
   * panel.value = { 'input-name': 'John Doe', 'checkbox-name': true };
   */
  set value(t) {
    const e = [...this.children];
    for (const n in t) {
      const s = e.find((o) => {
        const l = o;
        return l.name === n || l.label === n;
      });
      if (!s)
        continue;
      const r = s;
      r.value = t[n];
    }
  }
  animatePanles() {
    const t = [
      {
        maxHeight: "100vh",
        maxWidth: "100vw",
        opacity: 1
      },
      {
        maxHeight: "100vh",
        maxWidth: "100vw",
        opacity: 0
      },
      {
        maxHeight: 0,
        maxWidth: 0,
        opacity: 0
      }
    ];
    this.animate(t, {
      duration: 300,
      easing: "cubic-bezier(0.65, 0.05, 0.36, 1)",
      direction: this.hidden ? "normal" : "reverse",
      fill: "forwards"
    });
  }
  connectedCallback() {
    super.connectedCallback(), this.activationButton.active = !this.hidden, this.activationButton.onclick = () => {
      this.hidden = !this.hidden, this.animatePanles();
    };
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.activationButton.remove();
  }
  /**
   * Collapses all `bim-panel-section` elements within the panel.
   * This method iterates over each `bim-panel-section` found within the panel's DOM and sets their `collapsed` property to `true`,
   * effectively hiding their content from view. This can be used to programmatically minimize the space taken up by sections
   * within the panel, making the panel more compact or to hide details that are not immediately necessary.
   */
  collapseSections() {
    const t = this.querySelectorAll("bim-panel-section");
    for (const e of t)
      e.collapsed = !0;
  }
  /**
   * Expands all `bim-panel-section` elements within the panel.
   * This method iterates over each `bim-panel-section` found within the panel's DOM and sets their `collapsed` property to `false`,
   * effectively showing their content. This can be used to programmatically reveal the content of sections within the panel,
   * making the panel more informative or to display details that are necessary for the user.
   */
  expandSections() {
    const t = this.querySelectorAll("bim-panel-section");
    for (const e of t)
      e.collapsed = !1;
  }
  render() {
    return this.activationButton.icon = this.icon, this.activationButton.label = this.label || this.name, this.activationButton.tooltipTitle = this.label || this.name, m`
      <div class="parent">
        ${this.label || this.name || this.icon ? m`<bim-label .icon=${this.icon}>${this.label}</bim-label>` : null}
        <div class="sections">
          <slot></slot>
        </div>
      </div>
    `;
  }
};
Fi.styles = [
  _t.scrollbar,
  S`
      :host {
        display: flex;
        border-radius: var(--bim-ui_size-base);
        background-color: var(--bim-ui_bg-base);
        overflow: auto;
      }

      :host([hidden]) {
        max-height: 0;
        max-width: 0;
        opacity: 0;
      }

      .parent {
        display: flex;
        flex: 1;
        flex-direction: column;
        pointer-events: auto;
        overflow: auto;
      }

      .parent bim-label {
        --bim-label--c: var(--bim-panel--c, var(--bim-ui_bg-contrast-80));
        --bim-label--fz: var(--bim-panel--fz, var(--bim-ui_size-sm));
        font-weight: 600;
        padding: 1rem;
        flex-shrink: 0;
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([header-hidden]) .parent bim-label {
        display: none;
      }

      .sections {
        height: 100%;
        display: flex;
        flex-direction: column;
        overflow: auto;
        flex: 1;
      }

      ::slotted(bim-panel-section:not(:last-child)) {
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      }
    `
];
let nt = Fi;
ge([
  d({ type: String, reflect: !0 })
], nt.prototype, "icon", 2);
ge([
  d({ type: String, reflect: !0 })
], nt.prototype, "name", 2);
ge([
  d({ type: String, reflect: !0 })
], nt.prototype, "label", 2);
ge([
  d({ type: Boolean, reflect: !0 })
], nt.prototype, "hidden", 1);
ge([
  d({ type: Boolean, attribute: "header-hidden", reflect: !0 })
], nt.prototype, "headerHidden", 2);
var La = Object.defineProperty, ve = (i, t, e, n) => {
  for (var s = void 0, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = o(t, e, s) || s);
  return s && La(t, e, s), s;
};
const Ni = class Ni extends C {
  constructor() {
    super(...arguments), this.onValueChange = new Event("change"), this.valueTransform = {}, this.componentHeight = -1;
  }
  /**
   * The `value` getter computes and returns the current state of the panel section's form elements as an object. This object's keys are the `name` or `label` attributes of the child elements, and the values are the corresponding values of these elements. This property is particularly useful for retrieving a consolidated view of the user's input or selections within the panel section. When the value of any child element changes, the returned object from this getter will reflect those changes, providing a dynamic snapshot of the panel section's state. Note that this property does not have a default value as it dynamically reflects the current state of the panel section's form elements.
   * @example <bim-panel-section></bim-panel-section> <!-- Usage in HTML not directly applicable as this is a getter -->
   * @example
   * const section = document.createElement('bim-panel-section');
   * console.log(section.value); // Logs the current value object
   */
  get value() {
    const t = this.parentElement;
    let e;
    return t instanceof nt && (e = t.valueTransform), Object.values(this.valueTransform).length !== 0 && (e = this.valueTransform), Re(this, e);
  }
  /**
   * The `value` setter allows programmatically updating the values of the panel section's child elements. It accepts an object where keys correspond to the `name` or `label` attributes of the child elements, and the values are the new values to be set for these elements. This property is useful for initializing the panel section with specific values or updating its state based on external data. When the property changes, the corresponding child elements' values are updated to reflect the new state. This does not have a default value as it is a method for updating child elements' values.
   * @type {Record<string, any>}
   * @default undefined
   * @example <bim-panel-section></bim-panel-section> <!-- Usage in HTML not directly applicable as this is a setter -->
   * @example
   * const section = document.createElement('bim-panel-section');
   * section.value = { 'user-settings': 'John Doe' }; // Programmatically sets the value of a child element named 'user-settings'
   */
  set value(t) {
    const e = [...this.children];
    for (const n in t) {
      const s = e.find((o) => {
        const l = o;
        return l.name === n || l.label === n;
      });
      if (!s)
        continue;
      const r = s;
      r.value = t[n];
    }
  }
  setFlexAfterTransition() {
    var e;
    const t = (e = this.shadowRoot) == null ? void 0 : e.querySelector(
      ".components"
    );
    t && setTimeout(() => {
      this.collapsed ? t.style.removeProperty("flex") : t.style.setProperty("flex", "1");
    }, 150);
  }
  animateHeader() {
    var e;
    const t = (e = this.shadowRoot) == null ? void 0 : e.querySelector(
      ".components"
    );
    this.componentHeight < 0 && (this.collapsed ? this.componentHeight = t.clientHeight : (t.style.setProperty("transition", "none"), t.style.setProperty("height", "auto"), t.style.setProperty("padding", "0.125rem 1rem 1rem"), this.componentHeight = t.clientHeight, requestAnimationFrame(() => {
      t.style.setProperty("height", "0px"), t.style.setProperty("padding", "0 1rem 0"), t.style.setProperty(
        "transition",
        "height 0.25s cubic-bezier(0.65, 0.05, 0.36, 1), padding 0.25s cubic-bezier(0.65, 0.05, 0.36, 1)"
      );
    }))), this.collapsed ? (t.style.setProperty(
      "height",
      `${this.componentHeight}px`
    ), requestAnimationFrame(() => {
      t.style.setProperty("height", "0px"), t.style.setProperty("padding", "0 1rem 0");
    })) : (t.style.setProperty("height", "0px"), t.style.setProperty("padding", "0 1rem 0"), requestAnimationFrame(() => {
      t.style.setProperty(
        "height",
        `${this.componentHeight}px`
      ), t.style.setProperty("padding", "0.125rem 1rem 1rem");
    })), this.setFlexAfterTransition();
  }
  onHeaderClick() {
    this.fixed || (this.collapsed = !this.collapsed, this.animateHeader());
  }
  handelSlotChange(t) {
    t.target.assignedElements({ flatten: !0 }).forEach((s, r) => {
      const o = r * 0.05;
      s.style.setProperty("transition-delay", `${o}s`);
    });
  }
  handlePointerEnter() {
    const t = this.renderRoot.querySelector(".expand-icon");
    this.collapsed ? t == null || t.style.setProperty("animation", "collapseAnim 0.5s") : t == null || t.style.setProperty("animation", "expandAnim 0.5s");
  }
  handlePointerLeave() {
    const t = this.renderRoot.querySelector(".expand-icon");
    t == null || t.style.setProperty("animation", "none");
  }
  render() {
    const t = this.label || this.icon || this.name || this.fixed, e = m`<svg
      xmlns="http://www.w3.org/2000/svg"
      height="1.125rem"
      viewBox="0 0 24 24"
      width="1.125rem"
      class="expand-icon"
    >
      <path d="M0 0h24v24H0z" fill="none" />
      <path d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z" />
    </svg>`, n = m`
      <div
        class="header"
        title=${this.label ?? ""}
        @pointerenter=${this.handlePointerEnter}
        @pointerleave=${this.handlePointerLeave}
        @click=${this.onHeaderClick}
      >
        ${this.label || this.icon || this.name ? m`<bim-label .icon=${this.icon}>${this.label}</bim-label>` : null}
        ${this.fixed ? null : e}
      </div>
    `;
    return m`
      <div class="parent">
        ${t ? n : null}
        <div class="components" style="flex: 1;">
          <div>
            <slot @slotchange=${this.handelSlotChange}></slot>
          </div>
        </div>
      </div>
    `;
  }
};
Ni.styles = [
  _t.scrollbar,
  S`
      :host {
        display: block;
        pointer-events: auto;
      }

      :host .parent {
        display: flex;
        flex-direction: column;
        height: 100%;
      }

      :host(:not([fixed])) .header:hover {
        --bim-label--c: var(--bim-ui_accent-base);
        color: var(--bim-ui_accent-base);
        cursor: pointer;
      }

      :host(:not([fixed])) .header:hover .expand-icon {
        fill: var(--bim-ui_accent-base);
      }

      .header {
        --bim-label--fz: var(--bim-ui_size-sm);
        --bim-label--c: var(
          --bim-panel-section_hc,
          var(--bim-ui_bg-contrast-80)
        );
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: 600;
        height: 1.5rem;
        padding: 0.75rem 1rem;
      }

      .expand-icon {
        fill: var(--bim-ui_bg-contrast-80);
        transition: transform 0.2s;
      }

      :host([collapsed]) .expand-icon {
        transform: rotateZ(-180deg);
      }

      .title {
        display: flex;
        align-items: center;
        column-gap: 0.5rem;
      }

      .title p {
        font-size: var(--bim-ui_size-sm);
      }

      .components {
        display: flex;
        flex-direction: column;
        overflow: hidden;
        row-gap: 0.75rem;
        padding: 0 1rem 1rem;
        box-sizing: border-box;
        transition:
          height 0.25s cubic-bezier(0.65, 0.05, 0.36, 1),
          padding 0.25s cubic-bezier(0.65, 0.05, 0.36, 1);
      }

      .components > div {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        flex: 1;
        overflow: auto;
      }

      :host(:not([icon]):not([label])) .components {
        padding: 1rem;
      }

      :host(:not([fixed])[collapsed]) .components {
        padding: 0 1rem 0;
        height: 0px;
      }

      bim-label {
        pointer-events: none;
      }

      ::slotted(*) {
        transition:
          transform 0.25s cubic-bezier(0.65, 0.05, 0.36, 1),
          opacity 0.25s cubic-bezier(0.65, 0.05, 0.36, 1);
      }

      :host(:not([fixed])[collapsed]) ::slotted(*) {
        transform: translateX(-20%);
        opacity: 0;
      }

      @keyframes expandAnim {
        0%,
        100% {
          transform: translateY(0%);
        }
        25% {
          transform: translateY(-30%);
        }
        50% {
          transform: translateY(10%);
        }
        75% {
          transform: translateY(-30%);
        }
      }

      @keyframes collapseAnim {
        0%,
        100% {
          transform: translateY(0%) rotateZ(-180deg);
        }
        25% {
          transform: translateY(30%) rotateZ(-180deg);
        }
        50% {
          transform: translateY(-10%) rotateZ(-180deg);
        }
        75% {
          transform: translateY(30%) rotateZ(-180deg);
        }
      }
    `
];
let mt = Ni;
ve([
  d({ type: String, reflect: !0 })
], mt.prototype, "icon");
ve([
  d({ type: String, reflect: !0 })
], mt.prototype, "label");
ve([
  d({ type: String, reflect: !0 })
], mt.prototype, "name");
ve([
  d({ type: Boolean, reflect: !0 })
], mt.prototype, "fixed");
ve([
  d({ type: Boolean, reflect: !0 })
], mt.prototype, "collapsed");
var Ra = Object.defineProperty, ye = (i, t, e, n) => {
  for (var s = void 0, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = o(t, e, s) || s);
  return s && Ra(t, e, s), s;
};
const qi = class qi extends C {
  constructor() {
    super(...arguments), this.vertical = !1, this.onValueChange = new Event("change"), this._canEmitEvents = !1, this._value = document.createElement("bim-option"), this.onOptionClick = (t) => {
      this._value = t.target, this.setAnimatedBackgound(), this.dispatchEvent(this.onValueChange);
      for (const e of this.children)
        e instanceof T && (e.checked = e === t.target);
    };
  }
  get _options() {
    return [...this.querySelectorAll("bim-option")];
  }
  /**
   * Sets the value of the selector.
   * It finds the matching option based on the provided value and sets it as the selected option.
   * If no matching option is found, it does nothing.
   *
   * @param value - The value to set for the selector.
   */
  set value(t) {
    const e = this.findOption(t);
    if (e) {
      for (const n of this._options)
        n.checked = n === e;
      this._value = e, this.setAnimatedBackgound(), this._canEmitEvents && this.dispatchEvent(this.onValueChange);
    }
  }
  get value() {
    return this._value.value;
  }
  onSlotChange(t) {
    const e = t.target.assignedElements();
    for (const n of e)
      n instanceof T && (n.noMark = !0, n.removeEventListener("click", this.onOptionClick), n.addEventListener("click", this.onOptionClick));
  }
  findOption(t) {
    return this._options.find((n) => n instanceof T ? n.label === t || n.value === t : !1);
  }
  doubleRequestAnimationFrames(t) {
    requestAnimationFrame(() => requestAnimationFrame(t));
  }
  setAnimatedBackgound(t = !1) {
    const e = this.renderRoot.querySelector(
      ".animated-background"
    ), n = this._value;
    requestAnimationFrame(() => {
      var o, l, a, c;
      const s = (c = (a = (l = (o = n == null ? void 0 : n.parentElement) == null ? void 0 : o.shadowRoot) == null ? void 0 : l.querySelector("bim-input")) == null ? void 0 : a.shadowRoot) == null ? void 0 : c.querySelector(".input"), r = {
        width: n == null ? void 0 : n.clientWidth,
        height: n == null ? void 0 : n.clientHeight,
        top: ((n == null ? void 0 : n.offsetTop) ?? 0) - ((s == null ? void 0 : s.offsetTop) ?? 0),
        left: ((n == null ? void 0 : n.offsetLeft) ?? 0) - ((s == null ? void 0 : s.offsetLeft) ?? 0)
      };
      e == null || e.style.setProperty("width", `${r.width}px`), e == null || e.style.setProperty("height", `${r.height}px`), e == null || e.style.setProperty("top", `${r.top}px`), e == null || e.style.setProperty("left", `${r.left}px`);
    }), t && this.doubleRequestAnimationFrames(() => {
      const r = "ease";
      e == null || e.style.setProperty(
        "transition",
        `width ${0.3}s ${r}, height ${0.3}s ${r}, top ${0.3}s ${r}, left ${0.3}s ${r}`
      );
    });
  }
  firstUpdated() {
    const t = [...this.children].find(
      (e) => e instanceof T && e.checked
    );
    t && (this._value = t), window.addEventListener("load", () => {
      this.setAnimatedBackgound(!0);
    }), new ResizeObserver(() => {
      this.setAnimatedBackgound();
    }).observe(this);
  }
  render() {
    return m`
      <bim-input
        .vertical=${this.vertical}
        .label=${this.label}
        .icon=${this.icon}
      >
        <div class="animated-background"></div>
        <slot @slotchange=${this.onSlotChange}></slot>
      </bim-input>
    `;
  }
};
qi.styles = S`
    :host {
      --bim-input--bgc: var(--bim-ui_bg-contrast-20);
      --bim-input--g: 0;
      --bim-option--jc: center;
      flex: 1;
      display: block;
    }

    ::slotted(bim-option) {
      position: relative;
      border-radius: 0;
      overflow: hidden;
      min-width: min-content;
      min-height: min-content;
      transition: background-color 0.2s;
    }

    .animated-background {
      position: absolute;
      background: var(--bim-ui_main-base);
      width: 0;
      height: 0;
      top: 0;
      left: 0;
    }

    ::slotted(bim-option[checked]) {
      --bim-label--c: var(--bim-ui_main-contrast);
    }

    ::slotted(bim-option:not([checked]):hover) {
      background-color: #0003;
    }
  `;
let bt = qi;
ye([
  d({ type: String, reflect: !0 })
], bt.prototype, "name");
ye([
  d({ type: String, reflect: !0 })
], bt.prototype, "icon");
ye([
  d({ type: String, reflect: !0 })
], bt.prototype, "label");
ye([
  d({ type: Boolean, reflect: !0 })
], bt.prototype, "vertical");
ye([
  Ut()
], bt.prototype, "_value");
const za = () => m`
    <style>
      div {
        display: flex;
        gap: 0.375rem;
        border-radius: 0.25rem;
        min-height: 1.25rem;
      }

      [data-type="row"] {
        background-color: var(--bim-ui_bg-contrast-10);
        animation: row-loading 1s linear infinite alternate;
        padding: 0.5rem;
      }

      [data-type="cell"] {
        background-color: var(--bim-ui_bg-contrast-20);
        flex: 0.25;
      }

      @keyframes row-loading {
        0% {
          background-color: var(--bim-ui_bg-contrast-10);
        }
        100% {
          background-color: var(--bim-ui_bg-contrast-20);
        }
      }
    </style>
    <div style="display: flex; flex-direction: column;">
      <div data-type="row" style="gap: 2rem">
        <div data-type="cell" style="flex: 1"></div>
        <div data-type="cell" style="flex: 2"></div>
        <div data-type="cell" style="flex: 1"></div>
        <div data-type="cell" style="flex: 0.5"></div>
      </div>
      <div style="display: flex;">
        <div data-type="row" style="flex: 1">
          <div data-type="cell" style="flex: 0.5"></div>
        </div>
        <div data-type="row" style="flex: 2">
          <div data-type="cell" style="flex: 0.75"></div>
        </div>
        <div data-type="row" style="flex: 1">
          <div data-type="cell"></div>
        </div>
        <div data-type="row" style="flex: 0.5">
          <div data-type="cell" style="flex: 0.75"></div>
        </div>
      </div>
      <div style="display: flex;">
        <div data-type="row" style="flex: 1">
          <div data-type="cell" style="flex: 0.75"></div>
        </div>
        <div data-type="row" style="flex: 2">
          <div data-type="cell"></div>
        </div>
        <div data-type="row" style="flex: 1">
          <div data-type="cell" style="flex: 0.5"></div>
        </div>
        <div data-type="row" style="flex: 0.5">
          <div data-type="cell" style="flex: 0.5"></div>
        </div>
      </div>
      <div style="display: flex;">
        <div data-type="row" style="flex: 1">
          <div data-type="cell"></div>
        </div>
        <div data-type="row" style="flex: 2">
          <div data-type="cell" style="flex: 0.5"></div>
        </div>
        <div data-type="row" style="flex: 1">
          <div data-type="cell" style="flex: 0.75"></div>
        </div>
        <div data-type="row" style="flex: 0.5">
          <div data-type="cell" style="flex: 0.7s5"></div>
        </div>
      </div>
    </div>
  `, Ba = () => m`
    <style>
      .loader {
        grid-area: Processing;
        position: relative;
        padding: 0.125rem;
      }
      .loader:before {
        content: "";
        position: absolute;
      }
      .loader .loaderBar {
        position: absolute;
        top: 0;
        right: 100%;
        bottom: 0;
        left: 0;
        background: var(--bim-ui_main-base);
        /* width: 25%; */
        width: 0;
        animation: borealisBar 2s linear infinite;
      }

      @keyframes borealisBar {
        0% {
          left: 0%;
          right: 100%;
          width: 0%;
        }
        10% {
          left: 0%;
          right: 75%;
          width: 25%;
        }
        90% {
          right: 0%;
          left: 75%;
          width: 25%;
        }
        100% {
          left: 100%;
          right: 0%;
          width: 0%;
        }
      }
    </style>
    <div class="loader">
      <div class="loaderBar"></div>
    </div>
  `;
var Ma = Object.defineProperty, ja = (i, t, e, n) => {
  for (var s = void 0, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = o(t, e, s) || s);
  return s && Ma(t, e, s), s;
};
const Vi = class Vi extends C {
  constructor() {
    super(...arguments), this.column = "", this.columnIndex = 0, this.rowData = {};
  }
  get data() {
    return this.column ? this.rowData[this.column] : null;
  }
  render() {
    return m`
      <style>
        :host {
          grid-area: ${this.column ?? "unset"};
        }
      </style>
      <slot></slot>
    `;
  }
};
Vi.styles = S`
    :host {
      padding: 0.375rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    :host([data-column-index="0"]) {
      justify-content: normal;
    }

    :host([data-column-index="0"]:not([data-cell-header]))
      ::slotted(bim-label) {
      text-align: left;
    }

    ::slotted(*) {
      --bim-input--bgc: transparent;
      --bim-input--olc: var(--bim-ui_bg-contrast-20);
      --bim-input--olw: 1px;
    }

    ::slotted(bim-input) {
      --bim-input--olw: 0;
    }

    ::slotted(bim-label) {
      white-space: normal;
      text-align: center;
    }
  `;
let ze = Vi;
ja([
  d({ type: String, reflect: !0 })
], ze.prototype, "column");
const Ui = class Ui extends C {
  constructor() {
    super(...arguments), this._groups = [], this.group = this.closest("bim-table-group"), this._data = [], this.table = this.closest("bim-table");
  }
  get data() {
    var t;
    return ((t = this.group) == null ? void 0 : t.data.children) ?? this._data;
  }
  set data(t) {
    this._data = t;
  }
  render() {
    return this._groups = [], m`
      <slot></slot>
      ${this.data.map((t) => {
      const e = document.createElement(
        "bim-table-group"
      );
      return this._groups.push(e), e.table = this.table, e.data = t, e;
    })}
    `;
  }
};
Ui.styles = S`
    :host {
      --bim-button--bgc: transparent;
      position: relative;
      display: block;
      overflow: hidden;
      grid-area: Children;
    }

    :host([hidden]) {
      height: 0;
      opacity: 0;
    }

    ::slotted(.branch.branch-vertical) {
      top: 0;
      bottom: 1.125rem;
    }
  `;
let vi = Ui;
var Ha = Object.defineProperty, Da = (i, t, e, n) => {
  for (var s = void 0, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = o(t, e, s) || s);
  return s && Ha(t, e, s), s;
};
const Wi = class Wi extends C {
  constructor() {
    super(...arguments), this.childrenHidden = !0, this.table = this.closest("bim-table"), this.data = { data: {} };
  }
  get rowElement() {
    const t = this.shadowRoot;
    return t ? t.querySelector("bim-table-row") : null;
  }
  get childrenElement() {
    const t = this.shadowRoot;
    return t ? t.querySelector("bim-table-children") : null;
  }
  get _isChildrenEmpty() {
    return !(this.data.children && this.data.children.length !== 0);
  }
  connectedCallback() {
    super.connectedCallback(), this.table && this.table.expanded ? this.childrenHidden = !1 : this.childrenHidden = !0;
  }
  toggleChildren(t) {
    this.childrenHidden = typeof t > "u" ? !this.childrenHidden : !t, this.animateTableChildren(!0);
  }
  animateTableChildren(t = !0) {
    if (!t) {
      requestAnimationFrame(() => {
        var c;
        const o = this.renderRoot.querySelector(".caret"), l = this.renderRoot.querySelector(
          ".branch-vertical"
        ), a = (c = this.renderRoot.querySelector("bim-table-children")) == null ? void 0 : c.querySelector(".branch-vertical");
        o.style.setProperty(
          "transform",
          `translateY(-50%) rotate(${this.childrenHidden ? "0" : "90"}deg)`
        ), l.style.setProperty(
          "transform",
          `scaleY(${this.childrenHidden ? "0" : "1"})`
        ), a == null || a.style.setProperty(
          "transform",
          `scaleY(${this.childrenHidden ? "0" : "1"})`
        );
      });
      return;
    }
    const e = 500, n = 0, s = 200, r = 350;
    requestAnimationFrame(() => {
      var v;
      const o = this.renderRoot.querySelector("bim-table-children"), l = this.renderRoot.querySelector(".caret"), a = this.renderRoot.querySelector(
        ".branch-vertical"
      ), c = (v = this.renderRoot.querySelector("bim-table-children")) == null ? void 0 : v.querySelector(".branch-vertical"), u = () => {
        const b = o == null ? void 0 : o.renderRoot.querySelectorAll("bim-table-group");
        b == null || b.forEach(($, y) => {
          $.style.setProperty("opacity", "0"), $.style.setProperty("left", "-30px");
          const w = [
            {
              opacity: "0",
              left: "-30px"
            },
            {
              opacity: "1",
              left: "0"
            }
          ];
          $.animate(w, {
            duration: e / 2,
            delay: 50 + y * n,
            easing: "cubic-bezier(0.65, 0.05, 0.36, 1)",
            fill: "forwards"
          });
        });
      }, h = () => {
        const b = [
          { transform: "translateY(-50%) rotate(90deg)" },
          { transform: "translateY(-50%) rotate(0deg)" }
        ];
        l == null || l.animate(b, {
          duration: r,
          easing: "cubic-bezier(0.68, -0.55, 0.27, 1.55)",
          fill: "forwards",
          direction: this.childrenHidden ? "normal" : "reverse"
        });
      }, p = () => {
        const b = [
          { transform: "scaleY(1)" },
          { transform: "scaleY(0)" }
        ];
        a == null || a.animate(b, {
          duration: s,
          easing: "cubic-bezier(0.4, 0, 0.2, 1)",
          delay: n,
          fill: "forwards",
          direction: this.childrenHidden ? "normal" : "reverse"
        });
      }, f = () => {
        var $;
        const b = ($ = this.renderRoot.querySelector("bim-table-row")) == null ? void 0 : $.querySelector(".branch-horizontal");
        if (b) {
          b.style.setProperty("transform-origin", "center right");
          const y = [
            { transform: "scaleX(0)" },
            { transform: "scaleX(1)" }
          ];
          b.animate(y, {
            duration: s,
            easing: "cubic-bezier(0.4, 0, 0.2, 1)",
            fill: "forwards",
            direction: this.childrenHidden ? "normal" : "reverse"
          });
        }
      }, g = () => {
        const b = [
          { transform: "scaleY(0)" },
          { transform: "scaleY(1)" }
        ];
        c == null || c.animate(b, {
          duration: s * 1.2,
          easing: "cubic-bezier(0.4, 0, 0.2, 1)",
          fill: "forwards",
          delay: (n + s) * 0.7
        });
      };
      u(), h(), p(), f(), g();
    });
  }
  firstUpdated() {
    this.renderRoot.querySelectorAll(".caret").forEach((e) => {
      var n, s, r;
      if (!this.childrenHidden) {
        e.style.setProperty(
          "transform",
          "translateY(-50%) rotate(90deg)"
        );
        const l = (n = e.parentElement) == null ? void 0 : n.querySelector(
          ".branch-horizontal"
        );
        l && l.style.setProperty("transform", "scaleX(0)");
        const a = (r = (s = e.parentElement) == null ? void 0 : s.parentElement) == null ? void 0 : r.querySelectorAll(
          ".branch-vertical"
        );
        a == null || a.forEach((c) => {
          c.style.setProperty("transform", "scaleY(1)");
        });
      }
    });
  }
  render() {
    if (!this.table)
      throw new Error("TableGroup: parent table wasn't found!");
    const t = this.table.getGroupIndentation(this.data) ?? 0, e = m`
      ${this.table.noIndentation ? null : m`
            <style>
              .branch-vertical {
                left: ${t + (this.table.selectableRows ? 1.9375 : 0.5625)}rem;
              }
            </style>
            <div class="branch branch-vertical"></div>
          `}
    `;
    let n = null;
    this.table.noIndentation || (n = document.createElement("div"), n.classList.add("branch", "branch-horizontal"), n.style.left = `${t - 1 + (this.table.selectableRows ? 2.05 : 0.5625)}rem`);
    let s = null;
    if (!this.table.noIndentation) {
      s = document.createElement("div");
      const l = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "svg"
      );
      if (l.setAttribute("height", "9.9"), l.setAttribute("width", "7.5"), l.setAttribute("viewBox", "0 0 4.6666672 7.7"), this.table.noCarets) {
        const a = document.createElementNS(
          "http://www.w3.org/2000/svg",
          "circle"
        );
        a.setAttribute("cx", "2.3333336"), a.setAttribute("cy", "3.85"), a.setAttribute("r", "2.5"), l.append(a);
      } else {
        const a = document.createElementNS(
          "http://www.w3.org/2000/svg",
          "path"
        );
        a.setAttribute(
          "d",
          "m 1.7470835,6.9583848 2.5899999,-2.59 c 0.39,-0.39 0.39,-1.02 0,-1.41 L 1.7470835,0.36838483 c -0.63,-0.62000003 -1.71000005,-0.18 -1.71000005,0.70999997 v 5.17 c 0,0.9 1.08000005,1.34 1.71000005,0.71 z"
        ), l.append(a), s.style.cursor = "pointer", s.addEventListener("click", (c) => {
          c.stopPropagation(), this.toggleChildren();
        });
      }
      s.classList.add("caret"), s.style.left = `${(this.table.selectableRows ? 1.5 : 0.125) + t}rem`, s.append(l);
    }
    const r = document.createElement("bim-table-row");
    if (!this._isChildrenEmpty) {
      const l = document.createDocumentFragment();
      Dt(e, l), r.append(l);
    }
    r.table = this.table, r.group = this, this.table.dispatchEvent(
      new CustomEvent("rowcreated", {
        detail: { row: r }
      })
    ), s && !this._isChildrenEmpty && r.append(s), t !== 0 && n && r.append(n);
    let o;
    if (!this._isChildrenEmpty && !this.childrenHidden) {
      o = document.createElement(
        "bim-table-children"
      ), o.table = this.table, o.group = this;
      const l = document.createDocumentFragment();
      Dt(e, l), o.append(l), this.animateTableChildren();
    }
    return m`<div class="parent">${r} ${o}</div>`;
  }
};
Wi.styles = S`
    :host {
      position: relative;
    }

    .parent {
      display: grid;
      grid-template-areas: "Data" "Children";
    }

    .branch {
      position: absolute;
      z-index: 1;
    }

    .branch-vertical {
      border-left: 1px dotted var(--bim-ui_bg-contrast-40);
      transform-origin: top center;
      transform: scaleY(0);
    }

    .branch-horizontal {
      top: 50%;
      width: 1rem;
      border-bottom: 1px dotted var(--bim-ui_bg-contrast-40);
    }

    .branch-horizontal {
      transform-origin: center left;
    }

    .caret {
      position: absolute;
      z-index: 2;
      transform: translateY(-50%) rotate(0deg);
      top: 50%;
      display: flex;
      width: 0.95rem;
      height: 0.95rem;
      justify-content: center;
      align-items: center;
    }

    .caret svg {
      fill: var(--bim-ui_bg-contrast-60);
    }
  `;
let Be = Wi;
Da([
  d({ type: Boolean, attribute: "children-hidden", reflect: !0 })
], Be.prototype, "childrenHidden");
var Fa = Object.defineProperty, _e = (i, t, e, n) => {
  for (var s = void 0, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = o(t, e, s) || s);
  return s && Fa(t, e, s), s;
};
const Yi = class Yi extends C {
  constructor() {
    super(...arguments), this.selected = !1, this.columns = [], this.hiddenColumns = [], this.group = this.closest("bim-table-group"), this._data = {}, this.isHeader = !1, this.table = this.closest("bim-table"), this.onTableColumnsChange = () => {
      this.table && (this.columns = this.table.columns);
    }, this.onTableColumnsHidden = () => {
      this.table && (this.hiddenColumns = this.table.hiddenColumns);
    }, this._observer = new IntersectionObserver(
      (t) => {
        this._intersecting = t[0].isIntersecting;
      },
      { rootMargin: "36px" }
    );
  }
  get groupData() {
    var t;
    return (t = this.group) == null ? void 0 : t.data;
  }
  get data() {
    var t;
    return ((t = this.group) == null ? void 0 : t.data.data) ?? this._data;
  }
  set data(t) {
    this._data = t;
  }
  get _columnNames() {
    return this.columns.filter(
      (n) => !this.hiddenColumns.includes(n.name)
    ).map((n) => n.name);
  }
  get _columnWidths() {
    return this.columns.filter(
      (n) => !this.hiddenColumns.includes(n.name)
    ).map((n) => n.width);
  }
  get _isSelected() {
    var t;
    return (t = this.table) == null ? void 0 : t.selection.has(this.data);
  }
  onSelectionChange(t) {
    if (!this.table)
      return;
    const e = t.target;
    this.selected = e.value, e.value ? (this.table.selection.add(this.data), this.table.dispatchEvent(
      new CustomEvent("rowselected", {
        detail: {
          data: this.data
        }
      })
    )) : (this.table.selection.delete(this.data), this.table.dispatchEvent(
      new CustomEvent("rowdeselected", {
        detail: {
          data: this.data
        }
      })
    ));
  }
  connectedCallback() {
    super.connectedCallback(), this._observer.observe(this), this.table && (this.columns = this.table.columns, this.hiddenColumns = this.table.hiddenColumns, this.table.addEventListener("columnschange", this.onTableColumnsChange), this.table.addEventListener("columnshidden", this.onTableColumnsHidden), this.toggleAttribute("selected", this._isSelected));
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this._observer.unobserve(this), this.table && (this.columns = [], this.hiddenColumns = [], this.table.removeEventListener("columnschange", this.onTableColumnsChange), this.table.removeEventListener("columnshidden", this.onTableColumnsHidden), this.toggleAttribute("selected", !1));
  }
  compute() {
    if (!this.table)
      throw new Error("TableRow: parent table wasn't found!");
    const t = this.table.getRowIndentation(this.data) ?? 0, e = this.isHeader ? this.data : this.table.applyDataTransform(this.group) ?? this.data, n = [];
    for (const s in e) {
      if (this.hiddenColumns.includes(s))
        continue;
      const r = e[s];
      let o;
      if (typeof r == "string" || typeof r == "boolean" || typeof r == "number" ? (o = document.createElement("bim-label"), o.textContent = String(r)) : r instanceof HTMLElement ? o = r : (o = document.createDocumentFragment(), Dt(r, o)), !o)
        continue;
      const l = document.createElement("bim-table-cell");
      l.append(o), l.column = s, this._columnNames.indexOf(s) === 0 && (l.style.marginLeft = `${this.table.noIndentation ? 0 : t + 0.75}rem`);
      const a = this._columnNames.indexOf(s);
      l.setAttribute("data-column-index", String(a)), l.toggleAttribute(
        "data-no-indentation",
        a === 0 && this.table.noIndentation
      ), l.toggleAttribute("data-cell-header", this.isHeader), l.rowData = this.data, this.table.dispatchEvent(
        new CustomEvent("cellcreated", {
          detail: { cell: l }
        })
      ), n.push(l);
    }
    return this.style.gridTemplateAreas = `"${this.table.selectableRows ? "Selection" : ""} ${this._columnNames.join(" ")}"`, this.style.gridTemplateColumns = `${this.table.selectableRows ? "1.6rem" : ""} ${this._columnWidths.join(" ")}`, m`
      ${!this.isHeader && this.table.selectableRows ? m`<bim-checkbox
            @change=${this.onSelectionChange}
            .checked=${this._isSelected}
            style="align-self: center; justify-self: center"
          ></bim-checkbox>` : null}
      ${n}
      <slot></slot>
    `;
  }
  render() {
    return m`${this._intersecting ? this.compute() : m``}`;
  }
};
Yi.styles = S`
    :host {
      position: relative;
      grid-area: Data;
      display: grid;
      min-height: 2.25rem;
      transition: all 0.15s;
    }

    ::slotted(.branch.branch-vertical) {
      top: 50%;
      bottom: 0;
    }

    :host([selected]) {
      background-color: color-mix(
        in lab,
        var(--bim-ui_bg-contrast-20) 30%,
        var(--bim-ui_main-base) 10%
      );
    }
  `;
let gt = Yi;
_e([
  d({ type: Boolean, reflect: !0 })
], gt.prototype, "selected");
_e([
  d({ attribute: !1 })
], gt.prototype, "columns");
_e([
  d({ attribute: !1 })
], gt.prototype, "hiddenColumns");
_e([
  d({ type: Boolean, attribute: "is-header", reflect: !0 })
], gt.prototype, "isHeader");
_e([
  Ut()
], gt.prototype, "_intersecting");
var Na = Object.defineProperty, qa = Object.getOwnPropertyDescriptor, q = (i, t, e, n) => {
  for (var s = n > 1 ? void 0 : n ? qa(t, e) : t, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = (n ? o(t, e, s) : o(s)) || s);
  return n && s && Na(t, e, s), s;
};
const Gi = class Gi extends C {
  constructor() {
    super(...arguments), this._filteredData = [], this.headersHidden = !1, this.minColWidth = "4rem", this._columns = [], this._textDelimiters = {
      comma: ",",
      tab: "	"
    }, this._queryString = null, this._data = [], this.expanded = !1, this.preserveStructureOnFilter = !1, this.indentationInText = !1, this.dataTransform = {}, this.selectableRows = !1, this.selection = /* @__PURE__ */ new Set(), this.noIndentation = !1, this.noCarets = !1, this.loading = !1, this._errorLoading = !1, this._onColumnsHidden = new Event("columnshidden"), this._hiddenColumns = [], this._stringFilterFunction = (t, e) => Object.values(e.data).some((s) => String(s).toLowerCase().includes(t.toLowerCase())), this._queryFilterFunction = (t, e) => {
      let n = !1;
      const s = mi(t) ?? [];
      for (const r of s) {
        if ("queries" in r) {
          n = !1;
          break;
        }
        const { condition: o, value: l } = r;
        let { key: a } = r;
        if (a.startsWith("[") && a.endsWith("]")) {
          const c = a.replace("[", "").replace("]", "");
          a = c, n = Object.keys(e.data).filter((p) => p.includes(c)).map(
            (p) => Hn(e.data[p], o, l)
          ).some((p) => p);
        } else
          n = Hn(e.data[a], o, l);
        if (!n)
          break;
      }
      return n;
    };
  }
  set columns(t) {
    const e = [];
    for (const n of t) {
      const s = typeof n == "string" ? { name: n, width: `minmax(${this.minColWidth}, 1fr)` } : n;
      e.push(s);
    }
    this._columns = e, this.computeMissingColumns(this.data), this.dispatchEvent(new Event("columnschange"));
  }
  get columns() {
    return this._columns;
  }
  get _headerRowData() {
    const t = {};
    for (const e of this.columns) {
      const { name: n } = e;
      t[n] = String(n);
    }
    return t;
  }
  /**
   * Getter for the `value` property.
   * Returns the filtered data if a search string is provided, otherwise returns the original data.
   *
   * @example
   * ```typescript
   * const tableValue = table.value;
   * console.log(tableValue); // Output: The filtered or original data.
   * ```
   */
  get value() {
    return this._filteredData;
  }
  /**
   * Sets the search string for filtering the table data.
   * This property allows you to filter the table data based on a search string.
   * If a search string is provided, the table will only display rows that match the search criteria.
   * The search criteria can be a simple string or a complex query.
   * If a simple string is provided, the table will filter rows based on the string's presence in any column.
   * If a complex query is provided, the table will filter rows based on the query's conditions and values.
   *
   * @example Simple Query
   * ```typescript
   * table.queryString = "example";
   * ```
   *
   * @example Complex Query
   * ```typescript
   * table.queryString = "column1="Jhon Doe" & column2=20";
   * ```
   */
  set queryString(t) {
    this.toggleAttribute("data-processing", !0), this._queryString = t && t.trim() !== "" ? t.trim() : null, this.updateFilteredData(), this.toggleAttribute("data-processing", !1);
  }
  get queryString() {
    return this._queryString;
  }
  set data(t) {
    this._data = t, this.updateFilteredData(), this.computeMissingColumns(t) && (this.columns = this._columns);
  }
  get data() {
    return this._data;
  }
  get dataAsync() {
    return new Promise((t) => {
      setTimeout(() => {
        t(this.data);
      });
    });
  }
  set hiddenColumns(t) {
    this._hiddenColumns = t, setTimeout(() => {
      this.dispatchEvent(this._onColumnsHidden);
    });
  }
  get hiddenColumns() {
    return this._hiddenColumns;
  }
  updateFilteredData() {
    this.queryString ? (mi(this.queryString) ? (this.filterFunction = this._queryFilterFunction, this._filteredData = this.filter(this.queryString)) : (this.filterFunction = this._stringFilterFunction, this._filteredData = this.filter(this.queryString)), this.preserveStructureOnFilter && (this._expandedBeforeFilter === void 0 && (this._expandedBeforeFilter = this.expanded), this.expanded = !0)) : (this.preserveStructureOnFilter && this._expandedBeforeFilter !== void 0 && (this.expanded = this._expandedBeforeFilter, this._expandedBeforeFilter = void 0), this._filteredData = this.data);
  }
  computeMissingColumns(t) {
    let e = !1;
    for (const n of t) {
      const { children: s, data: r } = n;
      for (const o in r)
        this._columns.map((a) => typeof a == "string" ? a : a.name).includes(o) || (this._columns.push({
          name: o,
          width: `minmax(${this.minColWidth}, 1fr)`
        }), e = !0);
      if (s) {
        const o = this.computeMissingColumns(s);
        o && !e && (e = o);
      }
    }
    return e;
  }
  generateText(t = "comma", e = this.value, n = "", s = !0) {
    const r = this._textDelimiters[t];
    let o = "";
    const l = this.columns.map((a) => a.name);
    if (s) {
      this.indentationInText && (o += `Indentation${r}`);
      const a = `${l.join(r)}
`;
      o += a;
    }
    for (const [a, c] of e.entries()) {
      const { data: u, children: h } = c, p = this.indentationInText ? `${n}${a + 1}${r}` : "", f = l.map((v) => u[v] ?? ""), g = `${p}${f.join(r)}
`;
      o += g, h && (o += this.generateText(
        t,
        c.children,
        `${n}${a + 1}.`,
        !1
      ));
    }
    return o;
  }
  /**
   * A getter function that generates a CSV (Comma Separated Values) representation of the table data.
   *
   * @returns A string containing the CSV representation of the table data.
   *
   * @example
   * ```typescript
   * const csvData = table.csv;
   * console.log(csvData); // Output: "Column 1,Column 2\nValue 1,Value 2\nValue 3,Value 4"
   * ```
   */
  get csv() {
    return this.generateText("comma");
  }
  /**
   * A getter function that generates a Tab Separated Values (TSV) representation of the table data.
   *
   * @returns A string containing the TSV representation of the table data.
   *
   * @example
   * ```typescript
   * const tsvData = table.tsv;
   * console.log(tsvData); // Output: "Column 1\tColumn 2\nValue 1\tValue 2\nValue 3\tValue 4"
   * ```
   */
  get tsv() {
    return this.generateText("tab");
  }
  applyDataTransform(t) {
    const e = {};
    if (!t)
      return e;
    const { data: n } = t.data;
    for (const r of Object.keys(this.dataTransform)) {
      const o = this.columns.find((l) => l.name === r);
      o && o.forceDataTransform && (r in n || (n[r] = ""));
    }
    const s = n;
    for (const r in s) {
      const o = this.dataTransform[r];
      o ? e[r] = o(s[r], n, t) : e[r] = n[r];
    }
    return e;
  }
  /**
   * The `downloadData` method is used to download the table data in different formats.
   *
   * @param fileName - The name of the downloaded file. Default is "BIM Table Data".
   * @param format - The format of the downloaded file. Can be "json", "tsv", or "csv". Default is "json".
   *
   * @returns - This method does not return any value.
   *
   * @example
   * ```typescript
   * table.downloadData("MyTableData", "tsv");
   * ```
   */
  downloadData(t = "BIM Table Data", e = "json") {
    let n = null;
    if (e === "json" && (n = new File(
      [JSON.stringify(this.value, void 0, 2)],
      `${t}.json`
    )), e === "csv" && (n = new File([this.csv], `${t}.csv`)), e === "tsv" && (n = new File([this.tsv], `${t}.tsv`)), !n)
      return;
    const s = document.createElement("a");
    s.href = URL.createObjectURL(n), s.download = n.name, s.click(), URL.revokeObjectURL(s.href);
  }
  getRowIndentation(t, e = this.value, n = 0) {
    for (const s of e) {
      if (s.data === t)
        return n;
      if (s.children) {
        const r = this.getRowIndentation(
          t,
          s.children,
          n + 1
        );
        if (r !== null)
          return r;
      }
    }
    return null;
  }
  getGroupIndentation(t, e = this.value, n = 0) {
    for (const s of e) {
      if (s === t)
        return n;
      if (s.children) {
        const r = this.getGroupIndentation(
          t,
          s.children,
          n + 1
        );
        if (r !== null)
          return r;
      }
    }
    return null;
  }
  connectedCallback() {
    super.connectedCallback(), this.dispatchEvent(new Event("connected"));
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.dispatchEvent(new Event("disconnected"));
  }
  /**
   * Asynchronously loads data into the table based on Table.loadFunction.
   * If the data is already available, just set it in Table.data.
   *
   * @param force - A boolean indicating whether to force loading even if the table already has data.
   *
   * @returns - A promise that resolves to a boolean indicating whether the data loading was successful.
   * If the promise resolves to `true`, the data loading was successful.
   * If the promise resolves to `false`, the data loading was not successful.
   *
   * @remarks - If the table already has data and `force` is `false`, the function resolves to `false` without making any changes.
   * If the table already has data and `force` is `true`, the existing data is discarded before loading the new data.
   * If an error occurs during data loading, the function sets the `errorLoadingMessage` property with the error message and resolves to `false`.
   */
  async loadData(t = !1) {
    if (this._filteredData.length !== 0 && !t || !this.loadFunction)
      return !1;
    this.loading = !0;
    try {
      const e = await this.loadFunction();
      return this.data = e, this.loading = !1, this._errorLoading = !1, !0;
    } catch (e) {
      if (this.loading = !1, this._filteredData.length !== 0)
        return !1;
      const n = this.querySelector("[slot='error-loading']"), s = n == null ? void 0 : n.querySelector(
        "[data-table-element='error-message']"
      );
      return e instanceof Error && s && e.message.trim() !== "" && (s.textContent = e.message), this._errorLoading = !0, !1;
    }
  }
  filter(t, e = this.filterFunction ?? this._stringFilterFunction, n = this.data) {
    const s = [];
    for (const r of n)
      if (e(t, r)) {
        if (this.preserveStructureOnFilter) {
          const l = { data: r.data };
          if (r.children) {
            const a = this.filter(
              t,
              e,
              r.children
            );
            a.length && (l.children = a);
          }
          s.push(l);
        } else if (s.push({ data: r.data }), r.children) {
          const l = this.filter(
            t,
            e,
            r.children
          );
          s.push(...l);
        }
      } else if (r.children) {
        const l = this.filter(
          t,
          e,
          r.children
        );
        this.preserveStructureOnFilter && l.length ? s.push({
          data: r.data,
          children: l
        }) : s.push(...l);
      }
    return s;
  }
  get _missingDataElement() {
    return this.querySelector("[slot='missing-data']");
  }
  render() {
    if (this.loading)
      return za();
    if (this._errorLoading)
      return m`<slot name="error-loading"></slot>`;
    if (this._filteredData.length === 0 && this._missingDataElement)
      return m`<slot name="missing-data"></slot>`;
    const t = document.createElement("bim-table-row");
    t.table = this, t.isHeader = !0, t.data = this._headerRowData, t.style.gridArea = "Header", t.style.position = "sticky", t.style.top = "0", t.style.zIndex = "5";
    const e = document.createElement(
      "bim-table-children"
    );
    return e.table = this, e.data = this.value, e.style.gridArea = "Body", e.style.backgroundColor = "transparent", m`
      <div class="parent">
        ${this.headersHidden ? null : t} ${Ba()}
        <div style="overflow-x: hidden; grid-area: Body">${e}</div>
      </div>
    `;
  }
};
Gi.styles = [
  _t.scrollbar,
  S`
      :host {
        position: relative;
        overflow: auto;
        display: block;
        pointer-events: auto;
      }

      :host(:not([data-processing])) .loader {
        display: none;
      }

      .parent {
        display: grid;
        grid-template:
          "Header" auto
          "Processing" auto
          "Body" 1fr
          "Footer" auto;
        overflow: auto;
        height: 100%;
      }

      .parent > bim-table-row[is-header] {
        color: var(--bim-table_header--c, var(--bim-ui_bg-contrast-100));
        background-color: var(
          --bim-table_header--bgc,
          var(--bim-ui_bg-contrast-20)
        );
      }

      .controls {
        display: flex;
        gap: 0.375rem;
        flex-wrap: wrap;
        margin-bottom: 0.5rem;
      }
    `
];
let z = Gi;
q([
  Ut()
], z.prototype, "_filteredData", 2);
q([
  d({
    type: Boolean,
    attribute: "headers-hidden",
    reflect: !0
  })
], z.prototype, "headersHidden", 2);
q([
  d({ type: String, attribute: "min-col-width", reflect: !0 })
], z.prototype, "minColWidth", 2);
q([
  d({ type: Array, attribute: !1 })
], z.prototype, "columns", 1);
q([
  d({ type: Array, attribute: !1 })
], z.prototype, "data", 1);
q([
  d({ type: Boolean, reflect: !0 })
], z.prototype, "expanded", 2);
q([
  d({ type: Boolean, reflect: !0, attribute: "selectable-rows" })
], z.prototype, "selectableRows", 2);
q([
  d({ attribute: !1 })
], z.prototype, "selection", 2);
q([
  d({ type: Boolean, attribute: "no-indentation", reflect: !0 })
], z.prototype, "noIndentation", 2);
q([
  d({ type: Boolean, attribute: "no-carets", reflect: !0 })
], z.prototype, "noCarets", 2);
q([
  d({ type: Boolean, reflect: !0 })
], z.prototype, "loading", 2);
q([
  Ut()
], z.prototype, "_errorLoading", 2);
var Va = Object.defineProperty, Ua = Object.getOwnPropertyDescriptor, Wt = (i, t, e, n) => {
  for (var s = n > 1 ? void 0 : n ? Ua(t, e) : t, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = (n ? o(t, e, s) : o(s)) || s);
  return n && s && Va(t, e, s), s;
};
const Qi = class Qi extends C {
  constructor() {
    super(...arguments), this._switchers = [], this.bottom = !1, this.switchersHidden = !1, this.floating = !1, this.switchersFull = !1, this.onTabHiddenChange = (t) => {
      const e = t.target;
      e instanceof L && !e.hidden && (e.removeEventListener("hiddenchange", this.onTabHiddenChange), this.tab = e.name, e.addEventListener("hiddenchange", this.onTabHiddenChange));
    };
  }
  set tab(t) {
    this._tab = t;
    const e = [...this.children], n = e.find(
      (s) => s instanceof L && s.name === t
    );
    for (const s of e) {
      if (!(s instanceof L))
        continue;
      s.hidden = n !== s;
      const r = this.getTabSwitcher(s.name);
      r && r.toggleAttribute("data-active", !s.hidden);
    }
    n || (this._tab = "hidden", this.setAttribute("tab", "hidden"));
  }
  get tab() {
    return this._tab;
  }
  getTabSwitcher(t) {
    return this._switchers.find(
      (n) => n.getAttribute("data-name") === t
    );
  }
  createSwitchers() {
    this._switchers = [];
    for (const t of this.children) {
      if (!(t instanceof L))
        continue;
      const e = document.createElement("div");
      e.addEventListener("click", () => {
        this.tab === t.name ? this.toggleAttribute("tab", !1) : this.tab = t.name, this.setAnimatedBackgound();
      }), e.setAttribute("data-name", t.name), e.className = "switcher";
      const n = document.createElement("bim-label");
      n.textContent = t.label ?? null, n.icon = t.icon, e.append(n), this._switchers.push(e);
    }
  }
  updateSwitchers() {
    for (const t of this.children) {
      if (!(t instanceof L))
        continue;
      const e = this._switchers.find(
        (s) => s.getAttribute("data-name") === t.name
      );
      if (!e)
        continue;
      const n = e.querySelector("bim-label");
      n && (n.textContent = t.label ?? null, n.icon = t.icon);
    }
  }
  onSlotChange(t) {
    this.createSwitchers();
    const e = t.target.assignedElements(), n = e.find((s) => s instanceof L ? this.tab ? s.name === this.tab : !s.hidden : !1);
    n && n instanceof L && (this.tab = n.name);
    for (const s of e) {
      if (!(s instanceof L)) {
        s.remove();
        continue;
      }
      s.removeEventListener("hiddenchange", this.onTabHiddenChange), n !== s && (s.hidden = !0), s.addEventListener("hiddenchange", this.onTabHiddenChange);
    }
  }
  doubleRequestAnimationFrames(t) {
    requestAnimationFrame(() => requestAnimationFrame(t));
  }
  setAnimatedBackgound(t = !1) {
    var s;
    const e = this.renderRoot.querySelector(
      ".animated-background"
    ), n = [
      ...((s = this.renderRoot.querySelector(".switchers")) == null ? void 0 : s.querySelectorAll(".switcher")) || []
    ].filter((r) => r.hasAttribute("data-active"))[0];
    requestAnimationFrame(() => {
      var l, a, c, u;
      const r = (u = (c = (a = (l = n == null ? void 0 : n.parentElement) == null ? void 0 : l.shadowRoot) == null ? void 0 : a.querySelector("bim-input")) == null ? void 0 : c.shadowRoot) == null ? void 0 : u.querySelector(".input"), o = {
        width: n == null ? void 0 : n.clientWidth,
        height: n == null ? void 0 : n.clientHeight,
        top: ((n == null ? void 0 : n.offsetTop) ?? 0) - ((r == null ? void 0 : r.offsetTop) ?? 0),
        left: ((n == null ? void 0 : n.offsetLeft) ?? 0) - ((r == null ? void 0 : r.offsetLeft) ?? 0)
      };
      n ? (e == null || e.style.setProperty("width", `${o.width}px`), e == null || e.style.setProperty("height", `${o.height}px`), e == null || e.style.setProperty("left", `${o.left}px`)) : e == null || e.style.setProperty("width", "0"), this.bottom ? (e == null || e.style.setProperty("top", "100%"), e == null || e.style.setProperty("transform", "translateY(-100%)")) : e == null || e.style.setProperty("top", `${o.top}px`);
    }), t && this.doubleRequestAnimationFrames(() => {
      const o = "ease";
      e == null || e.style.setProperty(
        "transition",
        `width ${0.3}s ${o}, height ${0.3}s ${o}, top ${0.3}s ${o}, left ${0.3}s ${o}`
      );
    });
  }
  firstUpdated() {
    requestAnimationFrame(() => {
      this.setAnimatedBackgound(!0);
    }), new ResizeObserver(() => {
      this.setAnimatedBackgound();
    }).observe(this);
  }
  render() {
    return m`
      <div class="parent">
        <div class="switchers">
          <div class="animated-background"></div>
          ${this._switchers}
        </div>
        <div class="content">
          <slot @slotchange=${this.onSlotChange}></slot>
        </div>
      </div>
    `;
  }
};
Qi.styles = [
  _t.scrollbar,
  S`
      * {
        box-sizing: border-box;
      }

      :host {
        background-color: var(--bim-ui_bg-base);
        display: block;
        overflow: auto;
      }

      .parent {
        display: grid;
        overflow: hidden;
        position: relative;
        grid-template: "switchers" auto "content" 1fr;
        height: 100%;
      }

      :host([bottom]) .parent {
        grid-template: "content" 1fr "switchers" auto;
      }

      .switchers {
        position: relative;
        display: flex;
        height: 2.25rem;
        font-weight: 600;
        grid-area: switchers;
      }

      .switcher {
        --bim-label--c: var(--bim-ui_bg-contrast-80);
        background-color: transparent;
        position: relative;
        cursor: pointer;
        pointer-events: auto;
        padding: 0rem 0.75rem;
        display: flex;
        justify-content: center;
        z-index: 2;
        transition: all 0.15s;
      }

      .switcher:not([data-active]):hover {
        filter: brightness(150%);
      }

      :host([switchers-full]) .switcher {
        flex: 1;
      }

      .switcher[data-active] {
        --bim-label--c: var(--bim-ui_main-contrast);
      }

      .switchers bim-label {
        pointer-events: none;
      }

      :host([switchers-hidden]) .switchers {
        display: none;
      }

      .content {
        position: relative;
        display: grid;
        grid-template-columns: 1fr;
        grid-area: content;
        max-height: 100vh;
        overflow: auto;
        transition: max-height 0.2s;
      }

      :host([tab="hidden"]) .content {
        max-height: 0;
      }

      .animated-background {
        position: absolute;
        background: var(--bim-ui_main-base);
        width: 0;
        height: 0;
        top: 0;
        left: 0;
      }

      :host(:not([bottom])) .content {
        border-top: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([bottom]) .content {
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating]) {
        background-color: transparent;
      }

      :host([floating]) .switchers {
        justify-self: center;
        overflow: hidden;
        background-color: var(--bim-ui_bg-base);
      }

      :host([floating]:not([bottom])) .switchers {
        border-radius: var(--bim-ui_size-2xs) var(--bim-ui_size-2xs) 0 0;
        border-top: 1px solid var(--bim-ui_bg-contrast-20);
        border-left: 1px solid var(--bim-ui_bg-contrast-20);
        border-right: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating][bottom]) .switchers {
        border-radius: 0 0 var(--bim-ui_size-2xs) var(--bim-ui_size-2xs);
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
        border-left: 1px solid var(--bim-ui_bg-contrast-20);
        border-right: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating][tab="hidden"]) .switchers {
        border-radius: var(--bim-ui_size-2xs);
        border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating][bottom][tab="hidden"]) .switchers {
        border-top: 1px solid var(--bim-ui_bg-contrast-20);
      }

      :host([floating]) .content {
        border: 1px solid var(--bim-ui_bg-contrast-20);
        border-radius: var(--bim-ui_size-2xs);
        background-color: var(--bim-ui_bg-base);
      }
    `
];
let W = Qi;
Wt([
  Ut()
], W.prototype, "_switchers", 2);
Wt([
  d({ type: Boolean, reflect: !0 })
], W.prototype, "bottom", 2);
Wt([
  d({ type: Boolean, attribute: "switchers-hidden", reflect: !0 })
], W.prototype, "switchersHidden", 2);
Wt([
  d({ type: Boolean, reflect: !0 })
], W.prototype, "floating", 2);
Wt([
  d({ type: String, reflect: !0 })
], W.prototype, "tab", 1);
Wt([
  d({ type: Boolean, attribute: "switchers-full", reflect: !0 })
], W.prototype, "switchersFull", 2);
var Wa = Object.defineProperty, Ya = Object.getOwnPropertyDescriptor, Ge = (i, t, e, n) => {
  for (var s = n > 1 ? void 0 : n ? Ya(t, e) : t, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = (n ? o(t, e, s) : o(s)) || s);
  return n && s && Wa(t, e, s), s;
};
const Ki = class Ki extends C {
  constructor() {
    super(...arguments), this._defaultName = "__unnamed__", this.name = this._defaultName, this._hidden = !1;
  }
  set label(t) {
    this._label = t;
    const e = this.parentElement;
    e instanceof W && e.updateSwitchers();
  }
  get label() {
    return this._label;
  }
  set icon(t) {
    this._icon = t;
    const e = this.parentElement;
    e instanceof W && e.updateSwitchers();
  }
  get icon() {
    return this._icon;
  }
  set hidden(t) {
    this._hidden = t, this.dispatchEvent(new Event("hiddenchange"));
  }
  get hidden() {
    return this._hidden;
  }
  connectedCallback() {
    super.connectedCallback();
    const { parentElement: t } = this;
    if (t && this.name === this._defaultName) {
      const e = [...t.children].indexOf(this);
      this.name = `${this._defaultName}${e}`;
    }
  }
  render() {
    return m` <slot></slot> `;
  }
};
Ki.styles = S`
    :host {
      display: block;
      height: 100%;
      grid-row-start: 1;
      grid-column-start: 1;
      animation: openAnim 3s forwards;
      transform: translateY(0);
      max-height: 100vh;
      transition:
        opacity 0.3s ease,
        max-height 0.6s ease,
        transform 0.3s ease;
    }

    :host([hidden]) {
      transform: translateY(-20px);
      max-height: 0;
      opacity: 0;
      overflow: hidden;
      visibility: hidden;
    }
  `;
let L = Ki;
Ge([
  d({ type: String, reflect: !0 })
], L.prototype, "name", 2);
Ge([
  d({ type: String, reflect: !0 })
], L.prototype, "label", 1);
Ge([
  d({ type: String, reflect: !0 })
], L.prototype, "icon", 1);
Ge([
  d({ type: Boolean, reflect: !0 })
], L.prototype, "hidden", 1);
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Dn = (i) => i ?? P;
var Ga = Object.defineProperty, Qa = Object.getOwnPropertyDescriptor, G = (i, t, e, n) => {
  for (var s = n > 1 ? void 0 : n ? Qa(t, e) : t, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = (n ? o(t, e, s) : o(s)) || s);
  return n && s && Ga(t, e, s), s;
};
const Xi = class Xi extends C {
  constructor() {
    super(...arguments), this._inputTypes = [
      "date",
      "datetime-local",
      "email",
      "month",
      "password",
      "search",
      "tel",
      "text",
      "time",
      "url",
      "week",
      "area"
    ], this.value = "", this.vertical = !1, this.disabled = !1, this.resize = "vertical", this._type = "text", this.onValueChange = new Event("input");
  }
  set type(t) {
    this._inputTypes.includes(t) && (this._type = t);
  }
  get type() {
    return this._type;
  }
  /**
   * Gets the query value derived from the current input value.
   * The `getQuery` function is assumed to be a utility function that takes a string as input
   * and returns a processed query value based on the input.
   *
   * @returns The processed query value derived from the current input value.
   *
   * @example
   * ```typescript
   * const textInput = new TextInput();
   * textInput.value = "Key?Value";
   * console.log(textInput.query);
   * ```
   */
  get query() {
    return mi(this.value);
  }
  onInputChange(t) {
    t.stopPropagation();
    const e = t.target;
    clearTimeout(this._debounceTimeoutID), this._debounceTimeoutID = setTimeout(() => {
      this.value = e.value, this.dispatchEvent(this.onValueChange);
    }, this.debounce);
  }
  focus() {
    setTimeout(() => {
      var e;
      const t = (e = this.shadowRoot) == null ? void 0 : e.querySelector("input");
      t == null || t.focus();
    });
  }
  render() {
    return m`
      <bim-input
        .name=${this.name}
        .icon=${this.icon}
        .label=${this.label}
        .vertical=${this.vertical}
      >
        ${this.type === "area" ? m` <textarea
              aria-label=${this.label || this.name || "Text Input"}
              .value=${this.value}
              .rows=${this.rows ?? 5}
              ?disabled=${this.disabled}
              placeholder=${Dn(this.placeholder)}
              @input=${this.onInputChange}
              style="resize: ${this.resize};"
            ></textarea>` : m` <input
              aria-label=${this.label || this.name || "Text Input"}
              .type=${this.type}
              .value=${this.value}
              ?disabled=${this.disabled}
              placeholder=${Dn(this.placeholder)}
              @input=${this.onInputChange}
            />`}
      </bim-input>
    `;
  }
};
Xi.styles = [
  _t.scrollbar,
  S`
      :host {
        --bim-input--bgc: var(--bim-ui_bg-contrast-20);
        flex: 1;
        display: block;
      }

      input,
      textarea {
        font-family: inherit;
        background-color: transparent;
        border: none;
        width: 100%;
        padding: var(--bim-ui_size-3xs);
        color: var(--bim-text-input--c, var(--bim-ui_bg-contrast-100));
      }

      input {
        outline: none;
        height: 100%;
        padding: 0 var(--bim-ui_size-3xs); /* Override padding */
        border-radius: var(--bim-text-input--bdrs, var(--bim-ui_size-4xs));
      }

      :host([disabled]) input,
      :host([disabled]) textarea {
        color: var(--bim-ui_bg-contrast-60);
      }

      textarea {
        line-height: 1.1rem;
        outline: none;
      }

      :host(:focus) {
        --bim-input--olc: var(--bim-ui_accent-base);
      }

      /* :host([disabled]) {
      --bim-input--bgc: var(--bim-ui_bg-contrast-20);
    } */
    `
];
let B = Xi;
G([
  d({ type: String, reflect: !0 })
], B.prototype, "icon", 2);
G([
  d({ type: String, reflect: !0 })
], B.prototype, "label", 2);
G([
  d({ type: String, reflect: !0 })
], B.prototype, "name", 2);
G([
  d({ type: String, reflect: !0 })
], B.prototype, "placeholder", 2);
G([
  d({ type: String, reflect: !0 })
], B.prototype, "value", 2);
G([
  d({ type: Boolean, reflect: !0 })
], B.prototype, "vertical", 2);
G([
  d({ type: Number, reflect: !0 })
], B.prototype, "debounce", 2);
G([
  d({ type: Number, reflect: !0 })
], B.prototype, "rows", 2);
G([
  d({ type: Boolean, reflect: !0 })
], B.prototype, "disabled", 2);
G([
  d({ type: String, reflect: !0 })
], B.prototype, "resize", 2);
G([
  d({ type: String, reflect: !0 })
], B.prototype, "type", 1);
var Ka = Object.defineProperty, Xa = Object.getOwnPropertyDescriptor, Ns = (i, t, e, n) => {
  for (var s = n > 1 ? void 0 : n ? Xa(t, e) : t, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = (n ? o(t, e, s) : o(s)) || s);
  return n && s && Ka(t, e, s), s;
};
const Ji = class Ji extends C {
  constructor() {
    super(...arguments), this.rows = 2, this._vertical = !1;
  }
  set vertical(t) {
    this._vertical = t, this.updateChildren();
  }
  get vertical() {
    return this._vertical;
  }
  updateChildren() {
    const t = this.children;
    for (const e of t)
      this.vertical ? e.setAttribute("label-hidden", "") : e.removeAttribute("label-hidden");
  }
  render() {
    return m`
      <style>
        .parent {
          grid-auto-flow: ${this.vertical ? "row" : "column"};
          grid-template-rows: repeat(${this.rows}, 1fr);
        }
      </style>
      <div class="parent">
        <slot @slotchange=${this.updateChildren}></slot>
      </div>
    `;
  }
};
Ji.styles = S`
    .parent {
      display: grid;
      gap: 0.25rem;
    }

    ::slotted(bim-button[label]:not([vertical])) {
      --bim-button--jc: flex-start;
    }

    ::slotted(bim-button) {
      --bim-label--c: var(--bim-ui_bg-contrast-80);
    }
  `;
let qt = Ji;
Ns([
  d({ type: Number, reflect: !0 })
], qt.prototype, "rows", 2);
Ns([
  d({ type: Boolean, reflect: !0 })
], qt.prototype, "vertical", 1);
var Ja = Object.defineProperty, Za = Object.getOwnPropertyDescriptor, Qe = (i, t, e, n) => {
  for (var s = n > 1 ? void 0 : n ? Za(t, e) : t, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = (n ? o(t, e, s) : o(s)) || s);
  return n && s && Ja(t, e, s), s;
};
const Zi = class Zi extends C {
  constructor() {
    super(...arguments), this._vertical = !1, this._labelHidden = !1;
  }
  set vertical(t) {
    this._vertical = t, this.updateChildren();
  }
  get vertical() {
    return this._vertical;
  }
  set labelHidden(t) {
    this._labelHidden = t, this.updateChildren();
  }
  get labelHidden() {
    return this._labelHidden;
  }
  updateChildren() {
    const t = this.children;
    for (const e of t)
      e instanceof qt && (e.vertical = this.vertical), e.toggleAttribute("label-hidden", this.vertical);
  }
  render() {
    return m`
      <div class="parent">
        <div class="children">
          <slot @slotchange=${this.updateChildren}></slot>
        </div>
        ${!this.labelHidden && (this.label || this.icon) ? m`<bim-label .icon=${this.icon}>${this.label}</bim-label>` : null}
      </div>
    `;
  }
};
Zi.styles = S`
    :host {
      --bim-label--fz: var(--bim-ui_size-xs);
      --bim-label--c: var(--bim-ui_bg-contrast-60);
      display: block;
      flex: 1;
    }

    :host(:not([vertical])) ::slotted(bim-button[vertical]) {
      --bim-icon--fz: var(--bim-ui_size-5xl);
      min-height: 3.75rem;
    }

    .parent {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      align-items: center;
      padding: 0.5rem;
      height: 100%;
      box-sizing: border-box;
      justify-content: space-between;
    }

    :host([vertical]) .parent {
      flex-direction: row-reverse;
    }

    :host([vertical]) .parent > bim-label {
      writing-mode: tb;
    }

    .children {
      display: flex;
      gap: 0.25rem;
    }

    :host([vertical]) .children {
      flex-direction: column;
    }
  `;
let vt = Zi;
Qe([
  d({ type: String, reflect: !0 })
], vt.prototype, "label", 2);
Qe([
  d({ type: String, reflect: !0 })
], vt.prototype, "icon", 2);
Qe([
  d({ type: Boolean, reflect: !0 })
], vt.prototype, "vertical", 1);
Qe([
  d({ type: Boolean, attribute: "label-hidden", reflect: !0 })
], vt.prototype, "labelHidden", 1);
var tl = Object.defineProperty, el = Object.getOwnPropertyDescriptor, Ii = (i, t, e, n) => {
  for (var s = n > 1 ? void 0 : n ? el(t, e) : t, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = (n ? o(t, e, s) : o(s)) || s);
  return n && s && tl(t, e, s), s;
};
const tn = class tn extends C {
  constructor() {
    super(...arguments), this.labelsHidden = !1, this._vertical = !1, this._hidden = !1;
  }
  set vertical(t) {
    this._vertical = t, this.updateSections();
  }
  get vertical() {
    return this._vertical;
  }
  set hidden(t) {
    this._hidden = t, this.dispatchEvent(new Event("hiddenchange"));
  }
  get hidden() {
    return this._hidden;
  }
  // private setActivationButton() {
  //   this.activationButton.draggable = Manager.config.draggableToolbars;
  //   this.activationButton.addEventListener(
  //     "click",
  //     () => (this.hidden = !this.hidden),
  //   );
  //   this.activationButton.setAttribute("data-ui-manager-id", this._managerID);
  //   this.activationButton.addEventListener("dragstart", (e) => {
  //     const id = this.getAttribute("data-ui-manager-id");
  //     if (e.dataTransfer && id) {
  //       e.dataTransfer.setData("id", id);
  //       e.dataTransfer.effectAllowed = "move";
  //     }
  //     const containers = document.querySelectorAll("bim-toolbars-container");
  //     for (const container of containers) {
  //       if (container === this.parentElement) continue;
  //       container.dropping = true;
  //     }
  //   });
  //   this.activationButton.addEventListener("dragend", (e) => {
  //     if (e.dataTransfer) e.dataTransfer.clearData();
  //     const containers = document.querySelectorAll("bim-toolbars-container");
  //     for (const container of containers) {
  //       container.dropping = false;
  //     }
  //   });
  // }
  updateSections() {
    const t = this.children;
    for (const e of t)
      e instanceof vt && (e.labelHidden = this.vertical && !le.config.sectionLabelOnVerticalToolbar, e.vertical = this.vertical);
  }
  // firstUpdated() {
  //   this.setAttribute("data-ui-manager-id", this._managerID);
  // }
  render() {
    return m`
      <div class="parent">
        <slot @slotchange=${this.updateSections}></slot>
      </div>
    `;
  }
};
tn.styles = S`
    :host {
      --bim-button--bgc: transparent;
      background-color: var(--bim-ui_bg-base);
      border-radius: var(--bim-ui_size-2xs);
      display: block;
    }

    :host([hidden]) {
      display: none;
    }

    .parent {
      display: flex;
      width: max-content;
      pointer-events: auto;
    }

    :host([vertical]) .parent {
      flex-direction: column;
    }

    :host([vertical]) {
      width: min-content;
      border-radius: var(--bim-ui_size-2xs);
      border: 1px solid var(--bim-ui_bg-contrast-20);
    }

    ::slotted(bim-toolbar-section:not(:last-child)) {
      border-right: 1px solid var(--bim-ui_bg-contrast-20);
      border-bottom: none;
    }

    :host([vertical]) ::slotted(bim-toolbar-section:not(:last-child)) {
      border-bottom: 1px solid var(--bim-ui_bg-contrast-20);
      border-right: none;
    }
  `;
let Vt = tn;
Ii([
  d({ type: String, reflect: !0 })
], Vt.prototype, "icon", 2);
Ii([
  d({ type: Boolean, attribute: "labels-hidden", reflect: !0 })
], Vt.prototype, "labelsHidden", 2);
Ii([
  d({ type: Boolean, reflect: !0 })
], Vt.prototype, "vertical", 1);
var il = Object.defineProperty, nl = (i, t, e, n) => {
  for (var s = void 0, r = i.length - 1, o; r >= 0; r--)
    (o = i[r]) && (s = o(t, e, s) || s);
  return s && il(t, e, s), s;
};
const en = class en extends C {
  constructor() {
    super(), this._onResize = new Event("resize"), new ResizeObserver(() => {
      setTimeout(() => {
        this.dispatchEvent(this._onResize);
      });
    }).observe(this);
  }
  render() {
    return m`
      <div class="parent">
        <slot></slot>
      </div>
    `;
  }
};
en.styles = S`
    :host {
      display: grid;
      min-width: 0;
      min-height: 0;
      height: 100%;
    }

    .parent {
      overflow: hidden;
      position: relative;
    }
  `;
let Me = en;
nl([
  d({ type: String, reflect: !0 })
], Me.prototype, "name");
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const qs = "important", sl = " !" + qs, Sl = ms(class extends bs {
  constructor(i) {
    var t;
    if (super(i), i.type !== fs.ATTRIBUTE || i.name !== "style" || ((t = i.strings) == null ? void 0 : t.length) > 2)
      throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.");
  }
  render(i) {
    return Object.keys(i).reduce((t, e) => {
      const n = i[e];
      return n == null ? t : t + `${e = e.includes("-") ? e : e.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, "-$&").toLowerCase()}:${n};`;
    }, "");
  }
  update(i, [t]) {
    const { style: e } = i.element;
    if (this.ft === void 0)
      return this.ft = new Set(Object.keys(t)), this.render(t);
    for (const n of this.ft)
      t[n] == null && (this.ft.delete(n), n.includes("-") ? e.removeProperty(n) : e[n] = null);
    for (const n in t) {
      const s = t[n];
      if (s != null) {
        this.ft.add(n);
        const r = typeof s == "string" && s.endsWith(sl);
        n.includes("-") || r ? e.setProperty(n, r ? s.slice(0, -11) : s, r ? qs : "") : e[n] = s;
      }
    }
    return Pt;
  }
});
export {
  ya as Button,
  pt as Checkbox,
  J as ColorInput,
  Le as Component,
  bi as ContextMenu,
  D as Dropdown,
  ce as Grid,
  gi as Icon,
  Ot as Input,
  ft as Label,
  le as Manager,
  R as NumberInput,
  T as Option,
  nt as Panel,
  mt as PanelSection,
  bt as Selector,
  L as Tab,
  z as Table,
  ze as TableCell,
  vi as TableChildren,
  Be as TableGroup,
  gt as TableRow,
  W as Tabs,
  B as TextInput,
  Vt as Toolbar,
  qt as ToolbarGroup,
  vt as ToolbarSection,
  Me as Viewport,
  Re as getElementValue,
  m as html,
  Nt as ref,
  Sl as styleMap
};
